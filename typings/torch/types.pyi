"""
This type stub file was generated by pyright.
"""

import os
from collections.abc import Sequence
from typing import Any, IO, TYPE_CHECKING, Union
from typing_extensions import Self, TypeAlias
from torch import DispatchKey as DispatchKey, Size as Size, SymBool as SymBool, SymFloat as SymFloat, SymInt as SymInt, Tensor as Tensor, device as _device, dtype as _dtype
from torch.autograd.graph import GradientEdge

if TYPE_CHECKING:
    ...
__all__ = ["Number", "Device", "FileLike", "Storage"]
_TensorOrTensors: TypeAlias = Union[Tensor, Sequence[Tensor]]
_TensorOrTensorsOrGradEdge: TypeAlias = Union[Tensor, Sequence[Tensor], "GradientEdge", Sequence["GradientEdge"],]
_size: TypeAlias = Union[Size, list[int], tuple[int, ...]]
_symsize: TypeAlias = Union[Size, Sequence[Union[int, SymInt]]]
_dispatchkey: TypeAlias = Union[str, DispatchKey]
IntLikeType: TypeAlias = Union[int, SymInt]
FloatLikeType: TypeAlias = Union[float, SymFloat]
BoolLikeType: TypeAlias = Union[bool, SymBool]
py_sym_types = ...
PySymType: TypeAlias = Union[SymInt, SymFloat, SymBool]
Number: TypeAlias = Union[int, float, bool]
_Number = ...
FileLike: TypeAlias = Union[str, os.PathLike[str], IO[bytes]]
Device: TypeAlias = Union[_device, str, int, None]
class Storage:
    _cdata: int
    device: _device
    dtype: _dtype
    _torch_load_uninitialized: bool
    def __deepcopy__(self, memo: dict[int, Any]) -> Self:
        ...
    
    def element_size(self) -> int:
        ...
    
    def is_shared(self) -> bool:
        ...
    
    def share_memory_(self) -> Self:
        ...
    
    def nbytes(self) -> int:
        ...
    
    def cpu(self) -> Self:
        ...
    
    def data_ptr(self) -> int:
        ...
    
    def from_file(self, filename: str, shared: bool = ..., nbytes: int = ...) -> Self:
        ...
    


