"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from enum import Enum
from typing import Any, Optional
from types import ModuleType

_TAGS: dict[str, dict[str, Any]] = ...
class SupportLevel(Enum):
    """
    Indicates at what stage the feature
    used in the example is handled in export.
    """
    SUPPORTED = ...
    NOT_SUPPORTED_YET = ...


ArgsType = tuple[Any, ...]
def check_inputs_type(args, kwargs): # -> None:
    ...

@dataclass(frozen=True)
class ExportCase:
    example_args: ArgsType
    description: str
    model: torch.nn.Module
    name: str
    example_kwargs: dict[str, Any] = ...
    extra_args: Optional[ArgsType] = ...
    tags: set[str] = ...
    support_level: SupportLevel = ...
    dynamic_shapes: Optional[dict[str, Any]] = ...
    def __post_init__(self): # -> None:
        ...
    


_EXAMPLE_CASES: dict[str, ExportCase] = ...
_MODULES: set[ModuleType] = ...
_EXAMPLE_CONFLICT_CASES: dict[str, list[ExportCase]] = ...
_EXAMPLE_REWRITE_CASES: dict[str, list[ExportCase]] = ...
def register_db_case(case: ExportCase) -> None:
    """
    Registers a user provided ExportCase into example bank.
    """
    ...

def to_snake_case(name): # -> str:
    ...

def export_case(**kwargs): # -> Callable[..., ExportCase]:
    """
    Decorator for registering a user provided case into example bank.
    """
    ...

def export_rewrite_case(**kwargs): # -> Callable[..., ExportCase]:
    ...

