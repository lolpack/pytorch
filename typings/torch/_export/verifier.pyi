"""
This type stub file was generated by pyright.
"""

from typing import Any, TYPE_CHECKING, final
from torch._ops import OpOverload
from torch.fx import GraphModule
from torch.export.exported_program import ExportedProgram

if TYPE_CHECKING:
    ...
class SpecViolationError(Exception):
    ...


def is_functional(op: OpOverload) -> bool:
    ...

class _VerifierMeta(type):
    _registry: dict[str, type[Verifier]] = ...
    def __new__(metacls, name, bases, attrs): # -> Self:
        ...
    


def getattr_recursive(obj: Any, target: str) -> Any:
    ...

class Verifier(metaclass=_VerifierMeta):
    dialect = ...
    def allowed_builtin_ops(self) -> list:
        ...
    
    def allowed_op_types(self) -> tuple[type[Any], ...]:
        ...
    
    def allowed_getattr_types(self) -> tuple[type[Any], ...]:
        ...
    
    def allowed_getattr_types_for_subgm(self) -> tuple[type[Any], ...]:
        ...
    
    def check_valid_op(self, op): # -> None:
        ...
    
    def check_additional(self, gm: GraphModule) -> None:
        """
        Additional checks that are specific to some dialects.
        """
        ...
    
    @final
    def check(self, ep: ExportedProgram) -> None:
        ...
    


class TrainingIRVerifier(Verifier):
    dialect = ...


def load_verifier(dialect: str) -> type[Verifier]:
    ...

