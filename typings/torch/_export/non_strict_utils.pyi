"""
This type stub file was generated by pyright.
"""

import inspect
import torch
from typing import Any, Optional, TYPE_CHECKING, Union
from torch._guards import Source
from torch._subclasses.fake_tensor import FakeTensorMode
from torch.export import Constraint
from torch.fx.experimental.symbolic_shapes import EqualityConstraint
from torch.utils._pytree import KeyPath

if TYPE_CHECKING:
    ...
log = ...
class _KeyPath:
    """
    Wraps `KeyPath` to aid `isinstance` checks.
    """
    def __init__(self, kp: KeyPath) -> None:
        ...
    


class _KeyPathTrie:
    """
    Builds a trie of `KeyPath` prefixes mapping to `Source` leaves.
    """
    def __init__(self) -> None:
        ...
    
    def add(self, kp: KeyPath, src: Source): # -> None:
        ...
    
    def get(self, kp: KeyPath) -> tuple[Source, KeyPath]:
        ...
    


def make_sourced_prefixes(nn_module, args, kwargs) -> _KeyPathTrie:
    ...

def key_path_to_source(kp: KeyPath, sourced_prefixes: Optional[_KeyPathTrie] = ...) -> Source:
    """
    Given a key path, return the source for the key path.
    """
    ...

def fakify(mode: FakeTensorMode, kp: KeyPath, t: Any, t_constraints: dict[int, dict[int, Constraint]], sources: dict[tuple[int, int], list[Source]], sourced_prefixes: Optional[_KeyPathTrie] = ...): # -> IntLikeType | Any | ScriptObject | Module | FakeTensor:
    ...

def make_fake_inputs(nn_module, args, kwargs, dynamic_shapes, _is_torch_jit_trace=..., allow_complex_guards_as_runtime_asserts=...): # -> tuple[Any | FakeTensorMode, PyTree, PyTree, EqualityConstraint, Signature | None, Any]:
    """
    Given an nn module, example inputs, and constraints, return a new fake mode,
    fake inputs created in that mode whose dynamic shape dimensions are constrained
    by the given ranges, and sources for pairs of dynamic shape dimensions that are
    constrained to be equal.
    """
    ...

def produce_guards_and_solve_constraints(fake_mode: FakeTensorMode, gm: torch.fx.GraphModule, dynamic_shapes: Union[dict[str, Any], tuple[Any], list[Any], None], equalities_inputs: EqualityConstraint, original_signature: inspect.Signature, _is_torch_jit_trace=...): # -> None:
    """
    Given a fake mode, sources pairs corresponding to equal dynamic shape dimensions,
    and a graph module, produce guards on the fake mode's shape env (raising constraint
    violations if any), solve (to suggest simplifications or fixes).
    Dynamo already performs this, so this is for non-strict mode.

    Additional inputs:
        equalities_inputs: the equality constraints to use for guards
        original_signature: the signature of the forward method
    """
    ...

def is_int(x: object) -> bool:
    ...

def make_constraints(fake_mode: FakeTensorMode, gm: torch.fx.GraphModule, combined_args: dict[str, Any], dynamic_shapes: Union[dict[str, Any], tuple[Any], list[Any], None], num_lifted_inputs: int): # -> dict[Any, Any]:
    """
    Given a fake mode's shape env and user-specified dynamic shapes,
    return the resulting range constraints and equality constraints.

    Additional args:
        num_lifted_inputs: the number of non-user-input placeholder nodes in the graph
        (used only to enumerate the user-input nodes)
    """
    ...

class _NonStrictTorchFunctionHandler(torch.overrides.TorchFunctionMode):
    """
    1. Handles data-dependent errors raised by torch function calls in non-strict.

    Any data-dependent error is due to some condition on unbacked symints
    that cannot be resolved. A mechanical way of fixing the error is to use
    a torch._check() call to assert either that condition or its negation.
    The handler suggests these options as code and points to the location
    of the torch function call that raised the error as part of the error
    message shown to the user, who can then simply select and copy-paste
    a suggested fix at that location.

    NOTE: Not all data-dependent errors are raised by torch function calls.
    In particular, conditions on unbacked symints can appear outside such
    calls, and as such are not handled here.

    2. Overrides torch functions that are known to cause problems in non-strict.

    Certain Python features, such as indexing/slicing, cannot be intercepted
    in non-strict. Likewise, certain legacy ops, such as distributed collectives,
    may need to be mapped to other ops. When there is special handling in Dynamo
    for such things, tracing can fail in non-strict (while succeeding in strict).
    Fortunately, redirecting to other torch functions can often fix such issues.

    3. Handles line-of-code logging for each torch function call in non-strict.

    Usage: TORCHEXPORT_EXTENDED_DEBUG_CURRENT_LOC=1 TORCH_LOGS="+export" ...
    """
    def __torch_function__(self, func, types, args=..., kwargs=...):
        ...
    


