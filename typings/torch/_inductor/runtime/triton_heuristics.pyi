"""
This type stub file was generated by pyright.
"""

import dataclasses
from typing import Any, Callable, Generic, Literal, Optional, TYPE_CHECKING, TypeVar, Union
from torch.utils._ordered_set import OrderedSet
from .autotune_cache import AutotuneCache
from .hints import AutotuneHint, DeviceProperties, HeuristicType
from .static_cuda_launcher import StaticallyLaunchedCudaKernel
from .triton_compat import CompiledKernel, Config, KernelInterface
from collections.abc import Container
from torch._guards import CompileId

class NoTritonConfigsError(RuntimeError):
    ...


if TYPE_CHECKING:
    LauncherType = Any
_KernelType = Union[CompiledKernel, StaticallyLaunchedCudaKernel]
_T = TypeVar("_T", bound=_KernelType)
log = ...
def get_total_reduction_numel(numels: dict[str, int]) -> int:
    ...

def autotune_hints_to_configs(hints: OrderedSet[AutotuneHint], size_hints, block_size: int, device_props: DeviceProperties) -> list[Config]:
    """
    AutotuneHints can be attached to the metadata of triton kernels for providing
    suggestions about what to try for autotuning. One reason to do this is if there are
    some configs that are only useful in specific scenarios, in which case we can avoid
    wasting compile time on autotuning unless we know we are in one of those scenarios.

    Based on those hints, this function will generate a list of additional autotuning
    configs to try.
    """
    ...

def disable_pointwise_autotuning(inductor_meta): # -> bool:
    ...

def check_autotune_cache(configs: list[Config], filename: Optional[str], inductor_meta: dict[str, Any]) -> tuple[list[Config], Optional[AutotuneCache], dict[str, Any]]:
    """
    Given a list of configs, checks autotune cache and return metadata
    """
    ...

class CachingAutotuner(KernelInterface):
    """
    Simplified version of Triton autotuner that has no invalidation
    key and caches the best config to disk to improve cold start times.
    Unlike the main triton Autotuner, this version can precompile all
    configs, and does not rely on the Triton JIT.
    """
    def __init__(self, fn, triton_meta, configs, save_cache_hook, mutated_arg_names: list[str], optimize_mem, heuristic_type, size_hints=..., inductor_meta=..., custom_kernel=..., filename: Optional[str] = ..., reset_to_zero_arg_names: Optional[list[str]] = ..., autotune_cache_info: Optional[dict[str, Any]] = ...) -> None:
        ...
    
    def is_statically_launchable(self): # -> bool:
        """
        Checks if every compiled kernel is statically launchable, which
        allows us to efficiently cache it in FXGraphCache
        """
        ...
    
    def recheck_autotune_cache(self, reload_kernel_from_src: Callable[[], CachingAutotuner]) -> None:
        """
        On cache load on static autotuner, we need to recheck the autotune cache, since
        a best config could have been found from a previous run
        """
        ...
    
    def set_compile_info(self, compile_id: Optional[CompileId], is_backward: bool) -> None:
        ...
    
    def precompile(self, warm_cache_only=..., reload_kernel: Optional[Callable[[], CachingAutotuner]] = ..., static_triton_bundle_key: Optional[str] = ...): # -> None:
        ...
    
    def prepare_for_pickle(self) -> tuple[Any, Any, Any, Any, Any]:
        """Drop stuff from triton.JITFunction that does not pickle.
        This must be called after precompile so that these things are no longer needed.
        Returns a tuple of old values
        """
        ...
    
    def prepare_for_caching(self) -> None:
        """
        Statically Launched CUDA Kernels have a raw cubin on them
        that we don't need to store in the cache(since TritonBundler handles the collection for us)
        """
        ...
    
    def __getstate__(self) -> dict[str, Any]:
        ...
    
    def __setstate__(self, state: dict[str, Any]) -> None:
        ...
    
    def get_device_interface(self): # -> type[DeviceInterface]:
        ...
    
    def bench(self, launcher, *args, with_profiler=..., **kwargs): # -> float:
        """Measure the performance of a given launcher"""
        ...
    
    def copy_args_to_cpu_if_needed(self, *args, **kwargs): # -> dict[Any, Any]:
        """
        To support benchmarking in the presence of mutated args, we need to avoid
        autotuning contanminating them. We try to pass cloned args to the kernel.
        If those clones would increase the peak memory usage, however, we instead
        copy to cpu and restore them after each iteration. Figure out the args
        to be copied and do the copying.
        """
        ...
    
    def restore_args_from_cpu(self, cpu_copies): # -> None:
        ...
    
    def reset_to_zero_args(self, *args, **kwargs): # -> None:
        ...
    
    def maybe_clone_args(self, exclude: Container[str], *args, **kwargs) -> tuple[list[Any], dict[str, Any]]:
        """
        Prepare new args and kwargs by cloning any in-place buffers
        (that are not in the provided exclusion list), to avoid autotune
        contaminating them. Avoid cloning the other buffers because it
        leads to increased memory usage.
        """
        ...
    
    def clone_args(self, *args, **kwargs) -> tuple[list[Any], dict[str, Any]]:
        ...
    
    def benchmark_all_configs(self, *args, **kwargs): # -> dict[LauncherType, float]:
        ...
    
    def autotune_to_one_config(self, *args, **kwargs): # -> None:
        """Do the actual autotuning"""
        ...
    
    def save_gpu_kernel(self, stream, launcher): # -> None:
        ...
    
    def coordinate_descent_tuning(self, launcher, *args, **kwargs):
        """
        Coordinate descent tuning can be run with or without max-autotune.

        The only difference between these two is the starting config for coordinate_descent tuning.
        E.g., assuming regular autotune only get one config C1; while max-autotune get 4 configs C1, C2, C3, C4
        and max-autotune figure out C3 is the best.

        Then if coordinate desecnt tuning is run with max-autotune disabled, it will start from C1;
        while if coordinate descent tuning is run with max-autotune enabled, it will start from C3.
        """
        ...
    
    def get_profiler_kwargs(self, stream, launcher): # -> dict[str, Any]:
        ...
    
    def run(self, *args, stream, benchmark_run=..., **kwargs): # -> LauncherType:
        ...
    


class _ConstRepr:
    def __init__(self, value: str) -> None:
        ...
    
    def __call__(self, _=...) -> str:
        ...
    


class CompileResult(Generic[_T]):
    def __init__(self, kernel: _T, config: Config, compile_meta: dict[str, Any], inductor_meta: dict[str, Any]) -> None:
        ...
    
    def make_launcher(self) -> LauncherType:
        ...
    


class CannotStaticallyLaunchKernel(Exception):
    ...


class StaticTritonCompileResult(CompileResult[StaticallyLaunchedCudaKernel]):
    """
    TritonCompileResult that uses StaticCudaLauncher,
    which vastly simplifies the setup and metadata needed to be kept.
    """
    @staticmethod
    def can_statically_launch(kernel: CompiledKernel, inductor_meta: dict[str, Any], triton_meta: dict[str, Any], heuristic_type: HeuristicType) -> Optional[StaticallyLaunchedCudaKernel]:
        ...
    
    def reload_cubin_path(self): # -> None:
        """
        When loading from cache on disk, we want to reload cubin
        files from their appropriate location on disc.
        """
        ...
    
    def make_launcher(self) -> LauncherType:
        ...
    


class TritonCompileResult(CompileResult[CompiledKernel]):
    """
    Upstream Triton CompileKernel can not be pickled.  This is a wrapper
    to support serialization and generate the launcher function.
    """
    def __getstate__(self) -> dict[str, Any]:
        ...
    
    def __setstate__(self, state: dict[str, Any]) -> None:
        ...
    
    def make_launcher(self) -> LauncherType:
        """
        Launching triton kernels is performance sensitive, we compile
        a custom Python function get the grid() and reorder the args to
        the underlying wrapper.
        """
        ...
    


collected_calls: list[Any] = ...
def start_graph(): # -> None:
    ...

def end_graph(output_file): # -> None:
    ...

class DebugAutotuner(CachingAutotuner):
    def __init__(self, *args, regex_filter=..., with_profiler=..., with_bandwidth_info=..., **kwargs) -> None:
        ...
    
    def run(self, *args, stream, **kwargs): # -> None:
        ...
    


def hash_configs(configs: list[Config]): # -> str:
    """
    Hash used to check for changes in configurations
    """
    ...

def cached_autotune(size_hints: Optional[list[int]], configs: list[Config], triton_meta, heuristic_type, filename=..., inductor_meta=..., custom_kernel=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """
    A copy of triton.autotune that calls our subclass.  Our subclass
    has additional debugging, error handling, and on-disk caching.
    """
    ...

def unique_configs(configs: list[Config]): # -> list[Any]:
    """Remove duplicate configurations"""
    ...

def check_config(cfg, *, xnumel=..., ynumel=..., znumel=...): # -> None:
    ...

def check_max_block(cfg: dict[str, int]): # -> None:
    """
    Check that block sizes are within the maximum allowed.
    """
    ...

def triton_config(size_hints, x, y=..., z=..., num_stages=..., num_elements_per_warp=..., min_elem_per_thread=...) -> Config:
    """
    Construct a pointwise triton config with some adjustment heuristics
    based on size_hints. Size_hints is a tuple of numels in each tile
    dimension and will be rounded up to the nearest power of 2.

    num_elements_per_warp is a suggestion for controlling how many warps
    the triton config should contain. e.g.: if x=16, y=8, z=4 then
    num_elements = 16*8*4 = 512. Then if we set num_elements_per_warp=128,
    we'll launch 512 (elem) / 128 (elem/warp) = 4 warps. Note that it's
    just a suggestion, and sometimes other adjustment heuristics will
    override the num_elements_per_warp.

    min_elem_per_thread controls the minimum number of elements
    processed by each thread. It's always enforced.
    """
    ...

def triton_config_reduction(size_hints, x: int, r: int, num_stages=..., num_warps=..., register_intensive=...) -> Config:
    """
    Construct a reduction triton config with some adjustment heuristics
    based on size_hints. Size_hints is a tuple of numels in each tile
    dimension and will be rounded up to the nearest power of 2.
    """
    ...

def triton_config_tiled_reduction(size_hints, x, y, r, num_stages=..., register_intensive=...): # -> object:
    """
    Construct a tile reduction triton config with some adjustment
    heuristics based on size_hints. Size_hints is a tuple of numels in
    each tile dimension and will be rounded up to the nearest power of 2.
    """
    ...

def pointwise(size_hints, triton_meta, tile_hint=..., filename=..., min_elem_per_thread=..., inductor_meta=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """
    Construct @triton.heuristics() based on size_hints.
    """
    ...

def match_target_block_product(size_hints, tiling_scores, target_block_product, min_block_size=...): # -> dict[Any, Any]:
    """
    Distribute block sizes across dimensions according to tiling scores,
    aiming to match a target product of block sizes.
    """
    ...

def adapt_config_for_tiling(size_hints, tiling_scores, original_x, original_r, num_warps=..., num_stages=..., register_intensive=..., persistent_reduction=...) -> Config:
    """
    Create an adapted configuration based on tiling scores,
    redistributing the same total block size (x * r) according to tiling scores.
    """
    ...

def reduction(size_hints, reduction_hint=..., triton_meta=..., filename=..., inductor_meta=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """args to @triton.heuristics()"""
    ...

def cooperative_reduction(size_hints, reduction_hint, triton_meta, filename, inductor_meta): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    ...

def persistent_reduction(size_hints, reduction_hint=..., triton_meta=..., filename=..., inductor_meta=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    ...

def split_scan(size_hints, reduction_hint=..., triton_meta=..., filename=..., inductor_meta=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """Heuristic for TritonSplitScanKernel"""
    ...

def template(num_stages, num_warps, triton_meta, num_consumer_groups=..., num_buffers_warp_spec=..., filename=..., inductor_meta=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """
    Compile a triton template
    """
    ...

def config_to_dict(config: Config) -> dict[str, Any]:
    ...

def config_from_dict(config: dict[str, Any]) -> Config:
    ...

def fixed_config(config, filename, triton_meta, inductor_meta): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """
    Used when the configuration is already decided at compile time
    """
    ...

def user_autotune(configs, triton_meta, filename=..., inductor_meta=..., custom_kernel=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """
    Compile a user defined triton kernel
    """
    ...

def foreach(triton_meta, num_warps, filename=..., inductor_meta=...): # -> Callable[..., DebugAutotuner | CachingAutotuner]:
    """
    Compile a triton foreach kernel
    """
    ...

@dataclasses.dataclass
class GridExpr:
    """Generate code for grid size expressions in launcher"""
    inductor_meta: dict[str, Any]
    mode: Literal["python", "cpp"] = ...
    prefix: list[str] = ...
    x_grid: Union[str, int] = ...
    y_grid: Union[str, int] = ...
    z_grid: Union[str, int] = ...
    def __post_init__(self) -> None:
        ...
    
    def generate(self, meta: dict[str, int]) -> None:
        ...
    
    def ceildiv(self, numel: Union[str, int], block: Union[None, int, str]) -> Union[str, int]:
        ...
    
    def maximum(self, seq: list[Union[int, str]]) -> Union[int, str]:
        """Codegen for max function with constant folding, constants are represented as int"""
        ...
    
    def summation(self, seq: list[Union[int, str]]) -> Union[int, str]:
        """Codegen for sum function with constant folding, constants are represented as int"""
        ...
    
    def assign_tmp(self, name: str, expr: Union[str, int]) -> str:
        ...
    
    @staticmethod
    def from_meta(inductor_meta: dict[str, Any], cfg: Union[Config, dict[str, int]], mode: Literal["python", "cpp"] = ...) -> GridExpr:
        ...
    
    def eval_slow(self, meta: dict[str, int]) -> tuple[int, int, int]:
        ...
    


class Grid1D(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class Grid2D(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class Grid3D(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class Grid2DWithYZOverflow(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class CooperativeReductionGrid(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class SplitScanGrid(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class FixedGrid(GridExpr):
    @staticmethod
    def setup_grid_as_args() -> dict[str, Any]:
        """Inductor meta so the launcher takes three extra grid arguments"""
        ...
    
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class PrecomputedGrid(GridExpr):
    def generate(self, meta: dict[str, int]) -> None:
        ...
    


class ComboKernelGrid(GridExpr):
    def generate(self, meta: dict[str, int]): # -> None:
        ...
    
    def combo_x_grid(self, xnumels: list[Union[int, str]], no_x_dims: list[bool], meta: dict[str, int]) -> Union[str, int]:
        ...
    


class SequentialComboKernelGrid(ComboKernelGrid):
    def combo_x_grid(self, xnumels: list[Union[int, str]], no_x_dims: list[bool], meta: dict[str, int]) -> Union[str, int]:
        ...
    


class RoundRobinComboKernelGrid(ComboKernelGrid):
    def combo_x_grid(self, xnumels: list[Union[int, str]], no_x_dims: list[bool], meta: dict[str, int]) -> str:
        ...
    


