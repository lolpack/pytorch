"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional, TYPE_CHECKING
from .triton_compat import triton

if TYPE_CHECKING:
    ...
log = ...
def get_field(config, name):
    ...

def set_field(config, name, value): # -> None:
    ...

class CoordescTuner:
    """
    The coordinate descent tuner. Tune one field/coordinate at a time.

    TODO will it be necessary to tune multiple fields simultaneously.


    TODO: what if both increasing and decreasing a field can improve perf.
          i.e., there are multiple local optima..
    """
    def __init__(self, is_mm=..., name=..., size_hints=..., inductor_meta=...) -> None:
        ...
    
    def get_config_max(self, prefix: str) -> int:
        ...
    
    def get_warpsmax(self): # -> Literal[32]:
        ...
    
    def cache_benchmark_result(self, config, timing): # -> None:
        ...
    
    def lookup_in_cache(self, config): # -> None:
        ...
    
    def call_func(self, func, config):
        ...
    
    @property
    def tunable_fields(self): # -> list[str]:
        ...
    
    def value_too_large(self, name: str, val: int) -> bool:
        ...
    
    def get_neighbour_values(self, name, orig_val, radius=..., include_self=...): # -> list[Any]:
        """
        Get neighbour values in 'radius' steps. The original value is not
        returned as it's own neighbour.
        """
        ...
    
    @staticmethod
    def has_improvement(baseline, test): # -> Literal[False]:
        ...
    
    def check_all_tuning_directions(self, func: Callable[[triton.Config], float], best_config, best_timing): # -> tuple[bool, Any, Any | float]:
        """
        Check all directions. We only do this once the regular coordinate
        descent tuning find no better choices any more.
        We only have a few tunable fields, so this should be fine.
        """
        ...
    
    def compare_config(self, func, candidate_config, best_config, best_timing): # -> tuple[Literal[False], float] | tuple[Literal[True], Any] | tuple[Literal[False], Any]:
        """
        Check if candidate_config is better than best_config.

        Return a tuple of (compare_result, candidate_timing).
        compare_result is true iff candidate_config is better.
        """
        ...
    
    def autotune(self, func: Callable[[triton.Config], float], baseline_config: triton.Config, baseline_timing: Optional[float] = ...) -> triton.Config:
        ...
    


