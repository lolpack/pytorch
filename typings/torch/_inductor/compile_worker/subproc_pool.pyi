"""
This type stub file was generated by pyright.
"""

import typing
from concurrent.futures import Future, ProcessPoolExecutor
from enum import Enum
from typing import Callable, IO, Optional, TypeVar
from typing_extensions import Never, ParamSpec

log = ...
_P = ParamSpec("_P")
_T = TypeVar("_T")
msg_bytes = ...
class _SubprocExceptionInfo:
    """
    Carries exception info from subprocesses across the wire. traceback
    objects are not pickleable, so we store the trace as a string and
    use it for the message in the exception thrown in the main process.
    """
    def __init__(self, details: str) -> None:
        ...
    


class SubprocException(Exception):
    """
    Thrown when a job in a subprocess raises an Exception.
    """
    def __init__(self, details: str) -> None:
        ...
    


class SubprocPickler:
    """
    Allows a caller to provide a custom pickler for passing data with the
    subprocess.
    """
    def dumps(self, obj: object) -> bytes:
        ...
    
    def loads(self, data: bytes) -> object:
        ...
    


class SubprocKind(Enum):
    FORK = ...
    SPAWN = ...


class SubprocPool:
    """
    Mimic a concurrent.futures.ProcessPoolExecutor, but wrap it in
    a subprocess.Popen() to try to avoid issues with forking/spawning
    """
    def __init__(self, nprocs: int, pickler: Optional[SubprocPickler] = ..., kind: SubprocKind = ...) -> None:
        ...
    
    def submit(self, job_fn: Callable[_P, _T], *args: _P.args, **kwargs: _P.kwargs) -> Future[_T]:
        ...
    
    def shutdown(self) -> None:
        ...
    


class SubprocMain:
    """Communicates with a SubprocPool in the parent process, called by __main__.py"""
    def __init__(self, pickler: SubprocPickler, kind: SubprocKind, nprocs: int, read_pipe: IO[bytes], write_pipe: IO[bytes]) -> None:
        ...
    
    def main(self) -> None:
        ...
    
    def submit(self, job_id: int, data: bytes) -> None:
        ...
    
    @staticmethod
    def do_job(pickler: SubprocPickler, data: bytes) -> bytes:
        ...
    


AnyPool = typing.Union[ProcessPoolExecutor, SubprocPool]
class TestException(RuntimeError):
    ...


def raise_testexc() -> Never:
    ...

