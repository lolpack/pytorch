"""
This type stub file was generated by pyright.
"""

import sympy
from collections.abc import Sequence
from typing import Any, Optional
from torch.utils._ordered_set import OrderedSet
from .ir import ExternKernelAlloc, TensorBox

class ConvolutionUnary(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x: TensorBox, weight: TensorBox, bias: TensorBox, padding_: list[int], stride_: list[int], dilation_: list[int], groups: int, attr, scalars: Optional[list[Any]], algorithm): # -> MultiOutput:
        ...
    


class ConvolutionBinary(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=..., cpp_constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x: TensorBox, other: TensorBox, weight: TensorBox, bias: TensorBox, padding_: list[int], stride_: list[int], dilation_: list[int], groups: int, binary_attr: str, binary_alpha: Optional[float], unary_attr: Optional[str], unary_scalars: Optional[list[Any]], unary_algorithm: Optional[str]): # -> MultiOutput:
        ...
    


class ConvolutionBinaryInplace(ExternKernelAlloc):
    def __init__(self, kernel_layout, inputs, constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    def get_unbacked_symbol_defs(self) -> OrderedSet[sympy.Symbol]:
        ...
    
    @classmethod
    def create(cls, x: TensorBox, other: TensorBox, weight: TensorBox, bias: TensorBox, padding_: list[int], stride_: list[int], dilation_: list[int], groups: int, binary_attr: str, binary_alpha: Optional[float], unary_attr: Optional[str], unary_scalars: Optional[list[Any]], unary_algorithm: Optional[str]): # -> Any:
        ...
    


class ConvolutionTransposeUnary(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x: TensorBox, weight: TensorBox, bias: TensorBox, padding_: list[int], output_padding_: list[int], stride_: list[int], dilation_: list[int], groups_: int, attr, scalars: Optional[list[Any]], algorithm): # -> MultiOutput:
        ...
    


class QConvPointWisePT2E(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        """
        if bias is not None
            - inputs = [x, w, b, weight_scale, weight_zp]
            - const_args is: [stride, padding, dilation, groups, x_scale, x_zp, o_scale, o_zp,
              fp32_output, unary_attr, unary_scalars, unary_algorithm]
        else
            - inputs = [x, w, weight_scale, weight_zp]
            - const_args is: [bias, stride, padding, dilation, groups, x_scale, x_zp, o_scale, o_zp,
              fp32_output, unary_attr, unary_scalars, unary_algorithm]
        """
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, qx: TensorBox, x_scale: TensorBox, x_zero_point: TensorBox, qw: TensorBox, w_scale: TensorBox, w_zero_point: TensorBox, bias: TensorBox, stride: list[int], padding: list[int], dilation: list[int], groups: int, output_scale: float, output_zero_point: int, output_dtype, attr, scalars, algorithm): # -> QConvPointWisePT2E:
        ...
    


class QConvPointWiseBinaryPT2E(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        """
        Needs input/weight/output qparams
        if bias is not None
            - inputs = [x, x_scale, x_zp, w,  w_scale, w_zp, accum, b]
            - const_args = [stride, padding, dilation, groups, o_scale, o_zp,
            output_dtype, accum_scale, accum_zp, binary_attr, alpha, unary_attr, unary_scalars, unary_algorithm]
        else
            - inputs = [x, x_scale, x_zp, w,  w_scale, w_zp, accum]
            - const_args [b, stride, padding, dilation, groups, o_scale, o_zp,
             output_dtype, accum_scale, accum_zp, binary_attr, alpha, unary_attr, unary_scalars, unary_algorithm]
        """
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    def get_mutation_names(self) -> Sequence[str]:
        ...
    
    def get_unbacked_symbol_defs(self) -> OrderedSet[sympy.Symbol]:
        ...
    
    @classmethod
    def create(cls, qx: TensorBox, x_scale: TensorBox, x_zero_point: TensorBox, qw: TensorBox, w_scale, w_zero_point, qaccum: TensorBox, bias: TensorBox, stride: list[int], padding: list[int], dilation: list[int], groups: int, output_scale: TensorBox, output_zero_point: TensorBox, output_dtype, accum_scale, accum_zero_point, binary_attr, alpha, unary_attr, unary_scalars, unary_algorithm): # -> Any:
        ...
    


class MKLPackedLinear(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x, packed_w, orig_w, B, batch_size): # -> MKLPackedLinear:
        ...
    


class LinearUnary(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x, w, B, attr, scalars, algorithm): # -> MultiOutput:
        ...
    
    def apply_constraint(self): # -> None:
        ...
    


class LinearBinary(ExternKernelAlloc):
    kernel = ...
    def __init__(self, layout, inputs, constant_args=...) -> None:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x, y, w, B, attr): # -> MultiOutput:
        ...
    
    def apply_constraint(self): # -> None:
        ...
    


class QLinearPointwisePT2E(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=..., has_bias=...) -> None:
        """
        if bias is not None
            - inputs = [x, w, b, weight_scale, weight_zp]
            - const_args is: [x_scale, x_zp, o_scale, o_zp,
              fp32_output, unary_attr, unary_scalars, unary_algorithm]
        else
            - inputs = [x, w, weight_scale, weight_zp]
            - const_args is: [bias, x_scale, x_zp, o_scale, o_zp,
              fp32_output, unary_attr, unary_scalars, unary_algorithm]
        """
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, qx: TensorBox, x_scale: TensorBox, x_zero_point: TensorBox, qw: TensorBox, w_scale: TensorBox, w_zero_point: TensorBox, bias: TensorBox, output_scale: float, output_zero_point: int, output_dtype, post_op_name, post_op_args, post_op_algorithm): # -> QLinearPointwisePT2E:
        ...
    


class QLinearPointwiseBinaryPT2E(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=..., has_bias=...) -> None:
        """
        if bias is not None
            - inputs = [x, w, x_scale, x_zp, weight_scale, weight_zp, x2, bias]
            - const_args is: [o_scale, o_zp,
              fp32_output, binary_attr, alpha, unary_attr, unary_scalars, unary_algorithm]
        else
            - inputs = [x, w, x_scale, x_zp, weight_scale, weight_zp, x2]
            - const_args is: [bias, o_scale, o_zp,
              fp32_output, binary_attr, alpha, unary_attr, unary_scalars, unary_algorithm]
        """
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    def get_mutation_names(self) -> Sequence[str]:
        ...
    
    @classmethod
    def create(cls, qx: TensorBox, x_scale: TensorBox, x_zero_point: TensorBox, qw: TensorBox, w_scale: TensorBox, w_zero_point: TensorBox, other: TensorBox, bias: TensorBox, output_scale: float, output_zero_point: int, output_dtype, other_scale, other_zp, binary_post_op, binary_alpha, unary_post_op, unary_post_op_args, unary_post_op_algorithm): # -> Any | QLinearPointwiseBinaryPT2E:
        ...
    


class MkldnnRnnLayer(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        ...
    
    @classmethod
    def create(cls, x: TensorBox, w0: TensorBox, w1: TensorBox, w2: TensorBox, w3: TensorBox, hx: TensorBox, cx: TensorBox, reverse: bool, batch_sizes: list[int], mode: int, hidden_size: int, num_layers: int, has_biases: bool, bidirectional: bool, batch_first: bool, train: bool): # -> list[MultiOutput]:
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    


class WeightInt4PackMatmul(ExternKernelAlloc):
    def __init__(self, layout, inputs, constant_args=...) -> None:
        """
        inputs = [x, w, qGroupSize, qScalesAndZeros]
        constant_args = ()
        """
        ...
    
    def codegen(self, wrapper): # -> None:
        ...
    
    @classmethod
    def create(cls, x: TensorBox, w: TensorBox, qGroupSize: TensorBox, qScalesAndZeros: TensorBox): # -> WeightInt4PackMatmul:
        ...
    


