"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any, Callable, Optional, TYPE_CHECKING
from typing_extensions import final, override
from torch._inductor.output_code import CompiledFxGraphConstants, OutputCode
from .compile_fx import FxCompile, _CompileFxKwargs
from collections.abc import Sequence
from concurrent.futures import Future
from torch._inductor.utils import InputType
from torch.fx import GraphModule
from .compile_fx_ext import _OutOfProcessFxCompile, _WireProtocolPickledOutput

if TYPE_CHECKING:
    ...
@dataclass
class _PostCompileData:
    example_inputs: Sequence[InputType]
    constants: CompiledFxGraphConstants
    graph_kwargs: _CompileFxKwargs
    ...


@final
class _AsyncOutputCode(OutputCode):
    _eager_fn: Optional[Callable[..., Any]]
    _output_code: Optional[OutputCode]
    _future: Optional[Future[_WireProtocolPickledOutput]]
    _callback: Callable[[_WireProtocolPickledOutput], OutputCode]
    _post_compile_data: Optional[_PostCompileData] = ...
    _boxed_call: bool
    def __init__(self, eager_fn: Callable[..., Any], future: Future[_WireProtocolPickledOutput], callback: Callable[[_WireProtocolPickledOutput], OutputCode]) -> None:
        ...
    
    @override
    def __call__(self, *args: Any) -> Any:
        ...
    
    @override
    def post_compile(self, example_inputs: Sequence[InputType], constants: CompiledFxGraphConstants, graph_kwargs: _CompileFxKwargs) -> None:
        ...
    


@final
class _AsyncFxCompile(FxCompile):
    _compile: _OutOfProcessFxCompile
    _stat_bg_started: int = ...
    _stat_bg_finished: int = ...
    _stat_eager_runs: int = ...
    _stat_compiled_runs: int = ...
    def __init__(self, compile: _OutOfProcessFxCompile) -> None:
        ...
    
    @override
    def codegen_and_compile(self, gm: GraphModule, example_inputs: Sequence[InputType], inputs_to_check: Sequence[int], graph_kwargs: _CompileFxKwargs) -> OutputCode:
        ...
    


