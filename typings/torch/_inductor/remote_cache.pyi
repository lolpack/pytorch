"""
This type stub file was generated by pyright.
"""

import atexit
import dataclasses
import redis
from abc import abstractmethod
from typing import Any, Callable, Generic, Optional, TypeVar, Union
from typing_extensions import TypeAlias
from torch._inductor import config
from rfe.scubadata.scubadata_py3 import Sample as Sample_

log = ...
if config.is_fbcode():
    Sample: TypeAlias = Sample_
else:
    Sample: TypeAlias = type[object]
_T = TypeVar("_T")
_U = TypeVar("_U")
remote_fx_cache_get_timed = ...
remote_fx_cache_put_timed = ...
class RemoteCacheBackend(Generic[_T]):
    """
    A backend implementation for accessing a remote/distributed cache.  Only
    works with bytes in/out.  For structured data use a RemoteCache.
    """
    def __init__(self) -> None:
        ...
    
    def get(self, key: str) -> Optional[_T]:
        ...
    
    def put(self, key: str, data: _T) -> None:
        ...
    


class RemoteCacheSerde(Generic[_T, _U]):
    @abstractmethod
    def encode(self, data: _T) -> _U:
        ...
    
    @abstractmethod
    def decode(self, data: _U) -> _T:
        ...
    


JsonDataTy = Optional[Union[int, float, str, bool, dict[str, "JsonDataTy"], list["JsonDataTy"]]]
class RemoteCacheJsonSerde(RemoteCacheSerde[JsonDataTy, bytes]):
    def encode(self, data: JsonDataTy) -> bytes:
        ...
    
    def decode(self, data: bytes) -> JsonDataTy:
        ...
    


class RemoteCachePassthroughSerde(RemoteCacheSerde[_T, _T]):
    def encode(self, data: _T) -> _T:
        ...
    
    def decode(self, data: _T) -> _T:
        ...
    


class RemoteCache(Generic[_T]):
    backend_override_cls: Optional[Callable[[], RemoteCacheBackend[Any]]] = ...
    def __init__(self, backend: RemoteCacheBackend[_U], serde: RemoteCacheSerde[_T, _U]) -> None:
        ...
    
    def get(self, key: str) -> Optional[_T]:
        ...
    
    def put(self, key: str, value: _T) -> None:
        ...
    


class RedisRemoteCacheBackend(RemoteCacheBackend[bytes]):
    """
    A Redis implementation of a remote/distributed cache.
    """
    _redis: Optional[redis.Redis] = ...
    def __init__(self, cache_id: str) -> None:
        ...
    


class RedisRemoteCache(RemoteCache[JsonDataTy]):
    def __init__(self, cache_id: str) -> None:
        ...
    


class RemoteAutotuneCache(RedisRemoteCache):
    ...


class RemoteBundledAutotuneCache(RedisRemoteCache):
    ...


class RemoteFxGraphCache(RedisRemoteCache):
    ...


class RemoteAOTAutogradCache(RedisRemoteCache):
    ...


class RemoteDynamoPGOCache(RedisRemoteCache):
    ...


def create_cache(key: str, is_fbcode: bool, fb_cache_cls: str, oss_cache_cls: str) -> Optional[RemoteCache[JsonDataTy]]:
    ...

@dataclasses.dataclass
class _CacheStat:
    miss: int = ...
    hit: int = ...
    put: int = ...
    exception: int = ...
    def __str__(self) -> str:
        ...
    


class _CacheStats:
    _stats: dict[str, _CacheStat]
    def __init__(self) -> None:
        ...
    
    def miss(self, name: str, count: int = ...) -> None:
        ...
    
    def hit(self, name: str, count: int = ...) -> None:
        ...
    
    def get(self, name: str, value: Optional[object]) -> None:
        ...
    
    def put(self, name: str, count: int = ...) -> None:
        ...
    
    def exception(self, name: str, count: int = ...) -> None:
        ...
    


cache_stats = ...
@atexit.register
def dump_cache_stats() -> None:
    ...

