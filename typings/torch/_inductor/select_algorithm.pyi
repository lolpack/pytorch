"""
This type stub file was generated by pyright.
"""

import contextlib
import dataclasses
import functools
import sympy
import torch
from collections.abc import Sequence
from types import ModuleType
from typing import Any, Callable, NamedTuple, Optional, TYPE_CHECKING, Union
from typing_extensions import Self
from torch.utils._ordered_set import OrderedSet
from . import ir
from .codecache import PersistentCache
from .codegen.common import CSEVariable, IndentedBuffer, KernelTemplate, WorkspaceArg
from .codegen.triton import TritonKernel
from .ir import ChoiceCaller, PrimitiveInfoType
from .ops_handler import StoreMode
from .virtualized import V
from torch._inductor.codegen.simd import IterationRangesRoot

log = ...
VERIFY: dict[str, Any] = ...
PRINT_AUTOTUNE = ...
DEBUG = ...
if TYPE_CHECKING:
    ...
class KernelNamespace:
    ...


extern_kernels = ...
@dataclasses.dataclass
class BenchmarkTensors:
    """Represents a set of inputs and outputs for autotuning with a template"""
    input_tensors: list[torch.Tensor]
    output_tensor: Optional[torch.Tensor]
    def unpack(self): # -> tuple[list[Tensor], Tensor | None]:
        ...
    


@dataclasses.dataclass
class AutotuneArgs:
    """During autotuning, we need to pass the same inputs to all choices.
    Note:
        Since we typically have a mix of external choices and triton choices, we create
        two lists of inputs for the same underlying buffers:
        - External inputs (for aten kernels): Include offset for sliced tensors
        - Triton inputs: Use base pointer for sliced tensors, without offset
    """
    triton: BenchmarkTensors
    extern: BenchmarkTensors
    expected: Optional[torch.Tensor] = ...
    def get_benchmark_tensors(self, extern=...) -> BenchmarkTensors:
        """Returns the inputs and output tensors for a given choice."""
        ...
    
    @classmethod
    def from_choice_args(cls, example_inputs: list[torch.Tensor], example_inputs_extern: list[torch.Tensor], out: torch.Tensor, out_extern: torch.Tensor, expected: Optional[torch.Tensor] = ...) -> Self:
        """Factory method to create AutotuneInputs from separate inputs/outputs"""
        ...
    
    def verify(self, **kwargs): # -> None:
        """Verify the correctness of the benchmarking results"""
        ...
    


class PartialRender:
    """
    Some parts of a template need to be generated at the end, but
    inserted into the template at the start.  This allows doing a bunch
    of replacements after the initial render.
    """
    def __init__(self, code, replacement_hooks) -> None:
        ...
    
    def finalize_hook(self, hook_key: str, strict=...) -> None:
        ...
    
    def finalize_all(self) -> str:
        ...
    


@dataclasses.dataclass()
class SubgraphInfo:
    body: IndentedBuffer
    template_mask: Optional[str] = ...
    template_out: Optional[str] = ...
    compute: IndentedBuffer = ...
    indexing_code: IndentedBuffer = ...
    loads: IndentedBuffer = ...
    stores: IndentedBuffer = ...
    ops_handler: Optional[V.WrapperHandler] = ...
    range_trees: Optional[list[IterationRangesRoot]] = ...
    numels = ...
    def __post_init__(self): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    


class ModificationWrapper(V.WrapperHandler):
    """Handles placeholder substitutions during subgraph processing."""
    def __init__(self, kernel, subgraph_number: int, fixed_inputs: dict[str, Any], mask: Optional[str]) -> None:
        ...
    
    def load(self, name: str, index: sympy.Expr):
        """Handle loading from tensor or fixed input."""
        ...
    
    def indirect_indexing(self, index_var: str, size, check, wrap_neg=...): # -> Symbol:
        """Convert index variable to symbolic form."""
        ...
    
    def store(self, name: str, index: sympy.Expr, value: CSEVariable, mode: StoreMode = ...) -> str:
        """Currently only supports stores for atomic adds coming from scatter nodes
        This is used by flex_attention's backwards grad for captured buffers, see
        zeros_and_scatter lowering
        """
        ...
    


RecordedEventsType = list[tuple[str, list[Any], dict[str, Any]]]
class TritonTemplateKernel(TritonKernel):
    def __init__(self, kernel_name, input_nodes, output_node, defines, num_stages, num_warps, grid_fn, meta, call_sizes, num_consumer_groups=..., num_buffers_warp_spec=..., use_jit=..., prefix_args=..., suffix_args=..., epilogue_fn=..., subgraphs: Optional[list[ir.ComputedBuffer]] = ..., workspace_arg: Optional[WorkspaceArg] = ..., prologue_loads_all_inputs=...) -> None:
        ...
    
    def input_dependent_preserved_state(self) -> str:
        ...
    
    def record_input_dependent_tracked_event(self) -> Callable[..., Any]:
        ...
    
    def replay_cached_events(self, events: RecordedEventsType) -> None:
        ...
    
    @contextlib.contextmanager
    def set_subgraph_body(self, body_name: str): # -> Generator[None, Any, None]:
        ...
    
    @contextlib.contextmanager
    def create_subgraph_body(self, body_name: str): # -> Generator[None, Any, None]:
        ...
    
    def need_numel_args(self): # -> Literal[False]:
        ...
    
    def estimate_kernel_num_bytes(self): # -> int:
        """
        Estimate the total number of bytes this kernel takes.
        For in/out nodes, sizes are counted twice: once for reading and
        once for writing.
        """
        ...
    
    def estimate_flops(self) -> int:
        ...
    
    def jit_lines(self): # -> str:
        ...
    
    def gen_argdefs(self): # -> Literal['<ARGDEFS>']:
        ...
    
    def gen_defines(self):
        ...
    
    def def_kernel(self, *argnames): # -> Literal['<DEF_KERNEL>']:
        """
        Hook called from template code to generate function def and
        needed args.
        """
        ...
    
    def size(self, name: str, index: int): # -> str:
        """
        Hook called from template code to get the size of an arg.
        Will add needed args to pass it in if it is dynamic.
        """
        ...
    
    def stride(self, name, index=...): # -> str:
        """
        Hook called from template code to get the stride of an arg.
        Will add needed args to pass it in if it is dynamic.
        """
        ...
    
    def modification(self, subgraph_number: int, output_name: Optional[str], mask: Optional[str] = ..., **fixed_inputs) -> str:
        """This creates a modification function for a subgraph.
        To use this inside a template, the first argument should specify which subgraph to codegen for

        Args:
            subgraph_number (int): The index of the subgraph in self.subgraphs
            output_name (Optional[str]): The name of the output variable to store the result in
            mask (Optional[str]): An optional mask to use for the store operation. If provided, this mask
                will be applied to the store.
        """
        ...
    
    def load_input(self, input_name: str, output_name: str, indices: Union[list[Any], tuple[Any]], mask: Optional[str] = ..., other: Optional[Union[float, int]] = ..., indent_width: int = ...): # -> str:
        """Loads an input and applies any necessary preprocessing or masking.

        Args:
            input_name (str): The name of the input to load.
            indices (Union[List, Tuple]): The index for each dimension of the input.
            val (str): The name of the variable to store the loaded value.
            mask (Optional[str]): An optional mask to use for the load operation.
            other (Optional[Union[float, int]]): The value to use for masked elements. Default is 0.0.
            indent_width (int): The number of spaces to use for indentation.
        """
        ...
    
    def store_output(self, indices: Union[list[Any], tuple[Any]], val: str, mask: Optional[str] = ..., indent_width: int = ...): # -> Literal['<STORE_OUTPUT>']:
        """Stores the final output and appends any epilogue fusions if the buffer hasn't been optimized away.

        Args:
            indices (Union[List, Tuple]): The index for each dimension of the output. The dot product of
                these indices and output strides must match `val`.
            val (str): The value to store.
            mask (Optional[str]): An optional mask to use for the store operation. If provided, this mask
                will be applied to the store.
            indent_width (int): The number of spaces to use for indentation. This is used when the call to
                store_output is indented in the kernel definition.
        """
        ...
    
    def render(self, template, kwargs, record_input_dependent_tracked_event=...): # -> PartialRender:
        ...
    
    def make_load(self, name, indices, mask): # -> str:
        """
        Optional helper called from template code to generate the code
        needed to load from an tensor.
        """
        ...
    
    def indexing(self, index: sympy.Expr, *, dense_indexing=..., copy_shape=..., override_mask=..., block_ptr=...): # -> BlockPtrOptions | IndexingOptions:
        """
        Override the default indexing to use our custom mask and force
        dense indexing.
        """
        ...
    
    def codegen_range_tree(self): # -> None:
        ...
    
    def call_kernel(self, name: str, node: Optional[ir.IRNode] = ...): # -> None:
        ...
    
    def kernel_benchmark_extra_args(self) -> list[str]:
        ...
    


class GenerateAndLoadResult(NamedTuple):
    """
    Return type of TritonTemplate.generate_and_load.
    """
    mod: ModuleType
    extra: str
    input_call_args: tuple[str, ...]
    prologue_supported_inputs: OrderedSet[str]
    kernel_args_sizevars_keys: tuple[sympy.Expr]
    kernel_options: dict[str, Any]
    ...


class GeneratedCodeCacheEntry(NamedTuple):
    code: str
    extra: str
    events: list[Any]
    ...


class GeneratedCodeCache:
    """
    Cache for generated code. The cache key is a string representation of the input nodes,
    number of stages, number of warps, and call sizes. The cache value is a tuple of the
    generated code, extra code, and events.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def cache_clear(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def make_key(self, input_nodes: tuple[ir.IRNode], num_stages: int, num_warps: int, call_sizes: list[sympy.core.symbol.Symbol], prefix_args: int, suffix_args: int, epilogue_fn: Optional[Callable[..., Any]], epilogue_fn_hash: Optional[str], subgraphs: Optional[list[ir.Buffer]], workspace_arg: Optional[WorkspaceArg], layout: ir.Layout, num_consumer_groups: int, num_buffers_warp_spec: int, kwargs: dict[str, Any]) -> Optional[str]:
        ...
    
    def get_entry(self, cache_key: Optional[str]) -> Optional[GeneratedCodeCacheEntry]:
        ...
    
    def put_entry(self, cache_key: Optional[str], code: str, extra: str, events: list[Any]) -> None:
        ...
    


class TritonTemplate(KernelTemplate):
    """
    A Triton template is a template that can be used to generate a Triton kernel.
    """
    kernel_type: type[Any] = ...
    index_counter = ...
    all_templates: dict[str, TritonTemplate] = ...
    def __init__(self, name: str, grid: Any, source: str, debug=..., cache_codegen_enabled_for_template=..., prologue_loads_all_inputs=...) -> None:
        ...
    
    test_cache = ...
    def maybe_append_choice(self, choices: list[Any], **kwargs: Any) -> Optional[NotImplementedError]:
        """
        Maybe generates a new ChoiceCaller and appends it into existing choices.
        Returns None if success, otherwise returns the error.

        choices: A list of ChoiceCallers.
        kwargs: Additional kwargs to be passed to self.generate() to generate a new ChoiceCaller.
        """
        ...
    
    def generate_and_load(self, input_nodes: tuple[ir.IRNode], num_stages: int, num_warps: int, call_sizes: list[sympy.core.symbol.Symbol], prefix_args: int, suffix_args: int, epilogue_fn: Optional[Callable[..., Any]], epilogue_fn_hash: Optional[str], subgraphs: Optional[list[ir.Buffer]], workspace_arg: Optional[WorkspaceArg], num_consumer_groups: int, num_buffers_warp_spec: int, layout: ir.Layout, kwargs: dict[str, Any], generate_with_caching) -> Optional[GenerateAndLoadResult]:
        """Generate the python code and load it into the current process"""
        ...
    
    def generate(self, input_nodes: tuple[ir.IRNode], layout: ir.Layout, num_stages: int, num_warps: int, num_consumer_groups: int = ..., num_buffers_warp_spec: int = ..., prefix_args: int = ..., suffix_args: int = ..., epilogue_fn: Optional[Callable[..., Any]] = ..., epilogue_fn_hash: Optional[str] = ..., subgraphs: Optional[list[ir.Buffer]] = ..., mutated_inputs: Optional[list[ir.IRNode]] = ..., call_sizes: Optional[list[sympy.core.symbol.Symbol]] = ..., workspace_arg: Optional[WorkspaceArg] = ..., generate_with_caching=..., **kwargs): # -> TritonTemplateCaller | None:
        """This function generates a TritonTemplateCaller

        Args:
            input_nodes: List of input nodes
            layout: Output layout
            num_stages: Number of stages for triton launch
            num_warps: Number of warps for triton launch
            prefix_args: Number of input nodes to be passed as arguments
            suffix_args: Number of input nodes to be passed as arguments
            epilogue_fn: Optional epilogue function to be called on the output
            subgraphs: Optional subgraphs to be passed as arguments, these will be inlined
                into the triton template string
            mutated_inputs: Optional list of input nodes that are mutated by the kernel, this is helpful
                if you need to return multiple outputs. You can pass them as inputs and mark them as
                being mutated by the kernel.
        """
        ...
    


class ExternKernelChoice:
    def __init__(self, kernel, cpp_kernel=..., *, name=..., has_out_variant=..., op_overload=..., use_fallback_kernel=..., kernel_creator=...) -> None:
        ...
    
    def to_callable(self): # -> Any:
        ...
    
    def call_name(self): # -> str:
        ...
    
    @functools.cache
    def hash_key(self): # -> str:
        ...
    
    def bind(self, input_nodes, layout, ordered_kwargs_for_cpp_kernel=..., **kwargs): # -> ExternKernelCaller:
        ...
    


class TritonTemplateCaller(ir.TritonTemplateCallerBase):
    def __init__(self, name, input_nodes, layout, make_kernel_render, description, bmreq, log_info: Optional[dict[str, Union[PrimitiveInfoType, list[PrimitiveInfoType]]]] = ..., mutated_inputs=..., workspace_arg: Optional[WorkspaceArg] = ..., allowed_prologue_inps: Optional[OrderedSet[str]] = ...) -> None:
        ...
    
    def benchmark(self, *args, out): # -> float:
        ...
    
    def precompile(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def call_name(self): # -> str:
        ...
    
    def hash_key(self): # -> str:
        ...
    
    def output_node(self): # -> ShapeAsConstantBuffer | TensorBox:
        ...
    
    def info_dict(self) -> dict[str, Union[PrimitiveInfoType, list[PrimitiveInfoType]]]:
        """Information returned here is logged to the autotune log file when that is enabled."""
        ...
    
    def get_make_kernel_render(self):
        ...
    
    def autoheuristic_id(self): # -> str:
        ...
    


class ExternKernelCaller(ChoiceCaller):
    def __init__(self, choice: ExternKernelChoice, input_nodes, layout, kwargs=..., *, has_out_variant=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def benchmark(self, *args, out): # -> float:
        ...
    
    def to_callable(self): # -> partial[Any] | Any:
        ...
    
    def hash_key(self): # -> str:
        ...
    
    def output_node(self): # -> ShapeAsConstantBuffer | TensorBox:
        ...
    
    def info_dict(self) -> dict[str, Union[PrimitiveInfoType, list[PrimitiveInfoType]]]:
        """Information returned here is logged to the autotune log file when that is enabled."""
        ...
    
    def autoheuristic_id(self): # -> str:
        ...
    


@functools.cache
def get_mm_log_filename() -> Optional[str]:
    ...

def append_to_log(filename, data): # -> None:
    ...

class DataProcessorChoiceCallerWrapper:
    def __init__(self, wrapped, preprocessor, postprocessor) -> None:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def benchmark(self, *args, out) -> float:
        ...
    
    def output_node(self) -> ir.TensorBox:
        ...
    
    def __repr__(self) -> str:
        ...
    


class DataProcessorTemplateWrapper:
    """
    A wrapper class for a kernel template.

    This class together with `DataProcessorChoiceCallerWrapper` provides a convenient way to
    preprocess and postprocess data before and after using the wrapped template. A typical
    usage is to reorder or filter the input nodes in order to match the expected input of other
    kernel choices like a ATen kernel. A more complicated usage is to prepack the weights.
    See the example from :mod:`cpp_gemm_template` for more details.
    """
    def __init__(self, wrapped_template_cls, preprocessor, postprocessor, **kwargs) -> None:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def maybe_append_choice(self, choices, **kwargs):
        ...
    
    def generate(self, **kwargs): # -> DataProcessorChoiceCallerWrapper:
        ...
    
    def __repr__(self) -> str:
        ...
    


class ErrorFromChoice(RuntimeError):
    def __init__(self, msg, choice: ChoiceCaller, inputs_str) -> None:
        ...
    


class NoValidChoicesError(RuntimeError):
    ...


@functools.cache
def get_num_workers() -> int:
    ...

def create_inputs_key(input_nodes) -> str:
    ...

def create_precompile_key(name: str, inputs_key: str, choices: list[ChoiceCaller]) -> str:
    ...

FeedbackFunction = Callable[[dict[ChoiceCaller, float], str, list[Any], list[ChoiceCaller], Callable[[], dict[ChoiceCaller, float]]], None,]
PreprocessingFunction = Callable[[list[ChoiceCaller]], list[ChoiceCaller]]
def filter_choices_by_name_regex(choices: list[ChoiceCaller]) -> list[ChoiceCaller]:
    """Filter choices based on autotune_choice_name_regex config."""
    ...

def filter_choices_by_desc_regex(choices: list[ChoiceCaller]) -> list[ChoiceCaller]:
    """Filter choices based on autotune_choice_desc_regex config."""
    ...

class AlgorithmSelectorCache(PersistentCache):
    """
    A persistent cache for algorithm selection results used in autotuning of GEMMs
    and convolutions.

    This classes includes precompilation and benchmarking of the kernels.

    The cache is keyed by input characteristics (sizes, strides, dtypes, etc.) but
    doesn't depend on the output layout.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def cache_clear(self) -> None:
        ...
    
    def __call__(self, name, choices: list[ChoiceCaller], input_nodes, layout, input_gen_fns: Optional[dict[int, Callable[[ir.Buffer], torch.Tensor]]] = ..., precompilation_timeout_seconds: int = ..., return_multi_template=...): # -> TensorBox | ShapeAsConstantBuffer:
        ...
    
    def make_precompile_fn(self, choices, name: str, inputs_key: str, precompilation_timeout_seconds: Optional[int] = ...) -> Callable[[], None]:
        """
        Returns a function that precompiles the given choices.
        """
        ...
    
    @classmethod
    def get_inputs(cls, choices: Sequence[ChoiceCaller], input_nodes: list[ir.IRNode], layout: ir.Layout, input_gen_fns: Optional[dict[int, Callable[[ir.Buffer], torch.Tensor]]]) -> AutotuneArgs:
        """
        Factory method to create AutotuneArgs from a list of ChoiceCallers.
        """
        ...
    
    @classmethod
    def benchmark_choice(cls, choice: ChoiceCaller, autotune_args: AutotuneArgs) -> float:
        ...
    
    @classmethod
    def benchmark_choices(cls, choices: Sequence[ChoiceCaller], autotune_args: AutotuneArgs) -> dict[ChoiceCaller, float]:
        ...
    
    @classmethod
    def benchmark_in_current_process(cls, choices: Sequence[ChoiceCaller], input_nodes: list[ir.IRNode], layout: ir.Layout, input_gen_fns: Optional[dict[int, Callable[[ir.Buffer], torch.Tensor]]]) -> dict[ChoiceCaller, float]:
        ...
    
    @classmethod
    def benchmark_in_sub_process(cls, choices: Sequence[ChoiceCaller], input_nodes: list[ir.IRNode], layout: ir.Layout, input_gen_fns: Optional[dict[int, Callable[[ir.Buffer], torch.Tensor]]]): # -> dict[ChoiceCaller, float]:
        ...
    
    @classmethod
    def make_benchmark_fn(cls, choices: Sequence[ChoiceCaller], input_nodes: list[ir.IRNode], layout: ir.Layout, input_gen_fns: Optional[dict[int, Callable[[ir.Buffer], torch.Tensor]]]): # -> partial[dict[ChoiceCaller, float]]:
        ...
    
    @staticmethod
    def prescreen_choices(choices: list[ChoiceCaller], name: str, inputs_key: str, prescreen_cache: dict[str, OrderedSet[str]]) -> list[ChoiceCaller]:
        """
        Figure out what choices need to be prescreened before autotuning with runtime
        params.

        Prescreening is a process of reducing the number of autotuning for choices with
        runtime params via a two stage autotuning process. First, we fix a set of runtime
        params (here we use swizzle=2) and run autotuning to get a set of candidates.
        Then, we run autotuning again with the candidates and the full set of runtime
        params.

        Since have the concept of runtime params, we need to differentiate between
        choice's hash_key and choice's kernel_hash_key. The former includes information
        like runtime params, while the latter does not. prescreen_cache, if exists, stores
        the set of hash_key that should win the prescreening.

        Right now, only CUTLASS choices have runtime params.
        """
        ...
    
    @staticmethod
    def prune_choices_postscreen(choices: list[ChoiceCaller], candidate_timings: dict[ChoiceCaller, float], name: str, inputs_key: str, prescreen_cache: dict[str, OrderedSet[str]]) -> list[ChoiceCaller]:
        """
        Prune the choices after prescreening.
        """
        ...
    
    @staticmethod
    def log_results(name: str, input_nodes: list[ir.IRNode], timings: dict[ChoiceCaller, float], elapse: float, precompile_elapse: float, prescreening_elapse: Optional[float] = ...): # -> None:
        ...
    
    @staticmethod
    def benchmark_example_value(node): # -> Tensor:
        """
        Convert an ir.Buffer into a concrete torch.Tensor we can use for
        benchmarking.
        """
        ...
    
    @staticmethod
    def generate_example_value(size, stride, device, dtype, extra_size, allocation_size=...): # -> Tensor:
        ...
    
    @staticmethod
    def key_of(node): # -> tuple[Any, str, *tuple[int, ...]]:
        """
        Extract the pieces of an ir.Buffer that we should invalidate cached
        autotuning results on.
        """
        ...
    
    def add_feedback_saver(self, fn: FeedbackFunction): # -> None:
        ...
    
    def add_preprocessing_fn(self, fn: PreprocessingFunction): # -> None:
        ...
    
    def clear_preprocessing_fns(self, clear_defaults: bool = ...): # -> None:
        """Clear preprocessing functions.

        Args:
            clear_defaults: If True, clears all functions including defaults.
                           If False, clears only user-added functions and re-registers defaults.
        """
        ...
    


_ALGORITHM_SELECTOR_CACHE: Optional[AlgorithmSelectorCache] = ...
def get_algorithm_selector_cache() -> AlgorithmSelectorCache:
    """Get the global algorithm selector cache, creating it if it doesn't exist."""
    ...

def autotune_select_algorithm(*args, **kwargs): # -> TensorBox | ShapeAsConstantBuffer:
    ...

def add_feedback_saver(fn: FeedbackFunction): # -> None:
    ...

def add_preprocessing_fn(fn: PreprocessingFunction): # -> None:
    """Add a preprocessing function to be applied to choices before autotuning.

    Preprocessing functions are called sequentially in the order they were registered,
    with each function receiving the output of the previous one. They can filter,
    reorder, transform, or modify the list of choices in any way.

    Args:
        fn: A function that takes a list of ChoiceCaller objects and returns
            a modified list of ChoiceCaller objects.

    Example:
        def my_filter(choices):
            # Filter out choices with certain names
            return [c for c in choices if 'slow' not in c.name.lower()]

        add_preprocessing_fn(my_filter)
    """
    ...

def clear_preprocessing_fns(clear_defaults: bool = ...): # -> None:
    """Clear preprocessing functions at module level.

    Args:
        clear_defaults: If True, clears all functions including defaults.
                       If False, clears only user-added functions and re-registers defaults.
    """
    ...

def realize_inputs(*args): # -> Any | list[Any | list[Any]]:
    ...

class SymbolicGridFn:
    """
    Wrapper around a grid function that allows either int or sympy inputs.

        @SymbolicGridFn
        def grid(x, meta, *, cdiv):
            return cdiv(x, meta["BLOCK_X"])
    """
    def __init__(self, fn: Callable[..., tuple[Any, Any, Any]]) -> None:
        ...
    
    def __call__(self, *args, **kwargs) -> tuple[int, int, int]:
        ...
    
    def sympy_call(self, *args, **kwargs): # -> tuple[Any, Any, Any]:
        ...
    


