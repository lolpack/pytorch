"""
This type stub file was generated by pyright.
"""

import sympy
import torch
from collections.abc import Generator, Sequence
from contextlib import contextmanager
from typing import Any, Optional
from torch._inductor.ir import ComputedBuffer
from torch._inductor.ops_handler import DefaultHandler, WrapperHandler
from torch._inductor.scheduler import BaseSchedulerNode
from torch._inductor.utils import OrderedSet

_ACCUMULATOR_ARG_NAME = ...
def scaled_mm_evt(scale_A_name: str, scale_B_name: str, bias_name: Optional[str], output_name: str) -> tuple[list[str], dict[str, Any], str]:
    ...

class CutlassEVTOpsMixIn:
    @staticmethod
    def to_dtype(x: str, dtype: Any, src_dtype: Optional[torch.dtype] = ..., use_compute_types: bool = ...) -> str:
        ...
    
    @staticmethod
    def constant(value: Any, dtype: Any) -> str:
        ...
    
    @staticmethod
    def mul(x0: str, x1: str) -> str:
        ...
    
    @staticmethod
    def truediv(x0: str, x1: str) -> str:
        ...
    
    @staticmethod
    def ge(x0: str, x1: str) -> str:
        ...
    
    @staticmethod
    def add(x0: str, x1: str) -> str:
        ...
    
    @staticmethod
    def relu(x0: str) -> str:
        ...
    
    @staticmethod
    def sigmoid(x0: str) -> str:
        ...
    
    @staticmethod
    def sub(x0: str, x1: str) -> str:
        ...
    
    @staticmethod
    def tanh(x0: str) -> str:
        ...
    


class MockCutlassHandler(CutlassEVTOpsMixIn, WrapperHandler):
    """Passthrough handler for cutlass ops, used for running epilogue nodes for memory planning"""
    ...


class _AssignmentFormatter(DefaultHandler):
    def __init__(self, parent_handler: CutlassEVTCodegen) -> None:
        ...
    


class CutlassEVTCodegen(CutlassEVTOpsMixIn):
    """
    Notes:
        * Used by CUTLASSGemmTemplate.
        * This class should not be instantiated by users, it is intended to be used
            by calling CutlassEVTCodegen.ir_to_evt_python_code(...)
            which instantiates this class as an ops handler for virtualized.V.ops.[op-name]
        * Extend this with more _op_<whatever> nodes to add support for new pointwise operations.
    """
    def __init__(self, accumulator_node_name: str, removed_buffers: OrderedSet[str]) -> None:
        """

        Initializes a CutlassEVTEpilogueArgumentFormatter object. Do not instantiate directly.
        Use the CutlassEVTCodegen.ir_to_evt_python_code static method.

        Args:
            accumulator_node_name: The name of the accumulator node which should contain
                                          the Matmul result before fusion according to the IR graph.
            epilogue_nodes: The list of scheduler nodes to be fused into the epilogue
        """
        ...
    
    @staticmethod
    def ir_to_evt_python_code(cuda_template_node_name: str, epilogue_nodes: list[BaseSchedulerNode], removed_buffers: OrderedSet[str]) -> tuple[list[str], list[str], dict[str, Any], str]:
        ...
    
    def get_value(self) -> str:
        ...
    
    def finalize(self) -> None:
        ...
    
    @contextmanager
    def set_cur_node(self, node: ComputedBuffer) -> Generator[None, Any, Any]:
        ...
    
    def get_renames(self) -> dict[str, str]:
        ...
    
    def get_reads(self) -> list[str]:
        ...
    
    def get_writes(self) -> list[str]:
        ...
    
    def load(self, name: str, index: Any) -> str:
        ...
    
    def store(self, name: Any, index: Any = ..., value: Any = ..., mode: Any = ...) -> None:
        ...
    
    @staticmethod
    def get_index_vars(node: ComputedBuffer) -> Sequence[sympy.Expr]:
        ...
    


