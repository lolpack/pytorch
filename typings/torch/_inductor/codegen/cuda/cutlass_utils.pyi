"""
This type stub file was generated by pyright.
"""

import atexit
import functools
import torch
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Optional
from ...ir import Layout

log = ...
CUTLASS_OPERATION_KIND: str = ...
@atexit.register
def move_cutlass_compiled_cache() -> None:
    """Move CUTLASS compiled cache file to the cache directory if it exists."""
    ...

@functools.cache
def try_import_cutlass() -> bool:
    """
    We want to support three ways of passing in CUTLASS:
    1. fbcode, handled by the internal build system.
    2. User specifies cutlass_dir. The default is ../third_party/cutlass/,
       which is the directory when developers build from source.
    """
    ...

@dataclass
class CUTLASSArgs:
    """
    CUTLASS args used to initialize a CUTLASS Manifest.
    """
    architectures: Optional[str] = ...
    cuda_version: Optional[str] = ...
    instantiation_level: Optional[str] = ...
    operations: Optional[str] = ...
    build_dir = ...
    curr_build_dir = ...
    generator_target = ...
    kernels = ...
    ignore_kernels = ...
    exclude_kernels = ...
    kernel_filter_file: None = ...
    selected_kernel_list: None = ...
    interface_dir: None = ...
    filter_by_cc = ...
    disable_full_archs_compilation = ...
    def __post_init__(self): # -> None:
        ...
    


def gen_ops() -> dict[Any, Any]:
    """
    Generates all supported CUTLASS operations.
    """
    ...

DTYPE_TO_CUTLASS_TYPE = ...
@functools.lru_cache(32)
def torch_dtype_to_cutlass_type(torch_dtype: torch.dtype) -> cutlass_library.library.DataType:
    ...

@functools.lru_cache(32)
def dtype_match(torch_dtype: Optional[torch.dtype], cutlass_dtype: cutlass_library.library.DataType) -> bool:
    ...

def get_accumulator_dtype(input_torch_dtypes: list[torch.dtype]) -> Optional[torch.dtype]:
    """
    Given a pair of input torch dtypes, returns the inferred accumulator torch dtype.
    """
    ...

@functools.lru_cache(32)
def get_alignments(torch_dtype: torch.dtype) -> list[int]:
    """
    Returns all possible valid CUTLASS alignments in terms of the number of elements for a given dtype.
    CUTLASS gemm / conv SM80 APIs support 16 bytes max alignment, and 2 bytes min alignment.
    """
    ...

def get_max_alignment(inductor_layout: Layout) -> int:
    """
    Returns the max alignment (in terms of number of elements) for a given Inductor Layout.
    """
    ...

class CUDACompileSourceCapturingContext:
    def __init__(self) -> None:
        ...
    
    def __enter__(self, *args, **kwargs): # -> Self:
        ...
    
    def __exit__(self, *args, **kwargs): # -> None:
        ...
    


def cuda_standalone_runner_compile_command(srcpath: Path, exepath: Path): # -> str:
    ...

