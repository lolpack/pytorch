"""
This type stub file was generated by pyright.
"""

from typing import Optional
from torch._inductor.codegen.rocm.ck_template import CKTemplate
from torch._inductor.codegen.rocm.rocm_kernel import ROCmTemplateKernel
from torch._inductor.ir import Buffer, Layout
from ...utils import IndentedBuffer

log = ...
InductorROCmOp = ...
padding_lookup = ...
def is_static_int(number): # -> bool:
    ...

def torch_layout_to_ck_layout(torch_layout): # -> Literal['Row', 'Col'] | None:
    ...

class CKGemmTemplate(CKTemplate):
    gemm_template = ...
    standalone_runner_template = ...
    def __init__(self, input_nodes: list[Buffer], layout: Layout, alpha: float, beta: float, input_reorder: Optional[list[int]] = ...) -> None:
        ...
    
    def header(self) -> IndentedBuffer:
        ...
    
    def globals(self) -> IndentedBuffer:
        ...
    
    def inline_utils(self): # -> IndentedBuffer:
        ...
    
    def filter_op(self, op_info: InductorROCmOp): # -> None:
        """
        Determines whether a given op definition is suitable for the current
        input / output of the operation that this template implements.

        Filter is based on inputs' dtype, layout and statically inferred size.

        Returns None if the op is not suitable, otherwise returns the op to be used.
        """
        ...
    
    def emit_ck_instance(self, op: CKGemmOperation): # -> tuple[Any, Any]:
        ...
    
    def render(self, kernel: ROCmTemplateKernel, op: CKGemmOperation, **kwargs) -> str:
        """
        The primary entry point for the code rendering process used in this template.
        """
        ...
    
    def gen_ops(self) -> list[InductorROCmOp]:
        """
        Creates a list of `CKGemmOperation` instances that match the GEMM operation this template represents.
        The instances are guaranteed to have the correct layout, dtype and dimension padding for the GEMM input arguments.

        An instance may invalidate the GEMM configuration at runtime.
        Such instances will be assigned +inf runtime by the autotune process.
        """
        ...
    
    @staticmethod
    def add_ck_gemm_choices(choices, layout, input_nodes, alpha=..., beta=..., input_reorder=...): # -> None:
        """
        Add Composable Kernel Universal GEMM instance choices to the auto-tuning list.
        """
        ...
    
    def size_args(self): # -> tuple[Any, Any, Any, Any, Any, Any, Any, Any | Literal[0]] | tuple[Any, Any, Any, Any, Any, Any, Any | Literal[0]]:
        ...
    


