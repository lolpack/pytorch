"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional
from torch._inductor.autoheuristic.autoheuristic_utils import AHContext, AHMetadata, Choice
from torch._inductor.autoheuristic.learnedheuristic_interface import LearnedHeuristic

def find_and_instantiate_subclasses(package_name: str, base_class: Any) -> list[LearnedHeuristic]:
    ...

class LearnedHeuristicController:
    """
    Class that finds and instantiates all learned heuristics. It also provides
    a way to get the decision of a learned heuristic.
    """
    existing_heuristics: dict[str, list[LearnedHeuristic]] = ...
    heuristics_initialized: bool = ...
    def __init__(self, metadata: AHMetadata, context: AHContext) -> None:
        ...
    
    def get_heuristics(self, name: str) -> list[LearnedHeuristic]:
        """
        Returns a list of learned heuristics for the given optimization name.
        """
        ...
    
    def get_decision(self) -> Optional[Choice]:
        """
        Returns the decision made by the learned heuristic or None if no heuristic was found or the heuristic is unsure
        which choice to make.
        """
        ...
    
    def get_decisions_ranked(self, top_k: int) -> Optional[list[Choice]]:
        ...
    


