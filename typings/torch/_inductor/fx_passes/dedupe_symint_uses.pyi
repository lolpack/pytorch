"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import Union
from torch import SymBool, SymFloat, SymInt

@dataclass
class _SymExprHash:
    """
    Hash for a py_sym_types that will use the underlying sympy expression
    """
    sym_obj: Union[SymInt, SymFloat, SymBool]
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, value) -> bool:
        ...
    


class _SymHashingDict:
    """
    Wrapper around a dictionary that will convert sym types to hash with _SymExprHash and reuse
    existing sym proxies.

    SymPy hash is not always reliable so optimistically hash sympy expression, and if those fail,
    fallback to symnodes.
    """
    def __init__(self) -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def get(self, key, default=...): # -> None:
        ...
    


def dedupe_symints(graph: torch.fx.Graph): # -> None:
    """
    Dedupes sym ints in the graph to nodes are resolvable to symint graph inputs.

    We only dedupe from graph inputs to avoid adding a potential dependency in the forward
    from the backward.

    """
    ...

