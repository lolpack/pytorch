"""
This type stub file was generated by pyright.
"""

import contextlib
import logging
import queue
import warnings
import torch.fx
import types
from dataclasses import dataclass
from typing import Any, Optional, TYPE_CHECKING
from typing_extensions import Self, final, override
from torch._inductor.metrics import CachedMetricsDeltas
from torch._inductor.output_code import CompiledFxGraphConstants, CompiledFxGraphConstantsWithGm, OutputCode
from torch._subclasses import FakeTensorMode
from torch.utils._ordered_set import OrderedSet
from . import config
from .compile_fx import FxCompile, _CompileFxKwargs
from collections.abc import Generator, Sequence
from torch._inductor.utils import InputType
from torch.fx import GraphModule

if TYPE_CHECKING:
    ...
@dataclass
class _VirtualizedSerializer:
    """
    This handles the data for serializing Virtualized.
    """
    aot_compilation: Any = ...
    choices: Any = ...
    local_buffer_context: Any = ...
    ops: Any = ...
    kernel: Any = ...
    current_node: Any = ...
    @classmethod
    def serialize(cls) -> _VirtualizedSerializer:
        """
        Turn the current state of torch._inductor.virtualized.V into a
        serializable structure.
        """
        ...
    
    def patch(self) -> _VirtualizedSerializerContextManager:
        """
        Returns a context manager which patches the saved values into the
        current environment. While patched, any value not listed above will be
        poisoned so that reads will raise an error.
        """
        ...
    


class _VirtualizedSerializerContextManager(contextlib.ExitStack):
    """
    Helper for _VirtualizedSerializer.patch()
    """
    def __init__(self, virtualized: _VirtualizedSerializer) -> None:
        ...
    
    @override
    def __enter__(self) -> Self:
        ...
    


class _LoweringSerializer:
    """
    This handles the data for serializing lowering.lowering
    """
    fallbacks: OrderedSet[str]
    def __init__(self) -> None:
        ...
    
    def patch(self) -> _LoweringSerializerContextManager:
        ...
    


class _LoweringSerializerContextManager(contextlib.ExitStack):
    """
    Helper for _LoweringSerializer.patch()
    """
    def __init__(self, lowering: _LoweringSerializer) -> None:
        ...
    
    @override
    def __enter__(self) -> Self:
        ...
    


@dataclass
class _FakeTensorModeSerializer:
    allow_non_fake_inputs: bool
    def __init__(self, fake_mode: FakeTensorMode) -> None:
        ...
    
    @contextlib.contextmanager
    def patch(self, fake_mode: FakeTensorMode) -> Generator[None, None, None]:
        ...
    


@dataclass
class _WireProtocolInput:
    """
    For _SerializedFxCompile - encapsulates all the data being transferred
    (sent) from the parent to the child.
    """
    gm: torch.fx.GraphModule
    example_inputs: Sequence[InputType]
    inputs_to_check: Sequence[int]
    graph_kwargs: _CompileFxKwargs
    tracing_context: Optional[torch._guards.TracingContext]
    config: dict[str, object]
    virtualized: _VirtualizedSerializer
    deterministic_guard_for_testing: Optional[torch.testing._internal.common_utils.DeterministicGuard]
    logger_state: _LoggerState
    lowering: _LoweringSerializer
    fake_tensor_mode: _FakeTensorModeSerializer
    def serialize(self) -> _WireProtocolPickledInput:
        """
        Turns this object into a _WireProtocolPickledInput which can be
        directly transferred across a stream.
        """
        ...
    


@dataclass
class _WireProtocolPickledInput:
    value: bytes
    def deserialize(self) -> _WireProtocolInput:
        """
        Turn this streamable object back into a _WireProtocolInput.
        """
        ...
    


@dataclass
class _WireProtocolOutput:
    """
    For _SerializedFxCompile - encapsulates all the data being transferred
    (returned) back from the child to the parent.
    """
    graph: OutputCode
    metrics: CachedMetricsDeltas
    logs: list[logging.LogRecord]
    warning_replay: Optional[list[warnings.WarningMessage]]
    shape_env: Optional[torch.fx.experimental.symbolic_shapes.ShapeEnv]
    def serialize(self) -> _WireProtocolPickledOutput:
        """
        Turns this object into a _WireProtocolPickledOutput which can be
        directly transferred across a stream.
        """
        ...
    


@dataclass
class _WireProtocolPickledOutput:
    value: bytes
    def deserialize(self, constants: CompiledFxGraphConstants) -> _WireProtocolOutput:
        """
        Turn this streamable object back into a _WireProtocolOutput.
        """
        ...
    


class _LoggerState:
    """
    This class is for tracking logging that happens during an out-of-process
    compile so we can "replay" those messages when the compile is done. Used as
    a context manager which returns the captured logs (object).
    """
    loggers: dict[str, int]
    captured_logs: Optional[_CapturedLogs] = ...
    def __init__(self) -> None:
        ...
    
    def __enter__(self) -> _CapturedLogs:
        ...
    
    def __exit__(self, exc_type: Optional[type[BaseException]], exc_value: Optional[BaseException], traceback: Optional[types.TracebackType]) -> None:
        ...
    


class _CapturedLogs:
    """
    Helper for _LoggerState - this class actually attaches to the logger in
    the child process and grabs the log messages themselves.
    """
    state: _LoggerState
    queue: queue.Queue[logging.LogRecord]
    handlers: Optional[dict[str, logging.Handler]]
    def __init__(self, state: _LoggerState) -> None:
        ...
    
    def finish(self) -> list[logging.LogRecord]:
        ...
    
    def remove(self) -> None:
        ...
    
    def apply(self) -> None:
        ...
    


class _SerializedFxCompile(FxCompile):
    """
    This is used to represent an FxCompile which occurs across a serialized
    boundary.
    """
    @override
    def codegen_and_compile(self, gm: GraphModule, example_inputs: Sequence[InputType], inputs_to_check: Sequence[int], graph_kwargs: _CompileFxKwargs) -> OutputCode:
        ...
    
    def serialize_compile(self, gm: GraphModule, example_inputs: Sequence[InputType], inputs_to_check: Sequence[int], graph_kwargs: _CompileFxKwargs) -> Optional[tuple[_WireProtocolPickledInput, CompiledFxGraphConstantsWithGm]]:
        """
        Prepare a _WireProtocolInput to compile. If None is returned then it
        wasn't possible to serialize and we should fallback to in-process.
        """
        ...
    


@final
class _DebugSerdeFxCompile(_SerializedFxCompile):
    ...


class _OutOfProcessFxCompile(_SerializedFxCompile):
    """
    Represents an FxCompile which is run outside the current process (in
    either a subprocess or possibly even a separate machine).
    """
    ...


@final
class _DebugFileFxCompile(_SerializedFxCompile):
    file_index = ...


