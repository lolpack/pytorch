"""
This type stub file was generated by pyright.
"""

import dataclasses
import sympy
import torch
from typing import Any, TYPE_CHECKING
from torch._inductor.index_propagation import SymPyOps, TypedExpr
from .ops_handler import DefaultHandler
from .virtualized import StoreMode
from torch._inductor.scheduler import SchedulerNode

if TYPE_CHECKING:
    ...
def construct_symbol(count: int, dtype: torch.dtype) -> sympy.Symbol:
    ...

class PreservesZeros(SymPyOps, DefaultHandler):
    """
    For prologue kernels where the loads are masked, does the final store of this kernel preserve
    the zeros.
    """
    def __init__(self) -> None:
        ...
    
    def load(self, name: str, index: sympy.Expr) -> TypedExpr:
        ...
    
    def store(self, name: str, index: sympy.Expr, value: TypedExpr, mode: StoreMode = ...) -> None:
        ...
    
    def indirect_indexing(self, *args: Any, **kwargs: Any) -> sympy.Expr:
        ...
    


def prologue_preserves_zero_mask(prologue: SchedulerNode) -> bool:
    """
    Does this prologue preserve zero masks
    """
    ...

@dataclasses.dataclass
class DTypeContainer:
    dtype: torch.dtype
    is_scalar: bool = ...


class RecordLowPrecisionOps(DefaultHandler):
    def __init__(self, disallow_fp32_ops: bool = ...) -> None:
        ...
    
    def load(self, name: str, index: sympy.Expr) -> DTypeContainer:
        ...
    
    @staticmethod
    def store(name: str, index: sympy.Expr, value: TypedExpr, mode: StoreMode = ...) -> None:
        ...
    
    def check_bounds(self, expr: sympy.Expr, size: sympy.Expr, lower: bool, upper: bool) -> None:
        ...
    
    @staticmethod
    def indirect_indexing(*args: Any, **kwargs: Any) -> sympy.Expr:
        ...
    


def low_prec_float(dtype: torch.dtype) -> bool:
    ...

def can_codegen_without_upcasts(prologue: SchedulerNode, disallow_fp32_ops: bool = ...) -> bool:
    """
    Can this prologue be run without `upcast_to_fp32` while preserving numerics.

    This is only true if the node only contains dtype conversions, indexing, and other non-arithmetic operators.

    If disallow_fp32_ops is True, then we also disallow ops that are explicitly computed in fp32 or fp64.
    """
    ...

