"""
This type stub file was generated by pyright.
"""

import dataclasses
import inspect
import typing
from torchgen.model import FunctionSchema, OperatorName

__all__ = ["custom_op", "CustomOp", "get_ctx"]
SUPPORTED_DEVICE_TYPE_TO_KEY = ...
RESERVED_NS = ...
def warn_deprecated(): # -> None:
    ...

def custom_op(qualname: str, manual_schema: typing.Optional[str] = ...) -> typing.Callable:
    r"""
    This API is deprecated, please use torch.library.custom_op instead
    """
    ...

global_registry: dict[str, CustomOp] = ...
class CustomOp:
    r"""
    This API is deprecated, please use torch.library.custom_op instead
    """
    def __init__(self, lib, cpp_ns, schema, operator_name, ophandle, *, _private_access=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __call__(self, *args, **kwargs): # -> Any:
        ...
    
    def impl(self, device_types: typing.Union[str, typing.Iterable[str]], _stacklevel=...) -> typing.Callable:
        r"""
        This API is deprecated, please use torch.library.custom_op instead
        """
        ...
    
    def impl_factory(self) -> typing.Callable:
        r"""Register an implementation for a factory function."""
        ...
    
    def impl_abstract(self, _stacklevel=...) -> typing.Callable:
        r"""
        This API is deprecated, please use torch.library.custom_op instead
        """
        ...
    
    def impl_save_for_backward(self, _stacklevel=...): # -> Callable[..., None]:
        r"""Register a function that tells us what to save for backward.

        Please see impl_backward for more details.
        """
        ...
    
    def impl_backward(self, output_differentiability=..., _stacklevel=...): # -> Callable[..., None]:
        r"""
        This API is deprecated, please use torch.library.custom_op instead
        """
        ...
    


@dataclasses.dataclass
class FuncAndLocation:
    func: typing.Callable
    location: str
    ...


def find_ophandle_or_throw(cpp_ns: str, operator_name: OperatorName): # -> _DispatchOperatorHandle:
    ...

def validate_namespace(ns: str) -> None:
    ...

def validate_schema(schema: FunctionSchema) -> None:
    ...

def parse_qualname(qualname: str) -> tuple[str, str]:
    ...

def validate_device_type(device_type: str) -> None:
    ...

def supported_param(param: inspect.Parameter) -> bool:
    ...

def validate_function_matches_schema(schema: FunctionSchema, func: typing.Callable) -> None:
    ...

def report_error_callback(custom_op: typing.Any, key: str) -> None:
    ...

def custom_op_from_existing(op): # -> CustomOp:
    ...

def get_op(qualname): # -> Any:
    ...

def get_abstract_impl(qualname): # -> None:
    ...

