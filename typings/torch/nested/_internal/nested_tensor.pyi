"""
This type stub file was generated by pyright.
"""

import torch
from typing import *
from torch.utils.weak import WeakTensorKeyDictionary

_tensor_id_counter = ...
_tensor_symint_registry = WeakTensorKeyDictionary()
def get_tensor_symint(tensor, *, coeff=...): # -> SymInt:
    ...

class NestedTensor(torch.Tensor):
    _values: torch.Tensor
    _offsets: torch.Tensor
    _lengths: Optional[torch.Tensor]
    _size: tuple[int, ...]
    _strides: tuple[int, ...]
    _ragged_idx: int
    _metadata_cache: Dict[str, Any]
    @staticmethod
    def __new__(cls, values, offsets, *, lengths=..., **kwargs):
        ...
    
    def __init__(self, values, offsets, *, lengths=..., **kwargs) -> None:
        ...
    
    def values(self): # -> Tensor:
        ...
    
    def offsets(self): # -> Tensor:
        ...
    
    def lengths(self): # -> Tensor | None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __reduce_ex__(self, proto): # -> tuple[Any, tuple[Callable[..., NestedTensor], type[Self], tuple[dict[str, Any]], dict[Any, Any]]]:
        ...
    
    def __tensor_flatten__(self): # -> tuple[list[str], dict[str, Any]]:
        ...
    
    @staticmethod
    def __tensor_unflatten__(inner_tensors: Dict, meta, outer_size, outer_stride): # -> NestedTensor:
        ...
    
    @classmethod
    def __torch_dispatch__(cls, func, types, args=..., kwargs=...):
        ...
    
    @classmethod
    def __torch_function__(cls, func, types, args=..., kwargs=...): # -> Tensor | Any:
        ...
    


class ViewBufferFromNested(torch.autograd.Function):
    @staticmethod
    def forward(ctx, x: NestedTensor): # -> Tensor:
        ...
    
    @staticmethod
    def backward(ctx, gO: torch.Tensor): # -> NestedTensor:
        ...
    


class ViewNestedFromBuffer(torch.autograd.Function):
    @staticmethod
    def forward(ctx, values: torch.Tensor, offsets: torch.Tensor, metadata_cache: Optional[Dict[str, Any]] = ...): # -> NestedTensor:
        ...
    
    @staticmethod
    def backward(ctx, gO: NestedTensor): # -> tuple[Tensor, None, None]:
        ...
    


def buffer_from_jagged(jagged): # -> Any | None:
    ...

def jagged_from_list(tensors: List[torch.Tensor], offsets: Optional[torch.Tensor], dtype=..., device=...) -> tuple[NestedTensor, torch.Tensor]:
    """Constructs a NestedTensor backed by jagged layout from a list of tensors"""
    ...

def jagged_from_tensor_and_lengths(tensor: torch.Tensor, starts: torch.Tensor, lengths: torch.Tensor) -> tuple[NestedTensor, torch.Tensor, Optional[torch.Tensor]]:
    """Constructs a NestedTensor backed by jagged layout from a tensor, starts of sequences, and sequence lengths"""
    ...

_dummy_instance: Optional[torch.Tensor] = ...
def nested_view_from_values_offsets(values, offsets, ragged_idx=..., min_seqlen=..., max_seqlen=...): # -> Tensor:
    ...

def nested_view_from_values_offsets_lengths(values, offsets, lengths, ragged_idx=..., min_seqlen=..., max_seqlen=...): # -> Tensor:
    ...

def nested_from_padded(padded, offsets, ragged_idx=..., min_seqlen=..., max_seqlen=..., sum_S=...): # -> Tensor:
    ...

