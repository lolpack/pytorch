"""
This type stub file was generated by pyright.
"""

from typing import *
from torch.fx.experimental._constant_symnode import ConstantIntNode

__all__ = ["NestedIntNode"]
class NestedIntNode:
    def __init__(self, t_id: int, coeff: int) -> None:
        ...
    
    def nested_int_coeff(self) -> int:
        ...
    
    def maybe_as_int(self) -> Optional[int]:
        ...
    
    def is_int(self) -> bool:
        ...
    
    def is_float(self) -> bool:
        ...
    
    def is_bool(self) -> bool:
        ...
    
    def is_nested_int(self) -> bool:
        ...
    
    def clone(self) -> NestedIntNode:
        ...
    
    def str(self) -> Any:
        ...
    
    def __str__(self) -> Any:
        ...
    
    def __repr__(self) -> Any:
        ...
    
    def mul(self, other: Any) -> NestedIntNode:
        ...
    
    def eq(self, other: Any) -> Any:
        ...
    
    def ne(self, other: Any) -> Any:
        ...
    
    def gt(self, other: Any) -> Any:
        ...
    
    def lt(self, other: Any) -> Any:
        ...
    
    def le(self, other: Any) -> Any:
        ...
    
    def ge(self, other: Any) -> Any:
        ...
    
    def is_symbolic(self) -> bool:
        ...
    
    def nested_int(self) -> int:
        ...
    
    def is_constant(self) -> bool:
        ...
    
    def wrap_int(self, num: int) -> ConstantIntNode:
        ...
    


