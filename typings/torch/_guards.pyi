"""
This type stub file was generated by pyright.
"""

import contextlib
import dataclasses
import enum
import traceback
import torch
import sympy
from abc import abstractmethod
from contextlib import contextmanager
from dataclasses import dataclass
from typing import Any, Callable, Generic, NamedTuple, Optional, TYPE_CHECKING, TypeVar, Union
from torch.utils._backport_slots import dataclass_slots
from torch.utils._traceback import CapturedTraceback

log = ...
if TYPE_CHECKING:
    ...
COMPILE_ID_PATTERN = ...
CA_COMPILE_ID_PATTERN = ...
@dataclass(frozen=True)
class CompileId:
    frame_id: Optional[int]
    frame_compile_id: Optional[int]
    compiled_autograd_id: Optional[int] = ...
    def __str__(self) -> str:
        ...
    
    @classmethod
    def from_string(cls, compile_id: Optional[str]): # -> Self | None:
        """
        Factory method that creates a CompileId from its string representation.
        Keep this in sync with the __str__ method.
        """
        ...
    


class TraceId(NamedTuple):
    compile_id: CompileId
    attempt: int
    def __str__(self) -> str:
        ...
    


class GuardSource(enum.Enum):
    LOCAL = ...
    GLOBAL = ...
    LOCAL_SPECIALIZED_NN_MODULE = ...
    GLOBAL_SPECIALIZED_NN_MODULE = ...
    CONSTANT = ...
    RANDOM_VALUE = ...
    SHAPE_ENV = ...
    LOCAL_FSDP_MODULE = ...
    GLOBAL_FSDP_MODULE = ...
    BACKWARD_STATE = ...
    EPHEMERAL = ...
    SYNTHETIC_LOCAL = ...
    LOCAL_UNSPECIALIZED_NN_MODULE = ...
    GLOBAL_UNSPECIALIZED_NN_MODULE = ...
    LOCAL_UNSPECIALIZED_BUILTIN_NN_MODULE = ...
    GLOBAL_UNSPECIALIZED_BUILTIN_NN_MODULE = ...
    def is_fsdp_module(self) -> bool:
        ...
    
    def is_specialized_nn_module(self) -> bool:
        ...
    
    def is_unspecialized_nn_module(self) -> bool:
        ...
    
    def is_unspecialized_builtin_nn_module(self) -> bool:
        ...
    
    def is_local(self): # -> bool:
        ...
    


class GuardBuilderBase:
    ...


@dataclasses.dataclass(frozen=True)
class SLoc:
    framework_loc: Optional[Union[traceback.FrameSummary, str]]
    maybe_user_loc: Optional[str]
    def __str__(self) -> str:
        ...
    


class ShapeGuard(NamedTuple):
    expr: sympy.logic.boolalg.Boolean
    sloc: SLoc
    size_oblivious: bool
    ...


@dataclass_slots
@dataclasses.dataclass
class Guard:
    originating_source: Source
    create_fn: Callable[[GuardBuilderBase, Guard], None]
    guard_types: Optional[list[str]] = ...
    code_list: Optional[list[str]] = ...
    obj_weakref: Optional[object] = ...
    guarded_class_weakref: Optional[type] = ...
    stack: Optional[CapturedTraceback] = ...
    user_stack: Optional[traceback.StackSummary] = ...
    _hash: Optional[int] = ...
    def __hash__(self) -> int:
        ...
    
    def sort_key(self): # -> tuple[bool, Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1], int, str, int]:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def inner_create_fn(self): # -> Callable[..., Any] | Callable[[GuardBuilderBase, DataclassInstance], None]:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def source(self) -> GuardSource:
        ...
    
    @staticmethod
    def weakref_to_str(obj_weakref): # -> str:
        """
        This is a workaround of a Python weakref bug.

        `obj_weakref` is instance returned by `weakref.ref`,
        `str(obj_weakref)` is buggy if the original obj overrides __getattr__, e.g:

            class MyConfig(dict):
                def __getattr__(self, x):
                    return self[x]

            obj = MyConfig(offset=5)
            obj_weakref = weakref.ref(obj)
            str(obj_weakref)  # raise error: KeyError: '__name__'
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def create(self, builder: GuardBuilderBase): # -> None:
        ...
    
    def is_specialized_nn_module(self): # -> bool:
        ...
    
    def is_fsdp_module(self): # -> bool:
        ...
    
    def is_local(self): # -> bool:
        ...
    
    def set_export_info(self, guard_type, guarded_class, code_list, obj_weakref): # -> None:
        ...
    


T = TypeVar("T")
@dataclasses.dataclass(frozen=True)
class GuardEnvExpr:
    ...


@dataclasses.dataclass(frozen=True)
class DuplicateInputs(GuardEnvExpr):
    input_source_a: Source
    input_source_b: Source
    def __post_init__(self): # -> None:
        ...
    


@dataclasses.dataclass(frozen=True)
class StorageOverlap(GuardEnvExpr):
    overlapping_sources: list[Source]
    non_overlapping_sources: list[Source]
    ...


class Checkpointable(Generic[T]):
    @abstractmethod
    def copy_graphstate(self) -> T:
        ...
    
    @abstractmethod
    def restore_graphstate(self, state: T): # -> None:
        ...
    


class GuardsCheckpointState:
    """
    The GuardCheckpointState - it is the T of Checkpointable[T] for GuardsContext
    """
    dynamo_guards: set[Guard] = ...
    def __init__(self, dynamo_guards) -> None:
        ...
    
    def diff(self, other): # -> set[DataclassInstance] | None:
        """
        Produces a delta against another GuardsCheckpointState.

        Returns None if no delta is found, otherwise, return a set() of mismatched
        Guard type objects.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class ModuleContextCheckpointState:
    nn_modules: dict[str, torch.nn.Module] = ...
    def __init__(self, nn_modules) -> None:
        ...
    
    def diff(self, other): # -> set[str] | None:
        """
        Produces a delta against another ModuleContextCheckpointState.

        Returns None if no delta is found, otherwise, return a set() of mismatched
        module key names.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class ModuleContext(Checkpointable[ModuleContextCheckpointState]):
    def __init__(self) -> None:
        ...
    
    def copy_graphstate(self): # -> ModuleContextCheckpointState:
        ...
    
    def restore_graphstate(self, state): # -> None:
        ...
    


class GlobalContextCheckpointState:
    global_state: dict[str, tuple[Callable, ...]] = ...
    def __init__(self, global_states) -> None:
        ...
    
    def diff(self, other): # -> set[str] | None:
        """
        Produces a delta against another GlobalContextCheckpointState.

        Returns None if no delta is found, otherwise, return a set() of mismatched
        global key names.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class GlobalContext(Checkpointable[GlobalContextCheckpointState]):
    """
    This keeps track of the global torch state during tracing of a function.
    For example, torch.is_grad_enabled.
    """
    _supported_global_states = ...
    def __init__(self) -> None:
        ...
    
    def copy_graphstate(self): # -> GlobalContextCheckpointState:
        ...
    
    def restore_graphstate(self, state): # -> None:
        ...
    


class GuardsSet:
    def __init__(self, inner=...) -> None:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __sub__(self, other): # -> GuardsSet:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def add(self, guard: Guard, *, collect_debug_stack=..., skip=...): # -> None:
        ...
    
    def update(self, *others: set[Guard]): # -> None:
        ...
    
    def remove_guards_with_source(self, source): # -> None:
        """Delete all guards that contains a given source"""
        ...
    


class GuardsContext(Checkpointable[GuardsCheckpointState]):
    def __init__(self) -> None:
        ...
    
    def copy_graphstate(self): # -> GuardsCheckpointState:
        ...
    
    def restore_graphstate(self, state): # -> None:
        ...
    


class HopSubgraphCache:
    @abstractmethod
    def add_dynamo_installed_submodule(self, fn_id: int, identifier: str): # -> None:
        ...
    
    @abstractmethod
    def get_dynamo_installed_submodules(self, fn_id: int) -> list[str]:
        ...
    
    @abstractmethod
    def add_autograd_key_entry(self, identifier: str, key: Callable): # -> None:
        ...
    
    @abstractmethod
    def get_autograd_key_entry(self, identifier: str): # -> None:
        ...
    
    @abstractmethod
    def add_proxy_dispatch_entry(self, identifier: str, key: Callable): # -> None:
        ...
    
    @abstractmethod
    def get_proxy_dispatch_entry(self, identifier: str): # -> None:
        ...
    
    @abstractmethod
    def add_lazy_bwd_entry(self, identifier: str, tangent_metadata: tuple[object], gmod: torch.fx.GraphModule): # -> None:
        ...
    
    @abstractmethod
    def get_lazy_bwd_entry(self, identifier: str, tangent_metadata: tuple[object]) -> int:
        ...
    


class InvokeSubgraphCache(HopSubgraphCache):
    def __init__(self) -> None:
        ...
    
    def add_dynamo_installed_submodule(self, fn_id: int, identifier: str): # -> None:
        ...
    
    def get_dynamo_installed_submodules(self, fn_id: int) -> list[str]:
        ...
    
    def add_autograd_key_entry(self, identifier: str, key: Callable): # -> None:
        ...
    
    def get_autograd_key_entry(self, identifier: str): # -> Callable[..., Any] | None:
        ...
    
    def add_proxy_dispatch_entry(self, identifier: str, key: Callable): # -> None:
        ...
    
    def get_proxy_dispatch_entry(self, identifier: str): # -> Callable[..., Any] | None:
        ...
    
    def add_lazy_bwd_entry(self, identifier: str, tangent_metadata: tuple[object], gmod: torch.fx.GraphModule): # -> int:
        ...
    
    def get_lazy_bwd_entry(self, identifier: str, tangent_metadata: tuple[object]): # -> tuple[None, None] | tuple[GraphModule, int]:
        ...
    


class HopDispatchSetCache:
    def __init__(self) -> None:
        ...
    
    def get_cache(self, op: torch._ops.HigherOrderOperator) -> Optional[HopSubgraphCache]:
        ...
    


_TLS = ...
class CompileContext:
    @staticmethod
    def get() -> CompileContext:
        ...
    
    @staticmethod
    def try_get() -> Optional[CompileContext]:
        ...
    
    def __init__(self, compile_id) -> None:
        ...
    
    @staticmethod
    def current_compile_id(): # -> CompileId | None:
        ...
    
    @staticmethod
    def current_trace_id(): # -> TraceId | None:
        ...
    


class TracingContext:
    """
    Provides the currently installed TracingContext, or None.

    Note that it is a staticmethod, and invocations outside of `with tracing()` (see below), are valid but
    will return None.
    """
    @staticmethod
    def try_get() -> Optional[TracingContext]:
        ...
    
    @staticmethod
    def get() -> TracingContext:
        ...
    
    def __init__(self, fake_mode) -> None:
        ...
    
    def clear(self): # -> None:
        ...
    
    @staticmethod
    @contextmanager
    def patch(**kwargs): # -> Generator[None, Any, None]:
        ...
    
    @staticmethod
    def extract_stack(): # -> StackSummary:
        ...
    
    @staticmethod
    @contextlib.contextmanager
    def clear_frame(): # -> Generator[None, Any, None]:
        ...
    
    @staticmethod
    @contextlib.contextmanager
    def current_frame(frame_summary): # -> Generator[None, Any, None]:
        ...
    
    @staticmethod
    @contextlib.contextmanager
    def report_output_strides(): # -> Generator[list[tuple[int, ...] | None] | None, Any, None]:
        ...
    
    @staticmethod
    def set_current_loc(filename, lineno, frame_name): # -> None:
        ...
    
    @staticmethod
    def get_traced_code(): # -> list[CodeType] | None:
        ...
    


@contextmanager
def compile_context(context: Optional[CompileContext]): # -> Generator[CompileContext | None, Any, None]:
    ...

@contextmanager
def tracing(context: Optional[TracingContext]): # -> Generator[TracingContext | None, Any, None]:
    """
    This function installs the passed in tracing context as a dynamic scoped
    global variable.

    Calls to TracingContext.get() while not under a `with tracing()` context
    will return None.
    """
    ...

@dataclasses.dataclass(frozen=True)
class Source:
    def is_dict_key(self): # -> Literal[False]:
        ...
    
    def is_ephemeral(self): # -> Literal[False]:
        ...
    
    def reconstruct(self, codegen):
        ...
    
    def guard_source(self) -> GuardSource:
        ...
    
    def name(self) -> str:
        ...
    
    def make_guard(self, fn) -> Guard:
        ...
    
    def is_specialized_nn_module(self) -> bool:
        ...
    
    def subguards_allowed(self): # -> bool:
        """True if you can guard on attributes of this"""
        ...
    


@dataclasses.dataclass(frozen=True)
class ChainedSource(Source):
    base: Source
    def is_dict_key(self): # -> Literal[False]:
        ...
    
    def is_ephemeral(self): # -> Literal[False]:
        ...
    
    def get_base(self) -> Source:
        ...
    


def detect_fake_mode(inputs: Any = ...): # -> None:
    """
    Attempts to "detect" what the current fake mode is.  If there is one ambiently
    available from TracingContext, we preferentially use that.  Otherwise, we
    heuristically detect the fake mode via the following sources, in order of
    priority:

        - Currently active fake mode on stack
        - Fake mode associated with passed in tensors (inputs does not
          have to be flattened)
    """
    ...

def active_fake_mode(): # -> FakeTensorMode | None:
    """
    Inspects the dispatch mode stack for an active fake mode and returns it.
    Returns None if no fake mode is active.
    """
    ...

