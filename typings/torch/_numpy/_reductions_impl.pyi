"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING
from ._normalizations import ArrayLike, AxisLike, DTypeLike, KeepDims, NotImplementedType, OutArray

"""Implementation of reduction operations, to be wrapped into arrays, dtypes etc
in the 'public' layer.

Anything here only deals with torch objects, e.g. "dtype" is a torch.dtype instance etc
"""
if TYPE_CHECKING:
    ...
@_deco_axis_expand
def count_nonzero(a: ArrayLike, axis: AxisLike = ..., *, keepdims: KeepDims = ...):
    ...

@_deco_axis_expand
def argmax(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., *, keepdims: KeepDims = ...): # -> Tensor:
    ...

@_deco_axis_expand
def argmin(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., *, keepdims: KeepDims = ...): # -> Tensor:
    ...

@_deco_axis_expand
def any(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., *, where: NotImplementedType = ...):
    ...

@_deco_axis_expand
def all(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., *, where: NotImplementedType = ...):
    ...

@_deco_axis_expand
def amax(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., initial: NotImplementedType = ..., where: NotImplementedType = ...):
    ...

max = ...
@_deco_axis_expand
def amin(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., initial: NotImplementedType = ..., where: NotImplementedType = ...):
    ...

min = ...
@_deco_axis_expand
def ptp(a: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ...):
    ...

@_deco_axis_expand
def sum(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., initial: NotImplementedType = ..., where: NotImplementedType = ...):
    ...

@_deco_axis_expand
def prod(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., initial: NotImplementedType = ..., where: NotImplementedType = ...):
    ...

product = ...
@_deco_axis_expand
def mean(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ..., keepdims: KeepDims = ..., *, where: NotImplementedType = ...):
    ...

@_deco_axis_expand
def std(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ..., ddof=..., keepdims: KeepDims = ..., *, where: NotImplementedType = ...):
    ...

@_deco_axis_expand
def var(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ..., ddof=..., keepdims: KeepDims = ..., *, where: NotImplementedType = ...):
    ...

def cumsum(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ...):
    ...

def cumprod(a: ArrayLike, axis: AxisLike = ..., dtype: Optional[DTypeLike] = ..., out: Optional[OutArray] = ...):
    ...

cumproduct = ...
def average(a: ArrayLike, axis=..., weights: ArrayLike = ..., returned=..., *, keepdims=...): # -> tuple[Any, Any | Tensor]:
    ...

def quantile(a: ArrayLike, q: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., overwrite_input=..., method=..., keepdims: KeepDims = ..., *, interpolation: NotImplementedType = ...):
    ...

def percentile(a: ArrayLike, q: ArrayLike, axis: AxisLike = ..., out: Optional[OutArray] = ..., overwrite_input=..., method=..., keepdims: KeepDims = ..., *, interpolation: NotImplementedType = ...):
    ...

def median(a: ArrayLike, axis=..., out: Optional[OutArray] = ..., overwrite_input=..., keepdims: KeepDims = ...):
    ...

