"""
This type stub file was generated by pyright.
"""

from typing import Optional
from ._normalizations import ArrayLike, ArrayLikeOrScalar, CastingModes, DTypeLike, NotImplementedType, OutArray, normalizer

_binary = ...
NEP50_FUNCS = ...
def deco_binary_ufunc(torch_func): # -> Callable[..., Tensor | Any]:
    """Common infra for binary ufuncs.

    Normalize arguments, sort out type casting, broadcasting and delegate to
    the pytorch functions for the actual work.
    """
    ...

@normalizer
def matmul(x1: ArrayLike, x2: ArrayLike, /, out: Optional[OutArray] = ..., *, casting: Optional[CastingModes] = ..., order: NotImplementedType = ..., dtype: Optional[DTypeLike] = ..., subok: NotImplementedType = ..., signature: NotImplementedType = ..., extobj: NotImplementedType = ..., axes: NotImplementedType = ..., axis: NotImplementedType = ...): # -> Tensor:
    ...

@normalizer
def ldexp(x1: ArrayLikeOrScalar, x2: ArrayLikeOrScalar, /, out: Optional[OutArray] = ..., *, where: NotImplementedType = ..., casting: Optional[CastingModes] = ..., order: NotImplementedType = ..., dtype: Optional[DTypeLike] = ..., subok: NotImplementedType = ..., signature: NotImplementedType = ..., extobj: NotImplementedType = ...): # -> Tensor:
    ...

@normalizer
def divmod(x1: ArrayLike, x2: ArrayLike, out1: Optional[OutArray] = ..., out2: Optional[OutArray] = ..., /, out: tuple[Optional[OutArray], Optional[OutArray]] = ..., *, where: NotImplementedType = ..., casting: Optional[CastingModes] = ..., order: NotImplementedType = ..., dtype: Optional[DTypeLike] = ..., subok: NotImplementedType = ..., signature: NotImplementedType = ..., extobj: NotImplementedType = ...): # -> tuple[Tensor | Any, Tensor | Any]:
    ...

def modf(x, /, *args, **kwds): # -> tuple[Tensor | Any, Tensor | Any]:
    ...

_binary = ...
_unary = ...
_fp_unary = ...
def deco_unary_ufunc(torch_func): # -> Callable[..., Tensor | Any]:
    """Common infra for unary ufuncs.

    Normalize arguments, sort out type casting, broadcasting and delegate to
    the pytorch functions for the actual work.
    """
    ...

__all__ = _binary + _unary
