"""
This type stub file was generated by pyright.
"""

"""Dtypes/scalar type implementaions with torch dtypes.

Here `dtype` is always a torch.dtype, this module knows nothing about
scalar types, wrapper dtypes or anything like that. PyTorch only.
"""
DefaultDTypes = ...
_default_dtypes = ...
def default_dtypes(): # -> DefaultDTypes:
    ...

def get_default_dtype_for(dtype):
    """Default scalar type given sctype category."""
    ...

def can_cast_impl(from_torch_dtype, to_torch_dtype, casting): # -> bool:
    ...

def result_type_impl(*tensors):
    ...

def python_type_for_torch(dtyp): # -> type[float] | type[complex] | type[bool] | type[int]:
    """Get a python scalar type a torch dtype"""
    ...

_SCALAR_TYPES = ...
_SCALAR_AND_SYMBOLIC_TYPES = ...
_NEP50_FUNCS_TENSOR_ONLY = ...
def is_scalar(x): # -> bool:
    ...

def is_scalar_or_symbolic(x): # -> bool:
    ...

def is_float_or_fp_tensor(x): # -> bool:
    ...

def is_complex_or_complex_tensor(x): # -> bool:
    ...

def nep50_to_tensors(x1, x2, handle_weaks, function_name): # -> tuple[Tensor, Tensor] | tuple[Tensor | Any, Any | Tensor]:
    """If either of inputs is a python scalar, type-promote with NEP 50."""
    ...

