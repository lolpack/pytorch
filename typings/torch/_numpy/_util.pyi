"""
This type stub file was generated by pyright.
"""

"""Assorted utilities, which do not need anything other then torch and stdlib."""
def is_sequence(seq): # -> bool:
    ...

class AxisError(ValueError, IndexError):
    ...


class UFuncTypeError(TypeError, RuntimeError):
    ...


def cast_if_needed(tensor, dtype):
    ...

def cast_int_to_float(x):
    ...

def normalize_axis_index(ax, ndim, argname=...):
    ...

def normalize_axis_tuple(axis, ndim, argname=..., allow_duplicate=...): # -> tuple[Any | int, ...]:
    """
    Normalizes an axis argument into a tuple of non-negative integer axes.

    This handles shorthands such as ``1`` and converts them to ``(1,)``,
    as well as performing the handling of negative indices covered by
    `normalize_axis_index`.

    By default, this forbids axes from being specified multiple times.
    Used internally by multi-axis-checking logic.

    Parameters
    ----------
    axis : int, iterable of int
        The un-normalized index or indices of the axis.
    ndim : int
        The number of dimensions of the array that `axis` should be normalized
        against.
    argname : str, optional
        A prefix to put before the error message, typically the name of the
        argument.
    allow_duplicate : bool, optional
        If False, the default, disallow an axis from being specified twice.

    Returns
    -------
    normalized_axes : tuple of int
        The normalized axis index, such that `0 <= normalized_axis < ndim`
    """
    ...

def allow_only_single_axis(axis):
    ...

def expand_shape(arr_shape, axis): # -> list[Any | int]:
    ...

def apply_keepdims(tensor, axis, ndim):
    ...

def axis_none_flatten(*tensors, axis=...): # -> tuple[tuple[Any, ...], Literal[0]] | tuple[tuple[Any, ...], Any]:
    """Flatten the arrays if axis is None."""
    ...

def typecast_tensor(t, target_dtype, casting):
    """Dtype-cast tensor to target_dtype.

    Parameters
    ----------
    t : torch.Tensor
        The tensor to cast
    target_dtype : torch dtype object
        The array dtype to cast all tensors to
    casting : str
        The casting mode, see `np.can_cast`

     Returns
     -------
    `torch.Tensor` of the `target_dtype` dtype

     Raises
     ------
     ValueError
        if the argument cannot be cast according to the `casting` rule

    """
    ...

def typecast_tensors(tensors, target_dtype, casting): # -> tuple[Any, ...]:
    ...

def ndarrays_to_tensors(*inputs): # -> ValueError | Tensor | tuple[Any, ...]:
    """Convert all ndarrays from `inputs` to tensors. (other things are intact)"""
    ...

