"""
This type stub file was generated by pyright.
"""

import contextlib
from dataclasses import dataclass
from types import ModuleType
from typing import Any, Callable, Generic, NoReturn, Optional, TYPE_CHECKING, TypeVar, Union
from typing_extensions import deprecated

CONFIG_TYPES = ...
T = TypeVar("T", bound=Union[int, float, bool, None, str, list, set, tuple, dict])
_UNSET_SENTINEL = ...
@dataclass
class _Config(Generic[T]):
    """Represents a config with richer behaviour than just a default value.
    ::
        i.e.
        foo = Config(justknob="//foo:bar", default=False)
        install_config_module(...)

    This configs must be installed with install_config_module to be used

    Precedence Order:
        alias: If set, the directly use the value of the alias.
        env_name_force: If set, this environment variable has precedence over
            everything after this.
            If multiple env variables are given, the precendence order is from
            left to right.
        user_override: If a user sets a value (i.e. foo.bar=True), that
            has precedence over everything after this.
        env_name_default: If set, this environment variable will override everything
            after this.
            If multiple env variables are given, the precendence order is from
            left to right.
        justknob: If this pytorch installation supports justknobs, that will
            override defaults, but will not override the user_override precendence.
        default: This value is the lowest precendance, and will be used if nothing is
            set.

    Environment Variables:
        These are interpreted to be either "0" or "1" to represent true and false.

    Arguments:
        justknob: the name of the feature / JK. In OSS this is unused.
        default: is the value to default this knob to in OSS.
        alias: The alias config to read instead.
        env_name_force: The environment variable, or list of, to read that is a FORCE
            environment variable. I.e. it overrides everything except for alias.
        env_name_default: The environment variable, or list of, to read that changes the
            default behaviour. I.e. user overrides take preference.
    """
    default: Union[T, object]
    justknob: Optional[str] = ...
    env_name_default: Optional[list[str]] = ...
    env_name_force: Optional[list[str]] = ...
    alias: Optional[str] = ...
    def __init__(self, default: Union[T, object] = ..., justknob: Optional[str] = ..., env_name_default: Optional[Union[str, list[str]]] = ..., env_name_force: Optional[Union[str, list[str]]] = ..., value_type: Optional[type] = ..., alias: Optional[str] = ...) -> None:
        ...
    
    @staticmethod
    def string_or_list_of_string_to_list(val: Optional[Union[str, list[str]]]) -> Optional[list[str]]:
        ...
    


if TYPE_CHECKING:
    def Config(default: Union[T, object] = ..., justknob: Optional[str] = ..., env_name_default: Optional[Union[str, list[str]]] = ..., env_name_force: Optional[Union[str, list[str]]] = ..., value_type: Optional[type] = ..., alias: Optional[str] = ...) -> T:
        ...
    
else:
    ...
def install_config_module(module: ModuleType) -> None:
    """
    Converts a module-level config into a `ConfigModule()`.

    See _config_typing.pyi for instructions on how to get the converted module to typecheck.
    """
    class ConfigModuleInstance(ConfigModule):
        ...
    
    

COMPILE_IGNORED_MARKER = ...
def get_assignments_with_compile_ignored_comments(module: ModuleType) -> set[str]:
    ...

@dataclass
class _ConfigEntry:
    default: Any
    value_type: type
    user_override: Any = ...
    justknob: Optional[str] = ...
    env_value_force: Any = ...
    env_value_default: Any = ...
    hide: bool = ...
    alias: Optional[str] = ...
    def __init__(self, config: _Config) -> None:
        ...
    


class ConfigModule(ModuleType):
    _config: dict[str, _ConfigEntry]
    _bypass_keys: set[str]
    _compile_ignored_keys: set[str]
    _is_dirty: bool
    _hash_digest: Optional[bytes]
    def __init__(self) -> None:
        ...
    
    def __setattr__(self, name: str, value: object) -> None:
        ...
    
    def __getattr__(self, name: str) -> Any:
        ...
    
    def __delattr__(self, name: str) -> None:
        ...
    
    def get_type(self, config_name: str) -> type:
        ...
    
    def save_config(self) -> bytes:
        """Convert config to a pickled blob"""
        ...
    
    def save_config_portable(self, *, ignore_private_configs: bool = ...) -> dict[str, Any]:
        """Convert config to portable format"""
        ...
    
    def codegen_config(self) -> str:
        """Convert config to Python statements that replicate current config.
        This does NOT include config settings that are at default values.
        """
        ...
    
    def get_hash(self) -> bytes:
        """Hashes the configs that are not compile_ignored"""
        ...
    
    @deprecated("`config.to_dict()` has been deprecated. It no longer changes the underlying config." " use `config.get_config_copy()` instead if you just want a copy of the config, or " "config.load_config if you need mutable access", category=FutureWarning)
    def to_dict(self) -> dict[str, Any]:
        ...
    
    @deprecated("`config.shallow_copy_dict()` has been deprecated. It no longer changes the underlying config." " use `config.get_config_copy()` instead if you just want a copy of the config, or " "config.load_config if you need mutable access", category=FutureWarning)
    def shallow_copy_dict(self) -> dict[str, Any]:
        ...
    
    def load_config(self, maybe_pickled_config: Union[bytes, dict[str, Any]]) -> None:
        """Restore from a prior call to save_config() or shallow_copy_dict()"""
        ...
    
    def get_config_copy(self) -> dict[str, Any]:
        ...
    
    def patch(self, arg1: Optional[Union[str, dict[str, Any]]] = ..., arg2: Any = ..., **kwargs: dict[str, Any]) -> ContextDecorator:
        """
        Decorator and/or context manager to make temporary changes to a config.

        As a decorator:

            @config.patch("name", val)
            @config.patch(name1=val1, name2=val2)
            @config.patch({"name1": val1, "name2", val2})
            def foo(...):
                ...

        As a context manager:

            with config.patch("name", val):
                ...
        """
        class ConfigPatch(ContextDecorator):
            ...
        
        
    


class ContextDecorator(contextlib.ContextDecorator):
    """
    Same as contextlib.ContextDecorator, but with support for
    `unittest.TestCase`
    """
    def __enter__(self) -> None:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb) -> NoReturn:
        ...
    
    def __call__(self, func: Callable[[Any], Any]) -> Any:
        ...
    


class SubConfigProxy:
    """
    Shim to redirect to main config.
    `config.triton.cudagraphs` maps to _config["triton.cudagraphs"]
    """
    def __init__(self, config: object, prefix: str) -> None:
        ...
    
    def __setattr__(self, name: str, value: object) -> None:
        ...
    
    def __getattr__(self, name: str) -> Any:
        ...
    
    def __delattr__(self, name: str) -> None:
        ...
    


def patch_object(obj: object, name: str, value: object) -> object:
    """
    Workaround `mock.patch.object` issue with ConfigModule
    """
    ...

def get_tristate_env(name: str, default: Any = ...) -> Optional[bool]:
    ...

