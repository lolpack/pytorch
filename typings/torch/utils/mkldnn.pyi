"""
This type stub file was generated by pyright.
"""

import torch

class MkldnnLinear(torch.jit.ScriptModule):
    def __init__(self, dense_module, dtype) -> None:
        ...
    
    @torch.jit.script_method
    def __getstate__(self): # -> tuple[Any, Any, bool]:
        ...
    
    @torch.jit.script_method
    def __setstate__(self, state): # -> None:
        ...
    
    @torch.jit.script_method
    def forward(self, x):
        ...
    


class _MkldnnConvNd(torch.jit.ScriptModule):
    """Common base of MkldnnConv1d and MkldnnConv2d."""
    __constants__ = ...
    def __init__(self, dense_module) -> None:
        ...
    
    @torch.jit.script_method
    def __getstate__(self): # -> tuple[Any, Any, bool]:
        ...
    
    @torch.jit.script_method
    def forward(self, x): # -> Tensor:
        ...
    


class MkldnnConv1d(_MkldnnConvNd):
    def __init__(self, dense_module, dtype) -> None:
        ...
    
    @torch.jit.script_method
    def __setstate__(self, state): # -> None:
        ...
    


class MkldnnConv2d(_MkldnnConvNd):
    def __init__(self, dense_module, dtype) -> None:
        ...
    
    @torch.jit.script_method
    def __setstate__(self, state): # -> None:
        ...
    


class MkldnnConv3d(_MkldnnConvNd):
    def __init__(self, dense_module, dtype) -> None:
        ...
    
    @torch.jit.script_method
    def __setstate__(self, state): # -> None:
        ...
    


class MkldnnBatchNorm(torch.jit.ScriptModule):
    __constants__ = ...
    def __init__(self, dense_module) -> None:
        ...
    
    @torch.jit.script_method
    def __getstate__(self): # -> tuple[Any, Any, Any, Any, bool]:
        ...
    
    @torch.jit.script_method
    def __setstate__(self, state): # -> None:
        ...
    
    @torch.jit.script_method
    def forward(self, x): # -> Tensor:
        ...
    


class MkldnnPrelu(torch.jit.ScriptModule):
    def __init__(self, dense_module, dtype) -> None:
        ...
    
    @torch.jit.script_method
    def __getstate__(self): # -> tuple[Any, bool]:
        ...
    
    @torch.jit.script_method
    def __setstate__(self, state): # -> None:
        ...
    
    @torch.jit.script_method
    def forward(self, x): # -> Tensor:
        ...
    


def to_mkldnn(module, dtype=...): # -> MkldnnLinear | MkldnnConv1d | MkldnnConv2d | MkldnnConv3d | MkldnnBatchNorm | MkldnnPrelu:
    ...

