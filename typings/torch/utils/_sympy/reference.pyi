"""
This type stub file was generated by pyright.
"""

class ReferenceAnalysis:
    @staticmethod
    def constant(c, dtype):
        ...
    
    @staticmethod
    def or_(a, b):
        ...
    
    @staticmethod
    def and_(a, b):
        ...
    
    @staticmethod
    def eq(a, b): # -> Equality | Relational | Unequality | Integer:
        ...
    
    @classmethod
    def ne(cls, a, b):
        ...
    
    @staticmethod
    def lt(a, b):
        ...
    
    @staticmethod
    def gt(a, b):
        ...
    
    @staticmethod
    def le(a, b):
        ...
    
    @staticmethod
    def ge(a, b):
        ...
    
    @staticmethod
    def not_(a):
        ...
    
    @staticmethod
    def reciprocal(x): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def square(x): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def trunc_to_int(x, dtype): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def ceil_to_int(x, dtype): # -> Expr:
        ...
    
    @staticmethod
    def floor_to_int(x, dtype): # -> Expr:
        ...
    
    @staticmethod
    def floor(x): # -> Expr | Float:
        ...
    
    @staticmethod
    def ceil(x): # -> Expr | Float:
        ...
    
    @staticmethod
    def to_dtype(x, dtype): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def mod(x, y): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def abs(x):
        ...
    
    @staticmethod
    def neg(x):
        ...
    
    @staticmethod
    def truediv(a, b): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def int_truediv(a, b): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def floordiv(a, b): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def truncdiv(a, b):
        ...
    
    @staticmethod
    def add(a, b): # -> Any | Float:
        ...
    
    @classmethod
    def sym_sum(cls, args): # -> Expr:
        ...
    
    @staticmethod
    def mul(a, b): # -> Any | Float:
        ...
    
    @staticmethod
    def sub(a, b): # -> Any | Float:
        ...
    
    @staticmethod
    def exp(x): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def log(x): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def log2(x): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def sqrt(x): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def pow(a, b): # -> Float:
        ...
    
    @staticmethod
    def pow_by_natural(a, b): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def minimum(a, b): # -> int | Basic | Expr | Min:
        ...
    
    @staticmethod
    def maximum(a, b): # -> int | Basic | Expr | Max:
        ...
    
    @staticmethod
    def round_to_int(a, dtype): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def round_decimal(a, b): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def bitwise_and(a, b): # -> type[AppliedUndef]:
        ...
    
    @staticmethod
    def bitwise_or(a, b): # -> type[AppliedUndef]:
        ...
    


class PythonReferenceAnalysis(ReferenceAnalysis):
    @staticmethod
    def constant(c, dtype): # -> int | float | bool:
        ...
    
    @staticmethod
    def not_(a): # -> Any | bool:
        ...
    
    @classmethod
    def sym_sum(cls, args): # -> Any | Float | Literal[0]:
        ...
    
    @staticmethod
    def floordiv(a, b):
        ...
    
    @staticmethod
    def mod(x, y):
        ...
    
    @staticmethod
    def truncdiv(a, b):
        ...
    
    @staticmethod
    def to_dtype(x, dtype): # -> Any | SymFloat | float:
        ...
    
    @staticmethod
    def exp(x):
        ...
    
    @staticmethod
    def log(x):
        ...
    
    @staticmethod
    def log2(x):
        ...
    
    @staticmethod
    def sqrt(x):
        ...
    
    @staticmethod
    def minimum(a, b): # -> Any | float:
        ...
    
    @staticmethod
    def maximum(a, b): # -> Any | float:
        ...
    
    @staticmethod
    def floor_to_int(x, dtype):
        ...
    
    @staticmethod
    def ceil_to_int(x, dtype):
        ...
    
    @staticmethod
    def floor(x): # -> float:
        ...
    
    @staticmethod
    def ceil(x): # -> float:
        ...
    
    @staticmethod
    def truediv(a, b):
        ...
    
    @staticmethod
    def pow(a, b):
        ...
    
    @staticmethod
    def pow_by_natural(a, b):
        ...
    
    @staticmethod
    def round_to_int(a, dtype):
        ...
    
    @staticmethod
    def round_decimal(a, b):
        ...
    
    @staticmethod
    def bitwise_and(a, b):
        ...
    
    @staticmethod
    def bitwise_or(a, b):
        ...
    


class OptimizedPythonReferenceAnalysis(PythonReferenceAnalysis):
    @staticmethod
    def sym_sum(args): # -> Any | int | float | bool | SymInt | SymFloat | SymBool:
        ...
    


class TensorReferenceAnalysis:
    @staticmethod
    def constant(c, dtype): # -> Any:
        ...
    
    @staticmethod
    def or_(a, b): # -> Any:
        ...
    
    @staticmethod
    def and_(a, b): # -> Any:
        ...
    
    @staticmethod
    def bitwise_and(a, b): # -> Any:
        ...
    
    @staticmethod
    def bitwise_or(a, b): # -> Any:
        ...
    
    @staticmethod
    def eq(a, b): # -> Any:
        ...
    
    @classmethod
    def ne(cls, a, b): # -> Any:
        ...
    
    @staticmethod
    def lt(a, b): # -> Any:
        ...
    
    @staticmethod
    def gt(a, b): # -> Any:
        ...
    
    @staticmethod
    def le(a, b): # -> Any:
        ...
    
    @staticmethod
    def ge(a, b): # -> Any:
        ...
    
    @staticmethod
    def not_(a): # -> Any:
        ...
    
    @staticmethod
    def reciprocal(x): # -> Any:
        ...
    
    @staticmethod
    def square(x): # -> Any:
        ...
    
    @staticmethod
    def trunc_to_int(x, dtype): # -> Tensor:
        ...
    
    @staticmethod
    def ceil_to_int(x, dtype): # -> Tensor:
        ...
    
    @staticmethod
    def floor_to_int(x, dtype): # -> Tensor:
        ...
    
    @staticmethod
    def floor(x): # -> Any:
        ...
    
    @staticmethod
    def ceil(x): # -> Any:
        ...
    
    @staticmethod
    def to_dtype(x, dtype): # -> Tensor:
        ...
    
    @staticmethod
    def mod(x, y):
        ...
    
    @staticmethod
    def abs(x): # -> Any:
        ...
    
    @staticmethod
    def neg(x): # -> Any:
        ...
    
    @staticmethod
    def truediv(a, b): # -> Any:
        ...
    
    @staticmethod
    def int_truediv(a, b):
        ...
    
    @staticmethod
    def floordiv(a, b): # -> Any:
        ...
    
    @staticmethod
    def truncdiv(a, b):
        ...
    
    @staticmethod
    def add(a, b): # -> Any:
        ...
    
    @staticmethod
    def mul(a, b): # -> Any:
        ...
    
    @staticmethod
    def sub(a, b): # -> Any:
        ...
    
    @staticmethod
    def exp(x): # -> Any:
        ...
    
    @staticmethod
    def log(x): # -> Any:
        ...
    
    @staticmethod
    def log2(x): # -> Any:
        ...
    
    @staticmethod
    def sqrt(x): # -> Any:
        ...
    
    @staticmethod
    def sin(x): # -> Any:
        ...
    
    @staticmethod
    def cos(x): # -> Any:
        ...
    
    @staticmethod
    def tanh(x): # -> Any:
        ...
    
    @staticmethod
    def sinh(x): # -> Any:
        ...
    
    @staticmethod
    def cosh(x): # -> Any:
        ...
    
    @staticmethod
    def tan(x): # -> Any:
        ...
    
    @staticmethod
    def acos(x): # -> Any:
        ...
    
    @staticmethod
    def atan(x): # -> Any:
        ...
    
    @staticmethod
    def asin(x): # -> Any:
        ...
    
    @staticmethod
    def pow(a, b): # -> Any:
        ...
    
    @staticmethod
    def pow_by_natural(a, b): # -> Any:
        ...
    
    @staticmethod
    def minimum(a, b): # -> Any:
        ...
    
    @staticmethod
    def maximum(a, b): # -> Any:
        ...
    
    @staticmethod
    def round_to_int(a, dtype): # -> Any:
        ...
    
    @staticmethod
    def round_decimal(a, b):
        ...
    


