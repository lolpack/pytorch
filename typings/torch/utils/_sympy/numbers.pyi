"""
This type stub file was generated by pyright.
"""

from sympy.core.decorators import _sympifyit
from sympy.core.numbers import Number
from sympy.core.singleton import Singleton

class IntInfinity(Number, metaclass=Singleton):
    r"""Positive integer infinite quantity.

    Integer infinity is a value in an extended integers which
    is greater than all other integers.  We distinguish it from
    sympy's existing notion of infinity in that it reports that
    it is_integer.

    Infinity is a singleton, and can be accessed by ``S.IntInfinity``,
    or can be imported as ``int_oo``.
    """
    is_integer = ...
    is_commutative = ...
    is_number = ...
    is_extended_real = ...
    is_comparable = ...
    is_extended_positive = ...
    is_prime = ...
    _op_priority = ...
    __slots__ = ...
    def __new__(cls): # -> Self:
        ...
    
    @_sympifyit("other", NotImplemented)
    def __add__(self, other): # -> Number | NaN | Self:
        ...
    
    __radd__ = ...
    @_sympifyit("other", NotImplemented)
    def __sub__(self, other): # -> NegativeInfinity | Infinity | NaN | Self | Expr:
        ...
    
    @_sympifyit("other", NotImplemented)
    def __rsub__(self, other):
        ...
    
    @_sympifyit("other", NotImplemented)
    def __mul__(self, other): # -> NaN | Self | Infinity | NegativeInfinity | _NotImplementedType | Expr:
        ...
    
    __rmul__ = ...
    @_sympifyit("other", NotImplemented)
    def __truediv__(self, other): # -> NaN | Infinity | NegativeInfinity | Zero | Expr:
        ...
    
    def __abs__(self):
        ...
    
    def __neg__(self):
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    @_sympifyit("other", NotImplemented)
    def __mod__(self, other): # -> _NotImplementedType | NaN:
        ...
    
    __rmod__ = ...
    def floor(self): # -> Self:
        ...
    
    def ceiling(self): # -> Self:
        ...
    


int_oo = ...
class NegativeIntInfinity(Number, metaclass=Singleton):
    """Negative integer infinite quantity.

    NegativeInfinity is a singleton, and can be accessed
    by ``S.NegativeInfinity``.

    See Also
    ========

    IntInfinity
    """
    _op_priority = ...
    is_integer = ...
    is_extended_real = ...
    is_commutative = ...
    is_comparable = ...
    is_extended_negative = ...
    is_number = ...
    is_prime = ...
    __slots__ = ...
    def __new__(cls): # -> Self:
        ...
    
    @_sympifyit("other", NotImplemented)
    def __add__(self, other): # -> Infinity | NaN | Self | Number:
        ...
    
    __radd__ = ...
    @_sympifyit("other", NotImplemented)
    def __sub__(self, other): # -> Infinity | NaN | Self | NegativeInfinity | Expr:
        ...
    
    @_sympifyit("other", NotImplemented)
    def __rsub__(self, other):
        ...
    
    @_sympifyit("other", NotImplemented)
    def __mul__(self, other): # -> NaN | Self | Infinity | NegativeInfinity | _NotImplementedType | Expr:
        ...
    
    __rmul__ = ...
    @_sympifyit("other", NotImplemented)
    def __truediv__(self, other): # -> NaN | Self | Infinity | Zero | Expr:
        ...
    
    def __abs__(self):
        ...
    
    def __neg__(self):
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    @_sympifyit("other", NotImplemented)
    def __mod__(self, other): # -> _NotImplementedType | NaN:
        ...
    
    __rmod__ = ...
    def floor(self): # -> Self:
        ...
    
    def ceiling(self): # -> Self:
        ...
    
    def as_powers_dict(self): # -> dict[Any, int]:
        ...
    


