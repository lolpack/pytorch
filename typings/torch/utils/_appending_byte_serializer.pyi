"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from typing import Callable, Generic, TypeVar

T = TypeVar("T")
_ENCODING_VERSION: int = ...
__all__ = ["AppendingByteSerializer"]
CHECKSUM_DIGEST_SIZE = ...
class BytesWriter:
    def __init__(self) -> None:
        ...
    
    def write_uint64(self, i: int) -> None:
        ...
    
    def write_str(self, s: str) -> None:
        ...
    
    def write_bytes(self, b: bytes) -> None:
        ...
    
    def to_bytes(self) -> bytes:
        ...
    


class BytesReader:
    def __init__(self, data: bytes) -> None:
        ...
    
    def is_finished(self) -> bool:
        ...
    
    def read_uint64(self) -> int:
        ...
    
    def read_str(self) -> str:
        ...
    
    def read_bytes(self) -> bytes:
        ...
    


class AppendingByteSerializer(Generic[T]):
    """
    Provides efficient serialization and deserialization of list of bytes
    Note that this does not provide any guarantees around byte order
    """
    _serialize_fn: Callable[[BytesWriter, T], None]
    _writer: BytesWriter
    def __init__(self, *, serialize_fn: Callable[[BytesWriter, T], None]) -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def append(self, data: T) -> None:
        ...
    
    def extend(self, elems: Iterable[T]) -> None:
        ...
    
    def to_bytes(self) -> bytes:
        ...
    
    @staticmethod
    def to_list(data: bytes, *, deserialize_fn: Callable[[BytesReader], T]) -> list[T]:
        ...
    


