"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional, TYPE_CHECKING
from . import IS_WINDOWS
from torch.utils.data import Dataset

r""""Contains definitions of the methods used by the _BaseDataLoaderIter workers.

These **needs** to be in global scope since Py2 doesn't support serializing
static methods.
"""
if TYPE_CHECKING:
    ...
if IS_WINDOWS:
    class ManagerWatchdog:
        def __init__(self) -> None:
            ...
        
        def is_alive(self): # -> bool:
            ...
        
    
    
else:
    class ManagerWatchdog:
        def __init__(self) -> None:
            ...
        
        def is_alive(self): # -> bool:
            ...
        
    
    
_worker_info: Optional[WorkerInfo] = ...
class WorkerInfo:
    id: int
    num_workers: int
    seed: int
    dataset: Dataset
    __initialized = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def __setattr__(self, key, val): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def get_worker_info() -> Optional[WorkerInfo]:
    r"""Returns the information about the current
    :class:`~torch.utils.data.DataLoader` iterator worker process.

    When called in a worker, this returns an object guaranteed to have the
    following attributes:

    * :attr:`id`: the current worker id.
    * :attr:`num_workers`: the total number of workers.
    * :attr:`seed`: the random seed set for the current worker. This value is
      determined by main process RNG and the worker id. See
      :class:`~torch.utils.data.DataLoader`'s documentation for more details.
    * :attr:`dataset`: the copy of the dataset object in **this** process. Note
      that this will be a different object in a different process than the one
      in the main process.

    When called in the main process, this returns ``None``.

    .. note::
       When used in a :attr:`worker_init_fn` passed over to
       :class:`~torch.utils.data.DataLoader`, this method can be useful to
       set up each worker process differently, for instance, using ``worker_id``
       to configure the ``dataset`` object to only read a specific fraction of a
       sharded dataset, or use ``seed`` to seed other libraries used in dataset
       code.
    """
    ...

@dataclass(frozen=True)
class _IterableDatasetStopIteration:
    worker_id: int
    ...


@dataclass(frozen=True)
class _ResumeIteration:
    seed: Optional[int] = ...


