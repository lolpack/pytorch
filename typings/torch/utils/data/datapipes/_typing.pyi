"""
This type stub file was generated by pyright.
"""

import numbers
from abc import ABCMeta
from typing import TypeVar

class GenericMeta(ABCMeta):
    ...


class Integer(numbers.Integral):
    ...


class Boolean(numbers.Integral):
    ...


TYPE2ABC = ...
def issubtype(left, right, recursive=...): # -> bool:
    r"""
    Check if the left-side type is a subtype of the right-side type.

    If any of type is a composite type like `Union` and `TypeVar` with
    bounds, it would be expanded into a list of types and check all
    of left-side types are subtypes of either one from right-side types.
    """
    ...

def issubinstance(data, data_type): # -> bool:
    ...

class _DataPipeType:
    r"""Save type annotation in `param`."""
    def __init__(self, param) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def issubtype(self, other): # -> bool:
        ...
    
    def issubtype_of_instance(self, other): # -> bool:
        ...
    


_T_co = TypeVar("_T_co", covariant=True)
_DEFAULT_TYPE = ...
class _DataPipeMeta(GenericMeta):
    r"""
    Metaclass for `DataPipe`.

    Add `type` attribute and `__init_subclass__` based on the type, and validate the return hint of `__iter__`.

    Note that there is subclass `_IterDataPipeMeta` specifically for `IterDataPipe`.
    """
    type: _DataPipeType
    def __new__(cls, name, bases, namespace, **kwargs): # -> Self:
        ...
    
    def __init__(self, name, bases, namespace, **kwargs) -> None:
        ...
    


class _IterDataPipeMeta(_DataPipeMeta):
    r"""
    Metaclass for `IterDataPipe` and inherits from `_DataPipeMeta`.

    Add various functions for behaviors specific to `IterDataPipe`.
    """
    def __new__(cls, name, bases, namespace, **kwargs): # -> Self:
        ...
    


def reinforce_type(self, expected_type):
    r"""
    Reinforce the type for DataPipe instance.

    And the 'expected_type' is required to be a subtype of the original type
    hint to restrict the type requirement of DataPipe instance.
    """
    ...

