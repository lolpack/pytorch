"""
This type stub file was generated by pyright.
"""

import torch
from typing import Optional
from torch.overrides import TorchFunctionMode

CURRENT_DEVICE: Optional[torch.device] = ...
class DeviceContext(TorchFunctionMode):
    def __init__(self, device) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    
    def __torch_function__(self, func, types, args=..., kwargs=...):
        ...
    


def device_decorator(device, func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Generator[Any, Any, Any]] | _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    ...

def set_device(device): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Generator[Any, Any, Any]] | _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    """
    Set the default device inside of the wrapped function by decorating it with this function.

    If you would like to use this as a context manager, use device as a
    context manager directly, e.g., ``with torch.device(device)``.
    """
    ...

