"""
This type stub file was generated by pyright.
"""

import weakref
from collections.abc import MutableMapping
from weakref import ref
from torch import Tensor

WeakRef = ref
__all__ = ["TensorWeakRef", "WeakIdRef", "WeakIdKeyDictionary", "WeakTensorKeyDictionary"]
class WeakIdRef(weakref.ref):
    __slots__ = ...
    def __init__(self, key, callback=...) -> None:
        ...
    
    def __call__(self): # -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class _WeakHashRef(weakref.ref):
    __slots__ = ...
    def __init__(self, key, callback=...) -> None:
        ...
    
    def __call__(self): # -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class WeakIdKeyDictionary(MutableMapping):
    def __init__(self, dict=..., ref_type=...) -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def copy(self): # -> WeakIdKeyDictionary:
        ...
    
    __copy__ = ...
    def __deepcopy__(self, memo): # -> Self:
        ...
    
    def get(self, key, default=...): # -> None:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def items(self): # -> Generator[tuple[Any, Any], Any, None]:
        ...
    
    def keys(self): # -> Generator[Any, Any, None]:
        ...
    
    __iter__ = ...
    def values(self): # -> Generator[Any, Any, None]:
        ...
    
    def keyrefs(self): # -> list[Any]:
        """Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        """
        ...
    
    def popitem(self): # -> tuple[Any, Any]:
        ...
    
    def pop(self, key, *args):
        ...
    
    def setdefault(self, key, default=...): # -> None:
        ...
    
    def update(self, dict=..., **kwargs): # -> None:
        ...
    
    def __ior__(self, other): # -> Self:
        ...
    
    def __or__(self, other): # -> WeakIdKeyDictionary | _NotImplementedType:
        ...
    
    def __ror__(self, other): # -> Self | _NotImplementedType:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


WeakTensorKeyDictionary = WeakIdKeyDictionary
class TensorWeakRef:
    """Wrapper around a weak ref of a Tensor that handles the _fix_weakref() call required when unwrapping a Tensor weakref."""
    ref: WeakRef[Tensor]
    def __init__(self, tensor: Tensor) -> None:
        ...
    
    def __call__(self): # -> Tensor | None:
        ...
    


