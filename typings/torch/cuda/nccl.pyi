"""
This type stub file was generated by pyright.
"""

import torch.cuda
from collections.abc import Sequence
from typing import Optional, Union

__all__ = ["all_reduce", "reduce", "broadcast", "all_gather", "reduce_scatter"]
SUM = ...
def is_available(tensors): # -> bool:
    ...

def version(): # -> tuple[int, int, int] | tuple[int, int, int, str]:
    """
    Returns the version of the NCCL.


    This function returns a tuple containing the major, minor, and patch version numbers of the NCCL.
    The suffix is also included in the tuple if a version suffix exists.
    Returns:
        tuple: The version information of the NCCL.
    """
    ...

def unique_id(): # -> bytes:
    ...

def init_rank(num_ranks, uid, rank): # -> object:
    ...

def all_reduce(inputs, outputs=..., op=..., streams=..., comms=...): # -> None:
    ...

def reduce(inputs: Sequence[torch.Tensor], output: Optional[Union[torch.Tensor, Sequence[torch.Tensor]]] = ..., root: int = ..., op: int = ..., streams: Optional[Sequence[torch.cuda.Stream]] = ..., comms=..., *, outputs: Optional[Sequence[torch.Tensor]] = ...) -> None:
    ...

def broadcast(inputs: Sequence[torch.Tensor], root: int = ..., streams=..., comms=...) -> None:
    ...

def all_gather(inputs: Sequence[torch.Tensor], outputs: Sequence[torch.Tensor], streams=..., comms=...) -> None:
    ...

def reduce_scatter(inputs: Sequence[torch.Tensor], outputs: Sequence[torch.Tensor], op: int = ..., streams=..., comms=...) -> None:
    ...

