"""
This type stub file was generated by pyright.
"""

import torch
from collections.abc import Sequence
from typing import Any, Optional, Union
from torch.nn.modules import Module

__all__ = ["get_a_var", "parallel_apply"]
def get_a_var(obj: Union[torch.Tensor, list[Any], tuple[Any, ...], dict[Any, Any]]) -> Optional[torch.Tensor]:
    ...

def parallel_apply(modules: Sequence[Module], inputs: Sequence[Any], kwargs_tup: Optional[Sequence[dict[str, Any]]] = ..., devices: Optional[Sequence[Optional[Union[int, torch.device]]]] = ...) -> list[Any]:
    r"""Apply each `module` in :attr:`modules` in parallel on each of :attr:`devices`.

    Args:
        modules (Module): modules to be parallelized
        inputs (tensor): inputs to the modules
        devices (list of int or torch.device): CUDA devices

    :attr:`modules`, :attr:`inputs`, :attr:`kwargs_tup` (if given), and
    :attr:`devices` (if given) should all have same length. Moreover, each
    element of :attr:`inputs` can either be a single object as the only argument
    to a module, or a collection of positional arguments.
    """
    ...

