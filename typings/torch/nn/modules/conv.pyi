"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from typing_extensions import deprecated
from torch import Tensor
from torch.nn.common_types import _size_1_t, _size_2_t, _size_3_t
from torch.nn.parameter import UninitializedParameter
from .lazy import LazyModuleMixin
from .module import Module

__all__ = ["Conv1d", "Conv2d", "Conv3d", "ConvTranspose1d", "ConvTranspose2d", "ConvTranspose3d", "LazyConv1d", "LazyConv2d", "LazyConv3d", "LazyConvTranspose1d", "LazyConvTranspose2d", "LazyConvTranspose3d"]
convolution_notes = ...
class _ConvNd(Module):
    __constants__ = ...
    __annotations__ = ...
    in_channels: int
    _reversed_padding_repeated_twice: list[int]
    out_channels: int
    kernel_size: tuple[int, ...]
    stride: tuple[int, ...]
    padding: Union[str, tuple[int, ...]]
    dilation: tuple[int, ...]
    transposed: bool
    output_padding: tuple[int, ...]
    groups: int
    padding_mode: str
    weight: Tensor
    bias: Optional[Tensor]
    def __init__(self, in_channels: int, out_channels: int, kernel_size: tuple[int, ...], stride: tuple[int, ...], padding: Union[str, tuple[int, ...]], dilation: tuple[int, ...], transposed: bool, output_padding: tuple[int, ...], groups: int, bias: bool, padding_mode: str, device=..., dtype=...) -> None:
        ...
    
    def reset_parameters(self) -> None:
        ...
    
    def extra_repr(self): # -> str:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class Conv1d(_ConvNd):
    __doc__ = ...
    def __init__(self, in_channels: int, out_channels: int, kernel_size: _size_1_t, stride: _size_1_t = ..., padding: Union[str, _size_1_t] = ..., dilation: _size_1_t = ..., groups: int = ..., bias: bool = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    
    def forward(self, input: Tensor) -> Tensor:
        ...
    


class Conv2d(_ConvNd):
    __doc__ = ...
    def __init__(self, in_channels: int, out_channels: int, kernel_size: _size_2_t, stride: _size_2_t = ..., padding: Union[str, _size_2_t] = ..., dilation: _size_2_t = ..., groups: int = ..., bias: bool = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    
    def forward(self, input: Tensor) -> Tensor:
        ...
    


class Conv3d(_ConvNd):
    __doc__ = ...
    def __init__(self, in_channels: int, out_channels: int, kernel_size: _size_3_t, stride: _size_3_t = ..., padding: Union[str, _size_3_t] = ..., dilation: _size_3_t = ..., groups: int = ..., bias: bool = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    
    def forward(self, input: Tensor) -> Tensor:
        ...
    


class _ConvTransposeNd(_ConvNd):
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation, transposed, output_padding, groups, bias, padding_mode, device=..., dtype=...) -> None:
        ...
    


class ConvTranspose1d(_ConvTransposeNd):
    __doc__ = ...
    def __init__(self, in_channels: int, out_channels: int, kernel_size: _size_1_t, stride: _size_1_t = ..., padding: _size_1_t = ..., output_padding: _size_1_t = ..., groups: int = ..., bias: bool = ..., dilation: _size_1_t = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    
    def forward(self, input: Tensor, output_size: Optional[list[int]] = ...) -> Tensor:
        ...
    


class ConvTranspose2d(_ConvTransposeNd):
    __doc__ = ...
    def __init__(self, in_channels: int, out_channels: int, kernel_size: _size_2_t, stride: _size_2_t = ..., padding: _size_2_t = ..., output_padding: _size_2_t = ..., groups: int = ..., bias: bool = ..., dilation: _size_2_t = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    
    def forward(self, input: Tensor, output_size: Optional[list[int]] = ...) -> Tensor:
        """
        Performs the forward pass.

        Attributes:
            input (Tensor): The input tensor.
            output_size (list[int], optional): A list of integers representing
                the size of the output tensor. Default is None.
        """
        ...
    


class ConvTranspose3d(_ConvTransposeNd):
    __doc__ = ...
    def __init__(self, in_channels: int, out_channels: int, kernel_size: _size_3_t, stride: _size_3_t = ..., padding: _size_3_t = ..., output_padding: _size_3_t = ..., groups: int = ..., bias: bool = ..., dilation: _size_3_t = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    
    def forward(self, input: Tensor, output_size: Optional[list[int]] = ...) -> Tensor:
        ...
    


class _ConvTransposeMixin(_ConvTransposeNd):
    @deprecated("`_ConvTransposeMixin` is a deprecated internal class. " "Please consider using public APIs.", category=FutureWarning)
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class _LazyConvXdMixin(LazyModuleMixin):
    groups: int
    transposed: bool
    in_channels: int
    out_channels: int
    kernel_size: tuple[int, ...]
    weight: UninitializedParameter
    bias: UninitializedParameter
    def reset_parameters(self) -> None:
        ...
    
    def initialize_parameters(self, input: Tensor, *args, **kwargs) -> None:
        ...
    


class LazyConv1d(_LazyConvXdMixin, Conv1d):
    r"""A :class:`torch.nn.Conv1d` module with lazy initialization of the ``in_channels`` argument.

    The ``in_channels`` argument of the :class:`Conv1d` is inferred from the ``input.size(1)``.
    The attributes that will be lazily initialized are `weight` and `bias`.

    Check the :class:`torch.nn.modules.lazy.LazyModuleMixin` for further documentation
    on lazy modules and their limitations.

    Args:
        out_channels (int): Number of channels produced by the convolution
        kernel_size (int or tuple): Size of the convolving kernel
        stride (int or tuple, optional): Stride of the convolution. Default: 1
        padding (int or tuple, optional): Zero-padding added to both sides of
            the input. Default: 0
        dilation (int or tuple, optional): Spacing between kernel
            elements. Default: 1
        groups (int, optional): Number of blocked connections from input
            channels to output channels. Default: 1
        bias (bool, optional): If ``True``, adds a learnable bias to the
            output. Default: ``True``
        padding_mode (str, optional): ``'zeros'``, ``'reflect'``,
            ``'replicate'`` or ``'circular'``. Default: ``'zeros'``

    .. seealso:: :class:`torch.nn.Conv1d` and :class:`torch.nn.modules.lazy.LazyModuleMixin`
    """
    cls_to_become = ...
    def __init__(self, out_channels: int, kernel_size: _size_1_t, stride: _size_1_t = ..., padding: _size_1_t = ..., dilation: _size_1_t = ..., groups: int = ..., bias: bool = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    


class LazyConv2d(_LazyConvXdMixin, Conv2d):
    r"""A :class:`torch.nn.Conv2d` module with lazy initialization of the ``in_channels`` argument.

    The ``in_channels`` argument of the :class:`Conv2d` that is inferred from the ``input.size(1)``.
    The attributes that will be lazily initialized are `weight` and `bias`.

    Check the :class:`torch.nn.modules.lazy.LazyModuleMixin` for further documentation
    on lazy modules and their limitations.

    Args:
        out_channels (int): Number of channels produced by the convolution
        kernel_size (int or tuple): Size of the convolving kernel
        stride (int or tuple, optional): Stride of the convolution. Default: 1
        padding (int or tuple, optional): Zero-padding added to both sides of
            the input. Default: 0
        dilation (int or tuple, optional): Spacing between kernel
            elements. Default: 1
        groups (int, optional): Number of blocked connections from input
            channels to output channels. Default: 1
        bias (bool, optional): If ``True``, adds a learnable bias to the
            output. Default: ``True``
        padding_mode (str, optional): ``'zeros'``, ``'reflect'``,
            ``'replicate'`` or ``'circular'``. Default: ``'zeros'``

    .. seealso:: :class:`torch.nn.Conv2d` and :class:`torch.nn.modules.lazy.LazyModuleMixin`
    """
    cls_to_become = ...
    def __init__(self, out_channels: int, kernel_size: _size_2_t, stride: _size_2_t = ..., padding: _size_2_t = ..., dilation: _size_2_t = ..., groups: int = ..., bias: bool = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    


class LazyConv3d(_LazyConvXdMixin, Conv3d):
    r"""A :class:`torch.nn.Conv3d` module with lazy initialization of the ``in_channels`` argument.

    The ``in_channels`` argument of the :class:`Conv3d` that is inferred from
    the ``input.size(1)``.
    The attributes that will be lazily initialized are `weight` and `bias`.

    Check the :class:`torch.nn.modules.lazy.LazyModuleMixin` for further documentation
    on lazy modules and their limitations.

    Args:
        out_channels (int): Number of channels produced by the convolution
        kernel_size (int or tuple): Size of the convolving kernel
        stride (int or tuple, optional): Stride of the convolution. Default: 1
        padding (int or tuple, optional): Zero-padding added to both sides of
            the input. Default: 0
        dilation (int or tuple, optional): Spacing between kernel
            elements. Default: 1
        groups (int, optional): Number of blocked connections from input
            channels to output channels. Default: 1
        bias (bool, optional): If ``True``, adds a learnable bias to the
            output. Default: ``True``
        padding_mode (str, optional): ``'zeros'``, ``'reflect'``,
            ``'replicate'`` or ``'circular'``. Default: ``'zeros'``

    .. seealso:: :class:`torch.nn.Conv3d` and :class:`torch.nn.modules.lazy.LazyModuleMixin`
    """
    cls_to_become = ...
    def __init__(self, out_channels: int, kernel_size: _size_3_t, stride: _size_3_t = ..., padding: _size_3_t = ..., dilation: _size_3_t = ..., groups: int = ..., bias: bool = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    


class LazyConvTranspose1d(_LazyConvXdMixin, ConvTranspose1d):
    r"""A :class:`torch.nn.ConvTranspose1d` module with lazy initialization of the ``in_channels`` argument.

    The ``in_channels`` argument of the :class:`ConvTranspose1d` that is inferred from
    the ``input.size(1)``.
    The attributes that will be lazily initialized are `weight` and `bias`.

    Check the :class:`torch.nn.modules.lazy.LazyModuleMixin` for further documentation
    on lazy modules and their limitations.

    Args:
        out_channels (int): Number of channels produced by the convolution
        kernel_size (int or tuple): Size of the convolving kernel
        stride (int or tuple, optional): Stride of the convolution. Default: 1
        padding (int or tuple, optional): ``dilation * (kernel_size - 1) - padding`` zero-padding
            will be added to both sides of the input. Default: 0
        output_padding (int or tuple, optional): Additional size added to one side
            of the output shape. Default: 0
        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1
        bias (bool, optional): If ``True``, adds a learnable bias to the output. Default: ``True``
        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1

    .. seealso:: :class:`torch.nn.ConvTranspose1d` and :class:`torch.nn.modules.lazy.LazyModuleMixin`
    """
    cls_to_become = ...
    def __init__(self, out_channels: int, kernel_size: _size_1_t, stride: _size_1_t = ..., padding: _size_1_t = ..., output_padding: _size_1_t = ..., groups: int = ..., bias: bool = ..., dilation: _size_1_t = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    


class LazyConvTranspose2d(_LazyConvXdMixin, ConvTranspose2d):
    r"""A :class:`torch.nn.ConvTranspose2d` module with lazy initialization of the ``in_channels`` argument.

    The ``in_channels`` argument of the :class:`ConvTranspose2d` is inferred from
    the ``input.size(1)``.
    The attributes that will be lazily initialized are `weight` and `bias`.

    Check the :class:`torch.nn.modules.lazy.LazyModuleMixin` for further documentation
    on lazy modules and their limitations.

    Args:
        out_channels (int): Number of channels produced by the convolution
        kernel_size (int or tuple): Size of the convolving kernel
        stride (int or tuple, optional): Stride of the convolution. Default: 1
        padding (int or tuple, optional): ``dilation * (kernel_size - 1) - padding`` zero-padding
            will be added to both sides of each dimension in the input. Default: 0
        output_padding (int or tuple, optional): Additional size added to one side
            of each dimension in the output shape. Default: 0
        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1
        bias (bool, optional): If ``True``, adds a learnable bias to the output. Default: ``True``
        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1

    .. seealso:: :class:`torch.nn.ConvTranspose2d` and :class:`torch.nn.modules.lazy.LazyModuleMixin`
    """
    cls_to_become = ...
    def __init__(self, out_channels: int, kernel_size: _size_2_t, stride: _size_2_t = ..., padding: _size_2_t = ..., output_padding: _size_2_t = ..., groups: int = ..., bias: bool = ..., dilation: int = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    


class LazyConvTranspose3d(_LazyConvXdMixin, ConvTranspose3d):
    r"""A :class:`torch.nn.ConvTranspose3d` module with lazy initialization of the ``in_channels`` argument.

    The ``in_channels`` argument of the :class:`ConvTranspose3d` is inferred from
    the ``input.size(1)``.
    The attributes that will be lazily initialized are `weight` and `bias`.

    Check the :class:`torch.nn.modules.lazy.LazyModuleMixin` for further documentation
    on lazy modules and their limitations.

    Args:
        out_channels (int): Number of channels produced by the convolution
        kernel_size (int or tuple): Size of the convolving kernel
        stride (int or tuple, optional): Stride of the convolution. Default: 1
        padding (int or tuple, optional): ``dilation * (kernel_size - 1) - padding`` zero-padding
            will be added to both sides of each dimension in the input. Default: 0
        output_padding (int or tuple, optional): Additional size added to one side
            of each dimension in the output shape. Default: 0
        groups (int, optional): Number of blocked connections from input channels to output channels. Default: 1
        bias (bool, optional): If ``True``, adds a learnable bias to the output. Default: ``True``
        dilation (int or tuple, optional): Spacing between kernel elements. Default: 1

    .. seealso:: :class:`torch.nn.ConvTranspose3d` and :class:`torch.nn.modules.lazy.LazyModuleMixin`
    """
    cls_to_become = ...
    def __init__(self, out_channels: int, kernel_size: _size_3_t, stride: _size_3_t = ..., padding: _size_3_t = ..., output_padding: _size_3_t = ..., groups: int = ..., bias: bool = ..., dilation: _size_3_t = ..., padding_mode: str = ..., device=..., dtype=...) -> None:
        ...
    


