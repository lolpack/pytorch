"""
This type stub file was generated by pyright.
"""

import torch
from typing import Callable, Optional
from torch import Tensor

decomposition_table = ...
decomposition_table_for_jvp: dict[torch._ops.OperatorBase, Callable] = ...
register_decomposition = ...
aten = ...
def maybe_register_decomposition(op): # -> Callable[..., Callable[..., Any] | Any]:
    ...

decomposition_table_for_jvp = ...
def register_decomposition_for_jvp(fn): # -> Callable[[Callable[_P, _T]], Callable[_P, _T]]:
    ...

@maybe_register_decomposition(aten.trace.default)
def trace(self: Tensor) -> Tensor:
    ...

@maybe_register_decomposition(aten.log_sigmoid_forward.default)
def log_sigmoid_forward(self: Tensor) -> tuple[Tensor, Tensor]:
    ...

def recompute_mean_var(input: Tensor, rstd: Tensor, inner_dim_indices: list[int], keepdim: bool): # -> tuple[Tensor, Tensor]:
    ...

@register_decomposition_for_jvp(aten.native_layer_norm_backward)
def native_layer_norm_backward(grad_out: Tensor, input: Tensor, normalized_shape: list[int], mean: Tensor, rstd: Tensor, weight: Optional[Tensor], bias: Optional[Tensor], output_mask: list[bool]) -> tuple[Optional[Tensor], Optional[Tensor], Optional[Tensor]]:
    ...

def prod(x: list[int]): # -> int:
    ...

@register_decomposition_for_jvp(aten.native_batch_norm_backward)
def native_batch_norm_backward(grad_out: Tensor, input: Tensor, weight: Optional[Tensor], running_mean: Optional[Tensor], running_var: Optional[Tensor], save_mean: Optional[Tensor], save_invstd: Optional[Tensor], train: bool, eps: float, output_mask: list[bool]) -> tuple[Tensor, Optional[Tensor], Optional[Tensor]]:
    ...

@register_decomposition_for_jvp(aten.batch_norm_backward)
def batch_norm_backward(grad_out: Tensor, input: Tensor, weight: Tensor, running_mean: Optional[Tensor], running_var: Optional[Tensor], save_mean: Optional[Tensor], save_var: Optional[Tensor], update: bool, eps: float, output_mask: list[bool], reserve: Tensor) -> tuple[Tensor, Optional[Tensor], Optional[Tensor]]:
    ...

