"""
This type stub file was generated by pyright.
"""

import inspect
import torch
import torch.library
import torch._decomp.decompositions
import torch._refs
from collections import defaultdict
from collections.abc import Sequence
from functools import lru_cache, partial, wraps
from itertools import chain
from typing import Callable, Optional, TYPE_CHECKING, TypeVar, Union
from typing_extensions import ParamSpec
from torch.export.decomp_utils import CustomDecompTable
from torch._ops import HigherOrderOperator, OpOverload, OpOverloadPacket, OperatorBase
from torch._prims_common import CustomOutParamAnnotation
from torch._subclasses.functional_tensor import FunctionalTensor
from torch.utils import _pytree as pytree

if TYPE_CHECKING:
    ...
__all__ = ["decomposition_table", "pre_autograd_decomposition_table", "meta_table", "register_decomposition", "get_decompositions", "core_aten_decompositions", "_should_decompose_because_unsafe_op"]
_T = TypeVar("_T")
_P = ParamSpec("_P")
global_decomposition_table: dict[str, dict[torch._ops.OperatorBase, Callable]] = ...
decomposition_table = ...
pre_autograd_decomposition_table = ...
meta_table = ...
def register_decomposition(aten_op, registry=..., *, type=..., unsafe=...) -> Callable[[Callable[_P, _T]], Callable[_P, _T]]:
    """
    A decorator to register a function as a decomposition to the Python
    decomposition table.  Use it like this::

        @register_decomposition(torch.ops.aten.clamp_min)
        def clamp_min(x):
            return torch.clamp(self, min=min)

    If you are writing a new decomposition, consider contributing it
    directly to PyTorch in torch._decomp.decompositions.

    This API is experimental; we are almost certainly going to extend
    the API when we make decompositions eligible for use in transforms (e.g.,
    autograd) and not just backend tracing, where we then need to know if a
    decomposition can be used to simulate a transform.

    By default, we also will register it to the Meta key of dispatcher,
    and replace the c++ Meta implementation if there is already one.

    unsafe kwarg is for reuse of this function for registering non-function
    things
    """
    ...

def get_decompositions(aten_ops: Sequence[Union[torch._ops.OperatorBase, OpOverloadPacket]], type: str = ...) -> dict[torch._ops.OperatorBase, Callable]:
    """
    Retrieve a dictionary of decompositions corresponding to the list of
    operator overloads and overload packets passed as input.  Overload
    packets will include all decomposed overloads in the packet.  If there is
    no decomposition for a requested operator, it is silently ignored.

    This API is experimental; we are almost certainly going to give an alternate,
    more recommended formulation, where a user provides the set of operators
    they know how to implement, and we provide decompositions for everything
    not in this set.
    """
    ...

def remove_decompositions(decompositions: dict[torch._ops.OperatorBase, Callable], aten_ops: Sequence[Union[OpOverload, OpOverloadPacket]]) -> None:
    """
    Given a dictionary of decompositions obtained from get_decompositions(), removes
    operators associated with a list of operator overloads and overload packets passed
    as input. If the decomposition dictionary does not contain a decomposition that is
    specified to be removed, it is silently ignored.
    """
    ...

def core_aten_decompositions() -> CustomDecompTable:
    ...

