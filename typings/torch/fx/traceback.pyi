"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from enum import Enum
from typing import Any, Optional, Union
from ._compatibility import compatibility
from .graph import Graph
from .node import Node

__all__ = ["preserve_node_meta", "has_preserved_node_meta", "set_stack_trace", "set_grad_fn_seq_nr", "reset_grad_fn_seq_nr", "format_stack", "set_current_meta", "get_current_meta", "NodeSource", "NodeSourceAction", "get_graph_provenance_json"]
current_meta: dict[str, Any] = ...
should_preserve_node_meta = ...
@compatibility(is_backward_compatible=False)
class NodeSourceAction(Enum):
    CREATE = ...
    REPLACE = ...


@compatibility(is_backward_compatible=False)
class NodeSource:
    """
    NodeSource is a data structure that contains the provenance information of a node.
    If node `a` is created from node `b`, then `a.meta["from_node"]` may contain NodeSource(b).
    """
    class NodeInfo:
        def __init__(self, name: str, target: str, graph_id: int) -> None:
            ...
        
    
    
    pass_name: str
    action: list[NodeSourceAction]
    from_node: list[NodeSource]
    node_info: Optional[NodeInfo]
    def __init__(self, node: Optional[Node], pass_name: str = ..., action: Optional[Union[NodeSourceAction, list[NodeSourceAction]]] = ...) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    @property
    def target(self) -> str:
        ...
    
    @property
    def graph_id(self) -> int:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def print_readable(self, indent=...): # -> str:
        ...
    
    def to_dict(self) -> dict:
        ...
    


@compatibility(is_backward_compatible=False)
@contextmanager
def preserve_node_meta(enable=...): # -> Generator[None, Any, None]:
    ...

@compatibility(is_backward_compatible=False)
def set_stack_trace(stack: list[str]): # -> None:
    ...

@compatibility(is_backward_compatible=False)
def set_grad_fn_seq_nr(seq_nr): # -> None:
    ...

@compatibility(is_backward_compatible=False)
def reset_grad_fn_seq_nr(): # -> None:
    ...

@compatibility(is_backward_compatible=False)
def format_stack() -> list[str]:
    ...

@compatibility(is_backward_compatible=False)
def has_preserved_node_meta() -> bool:
    ...

@compatibility(is_backward_compatible=False)
@contextmanager
def set_current_meta(node, pass_name=...): # -> Generator[None, Any, None]:
    ...

@compatibility(is_backward_compatible=False)
def get_current_meta() -> dict[str, Any]:
    ...

@compatibility(is_backward_compatible=False)
def get_graph_provenance_json(graph: Graph) -> dict[str, Any]:
    """
    Given an fx.Graph, return a json that contains the provenance information of each node.
    """
    ...

