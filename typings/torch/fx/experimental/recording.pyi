"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import Any, Callable, Optional, Union

log = ...
trace_shape_events_log = ...
__all__ = ["ShapeEnvEvent", "record_shapeenv_event", "replay_shape_env_events", "FakeTensorMeta", "shape_env_check_state_equal", "NotEqualError"]
@dataclass
class ShapeEnvEvent:
    f: Callable
    args: Optional[list[Any]] = ...
    kwargs: Optional[dict[str, Any]] = ...
    tracked_fakes: Optional[list[Any]] = ...
    name: Optional[str] = ...
    def run(self, shape_env=...) -> Any:
        ...
    
    def __str__(self) -> str:
        ...
    
    def is_create_fx_call_function(self) -> bool:
        ...
    
    def is_evaluate_expr(self) -> bool:
        ...
    
    def is_defer_runtime_assert(self) -> bool:
        ...
    


NEST = ...
def record_shapeenv_event(*, save_tracked_fakes: bool = ..., name: Optional[str] = ...) -> Callable:
    ...

def replay_shape_env_events(events):
    ...

@dataclass
class FakeTensorMeta:
    tensor_size: tuple[Union[int, torch.SymInt], ...]
    tensor_stride: tuple[Union[int, torch.SymInt], ...]
    tensor_storage_offset: Union[int, torch.SymInt]
    is_nested: bool
    def size(self) -> tuple[Union[int, torch.SymInt], ...]:
        ...
    
    def stride(self) -> tuple[Union[int, torch.SymInt], ...]:
        ...
    
    def storage_offset(self) -> Union[int, torch.SymInt]:
        ...
    
    def dim(self) -> int:
        ...
    
    @staticmethod
    def from_fake(fake) -> FakeTensorMeta:
        ...
    


def shape_env_check_state_equal(env1, env2, non_state_variable_names, map_value): # -> None:
    ...

class NotEqualError(Exception):
    def __init__(self, msg: str, mismatched: list[tuple[str, str, str]]) -> None:
        ...
    


