"""
This type stub file was generated by pyright.
"""

import torch.fx
from typing import Callable, Optional, Union

__all__ = ["FoldedGraphModule", "get_unique_attr_name_in_module", "split_const_subgraphs"]
class FoldedGraphModule(torch.fx.GraphModule):
    """
    FoldedGraphModule is a GraphModule which also contains another
    `const_subgraph_module` representing a subgraph which has all const attr
    inputs and which can be run once before running the main standard
    `graph`. The `const_output_names` are the ordered list names of attrs which
    represent what each respective output from the const_subgraph should be set
    on which attrs.
    """
    def __init__(self, root: torch.nn.Module, graph: torch.fx.Graph, const_subgraph: Optional[torch.fx.Graph] = ..., fx_const_folded_attrs_name: Optional[str] = ..., device_for_folded_attrs: str = ...) -> None:
        ...
    
    def __call__(self, *args, **kwargs): # -> Any:
        ...
    
    def run_folding(self): # -> None:
        ...
    


def get_unique_attr_name_in_module(mod_traced: torch.fx.GraphModule, name: str) -> str:
    """
    Make sure the name is unique (in a module) and can represents an attr.
    """
    ...

def split_const_subgraphs(module: Union[torch.nn.Module, torch.fx.GraphModule], skip_folding_node_fn: Optional[Callable[[torch.fx.Node], bool]] = ..., device_for_folded_attrs: str = ...) -> FoldedGraphModule:
    """
    Looks through `module` for any nodes that have all constant attribute inputs
    and separates them out into their own constant subgraph, and returns a
    FoldedGraphModule which runs that constant subgraph on the first run to set
    attributes on the module prior to running the non-constant portion of the
    graph.
    """
    ...

