"""
This type stub file was generated by pyright.
"""

import torch
import torch.fx
import pydot
from typing import Optional, TYPE_CHECKING
from torch.fx._compatibility import compatibility

if TYPE_CHECKING:
    HAS_PYDOT = ...
else:
    ...
__all__ = ["FxGraphDrawer"]
_COLOR_MAP = ...
_HASH_COLOR_MAP = ...
_WEIGHT_TEMPLATE = ...
if HAS_PYDOT:
    @compatibility(is_backward_compatible=False)
    class FxGraphDrawer:
        """
        Visualize a torch.fx.Graph with graphviz
        Basic usage:
            g = FxGraphDrawer(symbolic_traced, "resnet18")
            g.get_dot_graph().write_svg("a.svg")
        """
        def __init__(self, graph_module: torch.fx.GraphModule, name: str, ignore_getattr: bool = ..., ignore_parameters_and_buffers: bool = ..., skip_node_names_in_args: bool = ..., parse_stack_trace: bool = ..., dot_graph_shape: Optional[str] = ..., normalize_args: bool = ...) -> None:
            ...
        
        def get_dot_graph(self, submod_name=...) -> pydot.Dot:
            """
            Visualize a torch.fx.Graph with graphviz
            Example:
                >>> # xdoctest: +REQUIRES(module:pydot)
                >>> # xdoctest: +REQUIRES(module:ubelt)
                >>> # define module
                >>> class MyModule(torch.nn.Module):
                >>>     def __init__(self) -> None:
                >>>         super().__init__()
                >>>         self.linear = torch.nn.Linear(4, 5)
                >>>     def forward(self, x):
                >>>         return self.linear(x).clamp(min=0.0, max=1.0)
                >>> module = MyModule()
                >>> # trace the module
                >>> symbolic_traced = torch.fx.symbolic_trace(module)
                >>> # setup output file
                >>> import ubelt as ub
                >>> dpath = ub.Path.appdir("torch/tests/FxGraphDrawer").ensuredir()
                >>> fpath = dpath / "linear.svg"
                >>> # draw the graph
                >>> g = FxGraphDrawer(symbolic_traced, "linear")
                >>> g.get_dot_graph().write_svg(fpath)
            """
            ...
        
        def get_main_dot_graph(self) -> pydot.Dot:
            ...
        
        def get_submod_dot_graph(self, submod_name) -> pydot.Dot:
            ...
        
        def get_all_dot_graphs(self) -> dict[str, pydot.Dot]:
            ...
        
    
    
else:
    ...
