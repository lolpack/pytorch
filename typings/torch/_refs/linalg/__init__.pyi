"""
This type stub file was generated by pyright.
"""

import torch
import torch._prims as prims
import torch._prims_common as utils
import torch._refs as refs
import torch._refs.linalg as linalg
import operator
from functools import partial
from typing import Optional, Union
from torch import Tensor
from torch._prims_common import Dim, DimsType, ELEMENTWISE_TYPE_PROMOTION_KIND, IntLike, TensorLikeType, check_fp_or_complex, check_is_matrix
from torch._prims_common.wrappers import _maybe_convert_to_dtype, elementwise_type_promotion_wrapper, out_wrapper
from torch._decomp import register_decomposition
from torch._decomp.decompositions import pw_cast_for_opmath

__all__ = ["diagonal", "matrix_norm", "norm", "svd", "svdvals", "vector_norm", "vecdot", "cross"]
@register_decomposition(torch._ops.ops.aten.linalg_cross)
@out_wrapper()
@pw_cast_for_opmath
def cross(a: Tensor, b: Tensor, dim: int = ...):
    ...

def diagonal(input: TensorLikeType, *, offset: int = ..., dim1: int = ..., dim2: int = ...) -> TensorLikeType:
    ...

@register_decomposition(torch._ops.ops.aten.linalg_vector_norm)
@out_wrapper(exact_dtype=True)
def vector_norm(x: TensorLikeType, ord: Union[float, int] = ..., dim: Optional[DimsType] = ..., keepdim: bool = ..., *, dtype: Optional[torch.dtype] = ...) -> Tensor:
    ...

@out_wrapper(exact_dtype=True)
def matrix_norm(A: TensorLikeType, ord: Union[float, str] = ..., dim: DimsType = ..., keepdim: bool = ..., *, dtype: Optional[torch.dtype] = ...) -> TensorLikeType:
    ...

@out_wrapper(exact_dtype=True)
def norm(A: TensorLikeType, ord: Optional[Union[float, str]] = ..., dim: Optional[DimsType] = ..., keepdim: bool = ..., *, dtype: Optional[torch.dtype] = ...) -> TensorLikeType:
    ...

@out_wrapper("U", "S", "Vh", exact_dtype=True)
def svd(A: TensorLikeType, full_matrices: bool = ...) -> tuple[Tensor, Tensor, Tensor]:
    ...

@out_wrapper(exact_dtype=True)
def svdvals(A: TensorLikeType) -> Tensor:
    ...

@out_wrapper()
@elementwise_type_promotion_wrapper(type_promoting_args=("x", "y"), type_promotion_kind=ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)
def vecdot(x: Tensor, y: Tensor, dim: int = ...) -> Tensor:
    ...

