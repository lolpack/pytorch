"""
This type stub file was generated by pyright.
"""

import contextlib
from abc import ABC, abstractmethod
from typing import Any
from torch._C._functorch import CInterpreter

class FuncTorchInterpreter(ABC):
    def __init__(self, cptr: Any) -> None:
        ...
    
    @abstractmethod
    def process(self, op, args, kwargs): # -> None:
        ...
    
    def lower(self): # -> _GeneratorContextManager[None, None, None]:
        ...
    
    def level(self): # -> Any:
        ...
    
    def key(self): # -> Any:
        ...
    
    def get_state(self):
        ...
    
    def check_state(self, state):
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    


@contextlib.contextmanager
def temporarily_pop_interpreter_stack(): # -> Generator[None, Any, None]:
    ...

@contextlib.contextmanager
def temporarily_clear_interpreter_stack(): # -> Generator[list[Any], Any, None]:
    ...

@contextlib.contextmanager
def temporarily_restore_interpreter_stack(stack): # -> Generator[None, Any, None]:
    ...

class VmapInterpreter(FuncTorchInterpreter):
    def __init__(self, cdata: CInterpreter) -> None:
        ...
    
    def process(self, op, args, kwargs):
        ...
    
    def batch_size(self): # -> int:
        ...
    
    def randomness(self): # -> Literal['error', 'same', 'different']:
        ...
    
    def get_state(self): # -> tuple[Any, Any, Literal['error', 'same', 'different']]:
        ...
    


@contextlib.contextmanager
def nested(*contexts): # -> Generator[tuple[Any, ...], Any, None]:
    ...

class GradInterpreter(FuncTorchInterpreter):
    def __init__(self, cdata: CInterpreter) -> None:
        ...
    
    def lift(self, args, kwargs): # -> tuple[PyTree, PyTree]:
        ...
    
    def process(self, op, args, kwargs):
        ...
    
    def lower(self): # -> _GeneratorContextManager[tuple[Any, ...], None, None] | _GeneratorContextManager[None, None, None]:
        ...
    
    def prev_grad_mode(self): # -> bool:
        ...
    
    def get_state(self): # -> tuple[Any, Any, bool]:
        ...
    


class JvpInterpreter(FuncTorchInterpreter):
    def __init__(self, cdata: CInterpreter) -> None:
        ...
    
    def lift(self, args, kwargs): # -> tuple[PyTree, PyTree]:
        ...
    
    def process(self, op, args, kwargs):
        ...
    
    def lower(self): # -> _GeneratorContextManager[tuple[Any, ...], None, None] | _GeneratorContextManager[None, None, None]:
        ...
    
    def prev_fwd_grad_mode(self): # -> bool:
        ...
    
    def get_state(self): # -> tuple[Any, Any, bool]:
        ...
    


class FunctionalizeInterpreter(FuncTorchInterpreter):
    def __init__(self, cdata: CInterpreter) -> None:
        ...
    
    def process(self, op, args, kwargs):
        ...
    
    def functionalize_add_back_views(self): # -> bool:
        ...
    
    def get_state(self): # -> tuple[Any, Any]:
        ...
    


def coerce_cinterpreter(cinterpreter: CInterpreter) -> FuncTorchInterpreter:
    ...

def retrieve_current_functorch_interpreter() -> FuncTorchInterpreter:
    ...

def retrieve_all_functorch_interpreters() -> list[FuncTorchInterpreter]:
    ...

def compare_functorch_state(states: list[tuple[Any, ...]]) -> bool:
    ...

def dispatch_functorch(op, args, kwargs): # -> None:
    ...

