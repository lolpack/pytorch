"""
This type stub file was generated by pyright.
"""

import networkx as nx
from typing import Optional
from torch.fx import Graph, Node

class GraphInfoProvider:
    """
    This class provides information about the graph, such as the nodes, edges, and their runtime and memory requirements.
    It also provides methods to create graphs from the information provided.
    """
    __RECOMPUTABLE_NODE_ONLY_GRAPH = ...
    __RECOMPUTABLE_NODE_ONLY_GRAPH_WITH_LARGER_GRAPH_CONTEXT = ...
    __FULL_NX_JOINT_GRAPH = ...
    __SIMPLIFIED_FX_JOINT_GRAPH = ...
    def __init__(self, graph_nodes_in_order: list[str], graph_edges: list[tuple[str, str]], all_recomputable_banned_nodes: list[str], all_node_runtimes: Optional[dict[str, float]] = ..., all_node_memories: Optional[dict[str, float]] = ..., recorded_knapsack_input_memories: Optional[list[float]] = ..., recorded_knapsack_input_runtimes: Optional[list[float]] = ..., joint_graph: Optional[Graph] = ...) -> None:
        ...
    
    @classmethod
    def inialize_from_graph(cls, joint_graph: Graph, all_recomputable_banned_nodes: list[Node], recorded_knapsack_input_memories: list[float], recorded_knapsack_input_runtimes: list[float]) -> GraphInfoProvider:
        """
        Enables initialization from a joint graph.
        """
        ...
    
    @property
    def recomputable_node_only_graph(self) -> nx.DiGraph:
        ...
    
    @property
    def recomputable_node_only_graph_with_larger_graph_context(self) -> nx.DiGraph:
        ...
    
    @property
    def full_joint_nx_graph(self) -> nx.DiGraph:
        ...
    
    @property
    def simplified_fx_joint_graph(self) -> Graph:
        ...
    
    def get_non_ac_peak_memory(self) -> float:
        ...
    
    def get_theoretical_max_runtime(self) -> float:
        ...
    
    def get_knapsack_memory_input(self) -> list[float]:
        ...
    
    def get_knapsack_runtime_input(self) -> list[float]:
        ...
    


