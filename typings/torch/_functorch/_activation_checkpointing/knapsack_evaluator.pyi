"""
This type stub file was generated by pyright.
"""

from typing import Callable
from torch._functorch._activation_checkpointing.graph_info_provider import GraphInfoProvider

class KnapsackEvaluator:
    """
    This class evaluates the theoretical runtime and peak memory usage of a given checkpointing strategy.
    It takes in a graph and a list of nodes that are saved and recomputed, and then simulates the
    backward pass to calculate the peak memory usage.
    """
    def __init__(self, graph_info_provider: GraphInfoProvider) -> None:
        ...
    
    def evaluate_knapsack_output(self, saved_nodes_idxs: list[int], recomputable_node_idxs: list[int], account_for_backward_pass: bool = ...) -> dict[str, float]:
        """
        Evaluate the theoretical runtime and peak memory usage of a given checkpointing strategy.
        Args:
        - saved_nodes_idxs (List[int]): The indices of nodes that are saved.
        - recomputable_node_idxs (List[int]): The indices of nodes that need to be recomputed.
        """
        ...
    
    def evaluate_distribution_of_results_for_knapsack_algo(self, knapsack_algo: Callable[[list[float], list[float], float], tuple[float, list[int], list[int]]], memory_budget_values: list[float]) -> list[dict[str, float]]:
        """
        Evaluates the distribution of results for a given knapsack algorithm.
        Args:
            knapsack_algo (Callable): The knapsack algorithm to use for evaluation.
            memory_budget_values (List[float]): A list of memory budgets to evaluate.
        """
        ...
    
    def get_knee_point_memory_budget(self, knapsack_algo: Callable[[list[float], list[float], float], tuple[float, list[int], list[int]]], max_mem_budget: float = ..., min_mem_budget: float = ..., iterations: int = ...) -> float:
        """
        Finds the memory budget at the knee point in the Pareto frontier.

        The knee point is defined as the point where the trade-off between
        runtime and memory usage is optimal.

        Args:
            knapsack_algo (callable): Knapsack algorithm to use for evaluation.
            max_mem_budget (float, optional): Maximum memory budget. Defaults to 0.1.
            min_mem_budget (float, optional): Minimum memory budget. Defaults to 0.001.
            iterations (int, optional): Number of memory budgets to evaluate. Defaults to 100.

        Returns:
            float: Memory budget at the knee point.
        """
        ...
    


