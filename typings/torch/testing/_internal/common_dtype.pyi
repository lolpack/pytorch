"""
This type stub file was generated by pyright.
"""

import torch

class _dispatch_dtypes(tuple):
    __slots__ = ...
    def __add__(self, other): # -> _dispatch_dtypes:
        ...
    


_empty_types = ...
def empty_types(): # -> _dispatch_dtypes:
    ...

_floating_types = ...
def floating_types(): # -> _dispatch_dtypes:
    ...

_floating_types_and_half = ...
def floating_types_and_half(): # -> _dispatch_dtypes:
    ...

def floating_types_and(*dtypes): # -> _dispatch_dtypes:
    ...

_floating_and_complex_types = ...
def floating_and_complex_types(): # -> _dispatch_dtypes:
    ...

def floating_and_complex_types_and(*dtypes): # -> _dispatch_dtypes:
    ...

_double_types = ...
def double_types(): # -> _dispatch_dtypes:
    ...

_integral_types = ...
def integral_types(): # -> _dispatch_dtypes:
    ...

def integral_types_and(*dtypes): # -> _dispatch_dtypes:
    ...

_all_types = ...
def all_types(): # -> _dispatch_dtypes:
    ...

def all_types_and(*dtypes): # -> _dispatch_dtypes:
    ...

_complex_types = ...
def complex_types(): # -> _dispatch_dtypes:
    ...

def complex_types_and(*dtypes): # -> _dispatch_dtypes:
    ...

_all_types_and_complex = ...
def all_types_and_complex(): # -> _dispatch_dtypes:
    ...

def all_types_and_complex_and(*dtypes): # -> _dispatch_dtypes:
    ...

_all_types_and_half = ...
def all_types_and_half(): # -> _dispatch_dtypes:
    ...

_float8_types = ...
def float8_types(): # -> _dispatch_dtypes:
    ...

def float8_types_and(*dtypes): # -> _dispatch_dtypes:
    ...

def all_types_complex_float8_and(*dtypes): # -> _dispatch_dtypes:
    ...

def custom_types(*dtypes): # -> _dispatch_dtypes:
    """Create a list of arbitrary dtypes"""
    ...

def get_all_dtypes(include_half=..., include_bfloat16=..., include_bool=..., include_complex=..., include_complex32=..., include_qint=...) -> list[torch.dtype]:
    ...

def get_all_math_dtypes(device) -> list[torch.dtype]:
    ...

def get_all_complex_dtypes(include_complex32=...) -> list[torch.dtype]:
    ...

def get_all_int_dtypes() -> list[torch.dtype]:
    ...

def get_all_fp_dtypes(include_half=..., include_bfloat16=...) -> list[torch.dtype]:
    ...

def get_all_qint_dtypes() -> list[torch.dtype]:
    ...

float_to_corresponding_complex_type_map = ...
