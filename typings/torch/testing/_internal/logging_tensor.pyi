"""
This type stub file was generated by pyright.
"""

import torch
import logging
import contextlib
from typing import Optional
from collections.abc import Iterator
from torch.utils._python_dispatch import TorchDispatchMode

logger = ...
class LoggingTensor(torch.Tensor):
    elem: torch.Tensor
    __slots__ = ...
    context = contextlib.nullcontext
    @staticmethod
    def __new__(cls, elem, *args, **kwargs):
        ...
    
    def __repr__(self): # -> Any:
        ...
    
    @classmethod
    def __torch_dispatch__(cls, func, types, args=..., kwargs=...): # -> PyTree:
        ...
    


class LoggingTensorMode(TorchDispatchMode):
    def __torch_dispatch__(self, func, types, args=..., kwargs=...):
        ...
    


class LoggingTensorReentrant(LoggingTensor):
    context = ...


class LoggingTensorHandler(logging.Handler):
    def __init__(self, log_list: list[str], use_shortid_for_all_tensors: bool, with_type: bool, tracebacks_list: Optional[list]) -> None:
        ...
    
    def emit(self, record): # -> None:
        ...
    


def log_input(name: str, var: object) -> None:
    ...

class GatherTraceback(logging.Filter):
    def __init__(self, python=..., script=..., cpp=...) -> None:
        ...
    
    def filter(self, record): # -> Literal[True]:
        ...
    


@contextlib.contextmanager
def capture_logs(is_mode=..., python_tb=..., script_tb=..., cpp_tb=...) -> Iterator[list[str]]:
    ...

@contextlib.contextmanager
def capture_logs_with_logging_tensor_mode(python_tb=..., script_tb=..., cpp_tb=...): # -> Generator[list[str], Any, None]:
    ...

