"""
This type stub file was generated by pyright.
"""

import torch
import torch._logging._internal
from dataclasses import dataclass
from enum import IntEnum
from typing import Any, Optional, Union
from torch._export.passes.insert_custom_op_guards import OpProfile
from .exported_program import ExportedProgram

log = ...
class FailureType(IntEnum):
    MISSING_FAKE_KERNEL = ...
    DATA_DEPENDENT_ERROR = ...
    GUARD_ADDED = ...
    MISMATCHED_FAKE_KERNEL = ...
    def __str__(self) -> str:
        ...
    


def prettify_stack(stack: list[dict[str, str]], str_to_filename: dict[int, str]) -> str:
    ...

def prettify_frame_locals(loc: str, locals: dict[str, Any], symbols: dict[str, Any]) -> str:
    ...

def get_loc(filename: str, lineno: int) -> Optional[str]:
    ...

class FailureReport:
    def __init__(self, failure_type: FailureType, data: dict[str, Any], xfail: bool = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def print(self, str_to_filename: dict[int, str]) -> str:
        ...
    


class DraftExportReport:
    def __init__(self, failures: list[FailureReport], str_to_filename: dict[int, str], expressions_created: dict[int, dict[str, Any]], op_profiles: dict[str, set[OpProfile]]) -> None:
        ...
    
    def successful(self) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def apply_suggested_fixes(self) -> None:
        ...
    


@dataclass
class ExpressionCreatedNode:
    result_id: int
    argument_ids: list[int]
    record: dict[str, object]
    visited: bool = ...


class LogRecord:
    def __init__(self) -> None:
        ...
    
    def try_add(self, element: tuple[str, dict[str, str]]) -> bool:
        ...
    
    def get_log_count(self, element: tuple[str, dict[str, Any]]) -> int:
        ...
    


class CaptureStructuredTrace(torch._logging._internal.LazyTraceHandler):
    def __init__(self) -> None:
        ...
    
    def __enter__(self) -> CaptureStructuredTrace:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback) -> None:
        ...
    
    def emit(self, record: Any) -> None:
        ...
    


def draft_export(mod: torch.nn.Module, args: tuple[Any, ...], kwargs: Optional[dict[str, Any]] = ..., *, dynamic_shapes: Optional[Union[dict[str, Any], tuple[Any], list[Any]]] = ..., preserve_module_call_signature: tuple[str, ...] = ..., strict: bool = ..., pre_dispatch: bool = ...) -> ExportedProgram:
    ...

