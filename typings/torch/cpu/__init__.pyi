"""
This type stub file was generated by pyright.
"""

import torch
from contextlib import AbstractContextManager
from typing import Any, Optional, Union
from .. import device as _device
from . import amp

r"""
This package implements abstractions found in ``torch.cuda``
to facilitate writing device-agnostic code.
"""
__all__ = ["is_available", "is_initialized", "synchronize", "current_device", "current_stream", "stream", "set_device", "device_count", "Stream", "StreamContext", "Event"]
_device_t = Union[_device, str, int, None]
def is_available() -> bool:
    r"""Returns a bool indicating if CPU is currently available.

    N.B. This function only exists to facilitate device-agnostic code

    """
    ...

def synchronize(device: _device_t = ...) -> None:
    r"""Waits for all kernels in all streams on the CPU device to complete.

    Args:
        device (torch.device or int, optional): ignored, there's only one CPU device.

    N.B. This function only exists to facilitate device-agnostic code.
    """
    ...

class Stream:
    """
    N.B. This class only exists to facilitate device-agnostic code
    """
    def __init__(self, priority: int = ...) -> None:
        ...
    
    def wait_stream(self, stream) -> None:
        ...
    
    def record_event(self) -> None:
        ...
    
    def wait_event(self, event) -> None:
        ...
    


class Event:
    def query(self) -> bool:
        ...
    
    def record(self, stream=...) -> None:
        ...
    
    def synchronize(self) -> None:
        ...
    
    def wait(self, stream=...) -> None:
        ...
    


_default_cpu_stream = ...
_current_stream = ...
def current_stream(device: _device_t = ...) -> Stream:
    r"""Returns the currently selected :class:`Stream` for a given device.

    Args:
        device (torch.device or int, optional): Ignored.

    N.B. This function only exists to facilitate device-agnostic code

    """
    ...

class StreamContext(AbstractContextManager):
    r"""Context-manager that selects a given stream.

    N.B. This class only exists to facilitate device-agnostic code

    """
    cur_stream: Optional[Stream]
    def __init__(self, stream) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None:
        ...
    


def stream(stream: Stream) -> AbstractContextManager:
    r"""Wrapper around the Context-manager StreamContext that
    selects a given stream.

    N.B. This function only exists to facilitate device-agnostic code
    """
    ...

def device_count() -> int:
    r"""Returns number of CPU devices (not cores). Always 1.

    N.B. This function only exists to facilitate device-agnostic code
    """
    ...

def set_device(device: _device_t) -> None:
    r"""Sets the current device, in CPU we do nothing.

    N.B. This function only exists to facilitate device-agnostic code
    """
    ...

def current_device() -> str:
    r"""Returns current device for cpu. Always 'cpu'.

    N.B. This function only exists to facilitate device-agnostic code
    """
    ...

def is_initialized() -> bool:
    r"""Returns True if the CPU is initialized. Always True.

    N.B. This function only exists to facilitate device-agnostic code
    """
    ...

