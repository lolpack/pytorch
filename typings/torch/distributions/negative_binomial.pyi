"""
This type stub file was generated by pyright.
"""

import torch
from typing import Optional, Union
from torch import Tensor
from torch.distributions.distribution import Distribution
from torch.distributions.utils import lazy_property

__all__ = ["NegativeBinomial"]
class NegativeBinomial(Distribution):
    r"""
    Creates a Negative Binomial distribution, i.e. distribution
    of the number of successful independent and identical Bernoulli trials
    before :attr:`total_count` failures are achieved. The probability
    of success of each Bernoulli trial is :attr:`probs`.

    Args:
        total_count (float or Tensor): non-negative number of negative Bernoulli
            trials to stop, although the distribution is still valid for real
            valued count
        probs (Tensor): Event probabilities of success in the half open interval [0, 1)
        logits (Tensor): Event log-odds for probabilities of success
    """
    arg_constraints = ...
    support = ...
    def __init__(self, total_count: Union[Tensor, float], probs: Optional[Tensor] = ..., logits: Optional[Tensor] = ..., validate_args: Optional[bool] = ...) -> None:
        ...
    
    def expand(self, batch_shape, _instance=...): # -> Self:
        ...
    
    @property
    def mean(self) -> Tensor:
        ...
    
    @property
    def mode(self) -> Tensor:
        ...
    
    @property
    def variance(self) -> Tensor:
        ...
    
    @lazy_property
    def logits(self) -> Tensor:
        ...
    
    @lazy_property
    def probs(self) -> Tensor:
        ...
    
    @property
    def param_shape(self) -> torch.Size:
        ...
    
    def sample(self, sample_shape=...): # -> Tensor:
        ...
    
    def log_prob(self, value):
        ...
    


