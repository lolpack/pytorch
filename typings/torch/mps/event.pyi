"""
This type stub file was generated by pyright.
"""

class Event:
    r"""Wrapper around an MPS event.

    MPS events are synchronization markers that can be used to monitor the
    device's progress, to accurately measure timing, and to synchronize MPS streams.

    Args:
        enable_timing (bool, optional): indicates if the event should measure time
            (default: ``False``)
    """
    def __init__(self, enable_timing: bool = ...) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def record(self) -> None:
        r"""Records the event in the default stream."""
        ...
    
    def wait(self) -> None:
        r"""Makes all future work submitted to the default stream wait for this event."""
        ...
    
    def query(self) -> bool:
        r"""Returns True if all work currently captured by event has completed."""
        ...
    
    def synchronize(self) -> None:
        r"""Waits until the completion of all work currently captured in this event.
        This prevents the CPU thread from proceeding until the event completes.
        """
        ...
    
    def elapsed_time(self, end_event: Event) -> float:
        r"""Returns the time elapsed in milliseconds after the event was
        recorded and before the end_event was recorded.
        """
        ...
    


