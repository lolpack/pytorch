"""
This type stub file was generated by pyright.
"""

import torch
from dataclasses import dataclass
from typing import Optional
from torch.distributed.tensor._op_schema import OpSchema, StrategyType
from torch.distributed.tensor._ops.utils import register_op_strategy
from torch.distributed.tensor.placement_types import Partial

aten = ...
@dataclass
class MaskBuffer:
    data: Optional[torch.Tensor] = ...
    refcount: int = ...
    def materialize_mask(self, mask): # -> None:
        ...
    
    def release_mask(self): # -> None:
        ...
    
    def apply_mask(self, tensor): # -> None:
        ...
    


@dataclass(frozen=True)
class _MaskPartial(Partial):
    """
    A partial mask placement devised for rowwise sharded embedding op, where we need
    to mask and adjust the indices to the local embedding shard, embedding masking
    is a special type of the Partial placement

    NOTE: the lifecycle of this MaskPartial placement follows the corresponding DTensor
    lifecycle, i.e. the indices_mask would only be alive during the lifetime of the DTensor.
    """
    mask_buffer: MaskBuffer = ...
    offset_shape: Optional[torch.Size] = ...
    offset_dim: int = ...
    def __eq__(self, other: object) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self) -> str:
        """
        machine readable representation of the MaskPartial placement
        """
        ...
    
    def __str__(self) -> str:
        """
        human readable representation of the MaskPartial placement
        """
        ...
    


@register_op_strategy(aten.embedding.default)
def embedding_strategy(op_schema: OpSchema) -> StrategyType:
    """
    This strategy handles embedding op. We have two possible embedding shardings:
    rowwise and colwise
    """
    ...

@register_op_strategy(aten.embedding_dense_backward.default)
def embedding_dense_backward_strategy(op_schema: OpSchema) -> StrategyType:
    """
    This strategy handles embedding op. We have two possible embedding shardings:
    rowwise and colwise
    """
    ...

