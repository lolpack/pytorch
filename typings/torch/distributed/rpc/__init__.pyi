"""
This type stub file was generated by pyright.
"""

import logging
import os
import threading
import warnings
import torch
import torch.distributed as dist
import numbers
import torch.distributed.autograd as dist_autograd
from collections.abc import Generator
from datetime import timedelta
from urllib.parse import urlparse
from torch._C._distributed_c10d import Store
from torch._C._distributed_rpc import PyRRef, RemoteProfilerManager, RpcAgent, RpcBackendOptions, WorkerInfo, _DEFAULT_INIT_METHOD, _DEFAULT_RPC_TIMEOUT_SEC, _UNSET_RPC_TIMEOUT, _cleanup_python_rpc_handler, _delete_all_user_and_unforked_owner_rrefs, _destroy_rref_context, _disable_jit_rref_pickle, _disable_server_process_global_profiler, _enable_jit_rref_pickle, _enable_server_process_global_profiler, _get_current_rpc_agent, _invoke_remote_builtin, _invoke_remote_python_udf, _invoke_remote_torchscript, _invoke_rpc_builtin, _invoke_rpc_python_udf, _invoke_rpc_torchscript, _is_current_rpc_agent_set, _reset_current_rpc_agent, _rref_context_get_debug_info, _set_and_start_rpc_agent, _set_profiler_node_id, _set_rpc_timeout, enable_gil_profiling, get_rpc_timeout
from . import api, backend_registry, functions
from .api import *
from .backend_registry import BackendType
from .options import TensorPipeRpcBackendOptions
from .server_process_global_profiler import _server_process_global_profile

__all__ = ["is_available"]
logger = ...
_init_counter = ...
_init_counter_lock = ...
def is_available() -> bool:
    ...

if is_available() and not torch._C._rpc_init():
    ...
if is_available():
    _is_tensorpipe_available = ...
    rendezvous_iterator: Generator[tuple[Store, int, int], None, None]
    def init_rpc(name, backend=..., rank=..., world_size=..., rpc_backend_options=...): # -> None:
        r"""
        Initializes RPC primitives such as the local RPC agent
        and distributed autograd, which immediately makes the current
        process ready to send and receive RPCs.

        Args:
            name (str): a globally unique name of this node. (e.g.,
                ``Trainer3``, ``ParameterServer2``, ``Master``, ``Worker1``)
                Name can only contain number, alphabet, underscore, colon,
                and/or dash, and must be shorter than 128 characters.
            backend (BackendType, optional): The type of RPC backend
                implementation. Supported values is
                ``BackendType.TENSORPIPE`` (the default).
                See :ref:`rpc-backends` for more information.
            rank (int): a globally unique id/rank of this node.
            world_size (int): The number of workers in the group.
            rpc_backend_options (RpcBackendOptions, optional): The options
                passed to the RpcAgent constructor. It must be an agent-specific
                subclass of :class:`~torch.distributed.rpc.RpcBackendOptions`
                and contains agent-specific initialization configurations. By
                default, for all agents, it sets the default timeout to 60
                seconds and performs the rendezvous with an underlying process
                group initialized using ``init_method = "env://"``,
                meaning that environment variables ``MASTER_ADDR`` and
                ``MASTER_PORT`` need to be set properly. See
                :ref:`rpc-backends` for more information and find which options
                are available.
        """
        ...
    
