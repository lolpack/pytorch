"""
This type stub file was generated by pyright.
"""

import torch
from collections.abc import Iterable, Iterator
from typing import Union
from torch.distributed import ProcessGroup

__all__ = ["average_parameters", "get_params_to_average", "average_parameters_or_parameter_groups"]
def average_parameters(params: Iterator[torch.nn.Parameter], process_group: ProcessGroup): # -> None:
    """
    Averages all the given parameters.

    For allreduce efficiency, all the parameters are flattened into a contiguous buffer.
    Thus, it requires extra memory of the same size as the given parameters.
    """
    ...

def get_params_to_average(params: Union[Iterable[torch.nn.Parameter], Iterable[dict[str, torch.nn.Parameter]],]): # -> list[Any]:
    """
    Return a list of parameters that need to average.

    This filters out the parameters that do not contain any gradients.
    Args:
        params: The parameters of a model or parameter groups of an optimizer.
    """
    ...

def average_parameters_or_parameter_groups(params: Union[Iterable[torch.nn.Parameter], Iterable[dict[str, torch.nn.Parameter]]], process_group: ProcessGroup): # -> None:
    """Averages parameters of a model or parameter groups of an optimizer."""
    ...

