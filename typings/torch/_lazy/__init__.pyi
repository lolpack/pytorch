"""
This type stub file was generated by pyright.
"""

import torch._C._lazy
from torch.utils._pytree import tree_flatten, tree_unflatten
from .closure import add_step_closure, run_step_closures

def mark_step(device: str = ..., wait=...): # -> None:
    """Triggers a mark step, which amounts to
    - collecting a group of 'live' lazy tensors to index into the compilation cache
      (lowering/compiling their IR graphs if not cached)
    - kicking off execution of the compiled function
    - (optionally, wait=True) waiting for cpu-side execution to complete (does not sync the accelerator)
    """
    ...

def wait_device_ops(devices=...): # -> None:
    """Waits for all the async operations on the given devices to complete.
    Args:
      devices (string..., optional): The devices whose async ops need to be waited
        for. If empty, all the local devices will be waited for.
    """
    ...

def sync_multi(tensors, devices): # -> None:
    """
    Sync the list of lazy tensors so there IR get lowered for the activate backend
    and the compiled computation graph get cached.
    """
    ...

def get_tensor_id(tensor): # -> int:
    """Return a unique id of the lazy tensor maintained by LTC"""
    ...

def to_cpu(tensors, devices=...): # -> PyTree:
    ...

def save(tensors, *args, **kwargs): # -> None:
    ...

