"""
This type stub file was generated by pyright.
"""

import torch
from contextlib import contextmanager
from torch._C import DispatchKey
from torch._ops import HigherOrderOperator
from torch._subclasses.fake_tensor import FakeTensorMode
from torch.fx.experimental.proxy_tensor import ProxyTorchDispatchMode

log = ...
class CallTorchBind(HigherOrderOperator):
    def __init__(self) -> None:
        ...
    
    def __call__(self, obj, method, *args, **kwargs): # -> Any | None:
        ...
    
    @staticmethod
    def schema(obj, method) -> torch.FunctionSchema:
        """
        Returns the schema of ``CallTorchbind.__call__``.
        """
        ...
    


call_torchbind = ...
_orig_scriptmethod_call = ...
def torchbind_method_redispatch(self, *args, **kwargs): # -> Any | None:
    ...

@contextmanager
def enable_torchbind_tracing(): # -> Generator[None, Any, None]:
    """Context manager that acts as a feature flag to enable torchbind tracing
    behavior. Once torchbind tracing has been stabilized, we can remove this and
    turn it always on.
    """
    ...

@call_torchbind.py_impl(DispatchKey.CompositeExplicitAutograd)
def call_torchbind_impl(obj, method, *args, **kwargs): # -> Any:
    ...

@call_torchbind.py_impl(ProxyTorchDispatchMode)
def inner(mode, *args, **kwargs): # -> Any | None:
    ...

@call_torchbind.py_impl(FakeTensorMode)
def call_torchbind_fake(mode, *args, **kwargs): # -> PyTree:
    ...

@call_torchbind.py_functionalize_impl
def call_torchbind_func(ctx, *args, **kwargs): # -> Any:
    ...

