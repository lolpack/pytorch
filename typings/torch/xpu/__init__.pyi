"""
This type stub file was generated by pyright.
"""

import threading
import traceback
import torch
import torch._C
from functools import lru_cache
from typing import Any, Callable, Optional, Union
from torch import device as _device
from torch._utils import _LazySeedTracker, _dummy_type
from ._utils import _get_device_index
from .streams import Event, Stream
from .memory import empty_cache, max_memory_allocated, max_memory_reserved, mem_get_info, memory_allocated, memory_reserved, memory_stats, memory_stats_as_nested_dict, reset_accumulated_memory_stats, reset_peak_memory_stats
from .random import get_rng_state, get_rng_state_all, initial_seed, manual_seed, manual_seed_all, seed, seed_all, set_rng_state, set_rng_state_all

r"""
This package introduces support for the XPU backend, specifically tailored for
Intel GPU optimization.

This package is lazily initialized, so you can always import it, and use
:func:`is_available()` to determine if your system supports XPU.
"""
_initialized = ...
_tls = ...
_initialization_lock = ...
_queued_calls: list[tuple[Callable[[], None], list[str]]] = ...
_is_in_bad_fork = ...
_device_t = Union[_device, str, int, None]
_lazy_seed_tracker = ...
default_generators: tuple[torch._C.Generator] = ...
if _is_compiled():
    _XpuDeviceProperties = ...
    _exchange_device = ...
    _maybe_exchange_device = ...
else:
    _XpuDeviceProperties = ...
@lru_cache(maxsize=1)
def device_count() -> int:
    r"""Return the number of XPU device available."""
    ...

def is_available() -> bool:
    r"""Return a bool indicating if XPU is currently available."""
    ...

def is_bf16_supported(including_emulation: bool = ...) -> bool:
    r"""Return a bool indicating if the current XPU device supports dtype bfloat16."""
    ...

def is_initialized(): # -> bool:
    r"""Return whether PyTorch's XPU state has been initialized."""
    ...

def init(): # -> None:
    r"""Initialize PyTorch's XPU state.
    This is a Python API about lazy initialization that avoids initializing
    XPU until the first time it is accessed. Does nothing if the XPU state is
    already initialized.
    """
    ...

class _DeviceGuard:
    def __init__(self, index: int) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type: Any, value: Any, traceback: Any): # -> Literal[False]:
        ...
    


class device:
    r"""Context-manager that changes the selected device.

    Args:
        device (torch.device or int or str): device index to select. It's a no-op if
            this argument is a negative integer or ``None``.
    """
    def __init__(self, device: Any) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type: Any, value: Any, traceback: Any): # -> Literal[False]:
        ...
    


class device_of(device):
    r"""Context-manager that changes the current device to that of given object.

    You can use both tensors and storages as arguments. If a given object is
    not allocated on a XPU, this is a no-op.

    Args:
        obj (Tensor or Storage): object allocated on the selected device.
    """
    def __init__(self, obj) -> None:
        ...
    


def set_device(device: _device_t) -> None:
    r"""Set the current device.

    Args:
        device (torch.device or int or str): selected device. This function is a
            no-op if this argument is negative.
    """
    ...

def get_device_name(device: Optional[_device_t] = ...) -> str:
    r"""Get the name of a device.

    Args:
        device (torch.device or int or str, optional): device for which to
            return the name. This function is a no-op if this argument is a
            negative integer. It uses the current device, given by :func:`~torch.xpu.current_device`,
            if :attr:`device` is ``None`` (default).

    Returns:
        str: the name of the device
    """
    ...

@lru_cache(None)
def get_device_capability(device: Optional[_device_t] = ...) -> dict[str, Any]:
    r"""Get the xpu capability of a device.

    Args:
        device (torch.device or int or str, optional): device for which to
            return the device capability. This function is a no-op if this
            argument is a negative integer. It uses the current device, given by
            :func:`~torch.xpu.current_device`, if :attr:`device` is ``None``
            (default).

    Returns:
        Dict[str, Any]: the xpu capability dictionary of the device
    """
    ...

def get_device_properties(device: Optional[_device_t] = ...) -> _XpuDeviceProperties:
    r"""Get the properties of a device.

    Args:
        device (torch.device or int or str): device for which to return the
            properties of the device.

    Returns:
        _XpuDeviceProperties: the properties of the device
    """
    ...

def current_device() -> int:
    r"""Return the index of a currently selected device."""
    ...

class StreamContext:
    r"""Context-manager that selects a given stream.

    All XPU kernels queued within its context will be enqueued on a selected
    stream.

    Args:
        Stream (Stream): selected stream. This manager is a no-op if it's
            ``None``.
    .. note:: Streams are per-device.
    """
    cur_stream: Optional[torch.xpu.Stream]
    def __init__(self, stream: Optional[torch.xpu.Stream]) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, type: Any, value: Any, traceback: Any): # -> None:
        ...
    


def stream(stream: Optional[torch.xpu.Stream]) -> StreamContext:
    r"""Wrap around the Context-manager StreamContext that selects a given stream.

    Arguments:
        stream (Stream): selected stream. This manager is a no-op if it's ``None``.
    """
    ...

def set_stream(stream: Stream): # -> None:
    r"""Set the current stream.This is a wrapper API to set the stream.
        Usage of this function is discouraged in favor of the ``stream``
        context manager.

    Args:
        stream (Stream): selected stream. This function is a no-op
            if this argument is ``None``.
    """
    ...

def current_stream(device: Optional[_device_t] = ...) -> Stream:
    r"""Return the currently selected :class:`Stream` for a given device.

    Args:
        device (torch.device or int, optional): selected device. Returns
            the currently selected :class:`Stream` for the current device, given
            by :func:`~torch.xpu.current_device`, if :attr:`device` is ``None``
            (default).
    """
    ...

def get_stream_from_external(data_ptr: int, device: Optional[_device_t] = ...) -> Stream:
    r"""Return a :class:`Stream` from an external SYCL queue.

    This function is used to wrap SYCL queue created in other libraries in order
    to facilitate data exchange and multi-library interactions.

    .. note:: This function doesn't manage the queue life-cycle, it is the user
       responsibility to keep the referenced queue alive while this returned stream is
       being used. The different SYCL queue pointers will result in distinct
       :class:`Stream` objects, even if the SYCL queues they dereference are equivalent.

    Args:
        data_ptr(int): Integer representation of the `sycl::queue*` value passed externally.
        device(torch.device or int, optional): the device where the queue was originally created.
            It is the user responsibility to ensure the device is specified correctly.
    """
    ...

def synchronize(device: _device_t = ...) -> None:
    r"""Wait for all kernels in all streams on a XPU device to complete.

    Args:
        device (torch.device or int, optional): device for which to synchronize.
            It uses the current device, given by :func:`~torch.xpu.current_device`,
            if :attr:`device` is ``None`` (default).
    """
    ...

def get_arch_list() -> list[str]:
    r"""Return list XPU architectures this library was compiled for."""
    ...

def get_gencode_flags() -> str:
    r"""Return XPU AOT(ahead-of-time) build flags this library was compiled with."""
    ...

__all__ = ["Event", "Stream", "StreamContext", "current_device", "current_stream", "default_generators", "device", "device_of", "device_count", "empty_cache", "get_arch_list", "get_device_capability", "get_device_name", "get_device_properties", "get_gencode_flags", "get_rng_state", "get_rng_state_all", "get_stream_from_external", "init", "initial_seed", "is_available", "is_bf16_supported", "is_initialized", "manual_seed", "manual_seed_all", "max_memory_allocated", "max_memory_reserved", "mem_get_info", "memory_allocated", "memory_reserved", "memory_stats", "memory_stats_as_nested_dict", "reset_accumulated_memory_stats", "reset_peak_memory_stats", "seed", "seed_all", "set_device", "set_rng_state", "set_rng_state_all", "set_stream", "stream", "streams", "synchronize"]
