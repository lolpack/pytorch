"""
This type stub file was generated by pyright.
"""

import pickle
import torch.fx
from typing import Any, Callable, Optional, TYPE_CHECKING, TypeVar
from .symbolic_convert import InstructionTranslatorBase

"""
This module provides functionality for tracking and managing regions in computational graphs.
It supports graph optimization by identifying and grouping similar regions based on their
structure and behavior. The module implements algorithms for:

1. Tracking nodes and their relationships in the computational graph
2. Identifying identical or similar regions across the graph
3. Managing graph regions for optimization purposes
4. Supporting deduplication and other graph transformation passes

The core functionality revolves around the GraphRegionTracker class which maintains
mappings between nodes and their duplicates, enabling efficient graph analysis and
optimization operations.
"""
T = TypeVar("T")
if TYPE_CHECKING:
    ...
Node = torch.fx.Node
Region = list[Node]
IdenticalNodes = list[Node]
GlobalStateKey = tuple[bool, bool, int, bool, bool, torch.dtype, bool, bool, bool, bool]
log = ...
graph_expansion_log = ...
def debug_log(msg: str, *args) -> None:
    ...

class NodeHashException(Exception):
    ...


class InputPickler(pickle.Pickler):
    def __init__(self) -> None:
        ...
    
    def dumps(self, obj: Any) -> bytes:
        """
        Pickle an object and return a byte string.
        """
        ...
    


def get_global_state_key() -> GlobalStateKey:
    ...

class BackwardBfsArgIter:
    def __init__(self, origin: Node) -> None:
        ...
    
    @staticmethod
    def create(origin: Node) -> BackwardBfsArgIter:
        ...
    
    def next(self) -> Optional[Node]:
        ...
    
    def peek(self) -> Optional[Node]:
        ...
    
    def add_children(self, node: Node) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class GraphRegionTracker:
    """
    GraphRegionTracker tracks each node added to the output graph and generates a key based on the source location,
    instruction pointer, input shapes, and global state at the time the node is inserted into the graph. Nodes with
    the same key are grouped together in a list of identical nodes (the value of node_to_duplicates).

    hash_to_duplicates: Dict[str, IdenticalNodes] - A dictionary mapping the key to a list of identical nodes
    node_to_duplicates: Dict[Node, IdenticalNodes] - A dictionary mapping a node to the list of identical nodes it belongs to
    input_pickler: InputPickler - An instance of InputPickler used to generate a node hash
    """
    def __init__(self) -> None:
        ...
    
    def track_node(self, tx: InstructionTranslatorBase, node: Node) -> None:
        """
        The main entry point for tracking a node. This function will hash the node argument and group
        nodes with the same hash together. It updates the hash_to_duplicates and node_to_duplicates dictionaries
        to track the new node.
        """
        ...
    
    def track_node_mutations(self, node: Node, flat_args_kwargs: list[Any], id_to_initial_version: dict[int, int]) -> None:
        """
        This function tracks which argument positions are mutated by the given node. Subgraph HOP does not support
        input mutations today so we will skip regions which have inputs that are mutated.
        """
        ...
    
    def add_node_mutation(self, node: Node, arg_pos: int) -> None:
        ...
    
    def get_identical_regions(self, graph: torch.fx.Graph) -> list[list[Region]]:
        """
        This function is responsible for extracting the largest regions of identical nodes from the given graph.
        **Note**: This function assumes the nodes that have been tracked with track_node are in the provided graph argument.

        The algorithm proceeds as follows:
        The nodes tracked via track_node above are organized into region groups. The initial region groups look like this:
        [[IdenticalNode1], [IdenticalNode2], [IdenticalNode3]] and each sublist is called a region. For each region group
        (starting at the topologically latest region group), the inner regions are gradually expanded one node at time from
        the flattened args and kwargs of the node in each region provided that for all regions in the group, the nodes being
        added are also identical (ie have the same key computed by track_node). This is checked by verifying that the two
        nodes have the same identical node list in node_to_duplicates.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class RegionWrapper:
    """Holds state for regions e.g. ancestors and new candidate nodes for consideration"""
    def __init__(self, region: Region, node_to_recursive_ancestors: dict[Node, set[Node]]) -> None:
        ...
    
    def next_candidate(self) -> Optional[Node]:
        ...
    
    def will_inclusion_create_cycle(self, node: Node) -> bool:
        ...
    
    def add(self, node: Node) -> None:
        ...
    


def fully_expand_region_group(regions: list[Region], seen_nodes: set[Node], node_to_recursive_ancestors: dict[Node, set[Node]], is_identical_fn: Callable[[Node, Node], bool]) -> None:
    ...

