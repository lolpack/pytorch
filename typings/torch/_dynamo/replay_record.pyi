"""
This type stub file was generated by pyright.
"""

import dataclasses
from types import CellType, CodeType, ModuleType
from typing import Any, IO
from typing_extensions import Self

"""
Python execution state recording and replay functionality.

This module provides mechanisms for capturing and replaying Python execution state:

- ModuleRecord: Tracks module access patterns and attribute usage
- DummyModule: Lightweight module substitute for replay
- ExecutionRecord: Manages execution context including globals, locals and builtins
- ExecutionRecorder: Records variable states and module access during execution

The module enables serialization and reproduction of Python execution environments,
particularly useful for debugging and testing frameworks that need to capture
and recreate specific program states.
"""
dill = ...
@dataclasses.dataclass
class ModuleRecord:
    module: ModuleType
    accessed_attrs: dict[str, Any] = ...


@dataclasses.dataclass
class DummyModule:
    name: str
    is_torch: bool = ...
    value: object = ...
    @property
    def __name__(self) -> str:
        ...
    


@dataclasses.dataclass
class ExecutionRecord:
    code: CodeType
    closure: tuple[CellType]
    globals: dict[str, Any] = ...
    locals: dict[str, Any] = ...
    builtins: dict[str, Any] = ...
    code_options: dict[str, Any] = ...
    def dump(self, f: IO[str]) -> None:
        ...
    
    @classmethod
    def load(cls, f: IO[bytes]) -> Self:
        ...
    


@dataclasses.dataclass
class ExecutionRecorder:
    LOCAL_MOD_PREFIX = ...
    code: CodeType
    closure: tuple[CellType]
    globals: dict[str, Any] = ...
    locals: dict[str, Any] = ...
    builtins: dict[str, Any] = ...
    code_options: dict[str, Any] = ...
    name_to_modrec: dict[str, ModuleRecord] = ...
    def add_local_var(self, name: str, var: Any) -> None:
        ...
    
    def add_global_var(self, name: str, var: Any) -> None:
        ...
    
    def add_local_mod(self, name: str, mod: ModuleType) -> None:
        ...
    
    def record_module_access(self, mod: ModuleType, name: str, val: Any) -> None:
        ...
    
    def get_record(self) -> ExecutionRecord:
        ...
    


