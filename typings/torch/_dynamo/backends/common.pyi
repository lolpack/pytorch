"""
This type stub file was generated by pyright.
"""

import torch

"""
This module provides common utilities and base classes for TorchDynamo backends.

Key components:
- AotAutograd: Base class for implementing AOT (Ahead-of-Time) autograd backends
- Backend utilities for handling:
  - Fake tensor conversion
  - Device/dtype detection from inputs
  - Memory efficient fusion
  - Graph flattening
  - Common compiler configurations

The utilities here are used by various backend implementations to handle
common operations and provide consistent behavior across different backends.
AOT autograd functionality is particularly important as it enables ahead-of-time
optimization of both forward and backward passes.
"""
log = ...
class AotAutograd:
    def __init__(self, **kwargs) -> None:
        ...
    
    def __call__(self, gm: torch.fx.GraphModule, example_inputs, **kwargs): # -> Callable[..., Any] | GraphModule | OptimizedModule | type[Module] | type[Any] | _Wrapped[Callable[..., Any], object, Callable[..., Any], object] | Callable[..., object] | DisableContext | Callable[..., Callable[..., object]]:
        ...
    


def aot_autograd(**kwargs) -> AotAutograd:
    ...

def mem_efficient_fusion_kwargs(use_decomps): # -> dict[str, Any]:
    ...

def fake_tensor_unsupported(fn): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    """
    Decorator for backends that need real inputs.  We swap out fake
    tensors for zero tensors.
    """
    ...

def device_from_inputs(example_inputs) -> torch.device:
    ...

def dtype_from_inputs(example_inputs) -> torch.dtype:
    ...

