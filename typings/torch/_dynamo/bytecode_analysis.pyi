"""
This type stub file was generated by pyright.
"""

import dataclasses
import sys
from typing import Any, Union

"""
This module provides utilities for analyzing and optimizing Python bytecode.
Key functionality includes:
- Dead code elimination
- Jump instruction optimization
- Stack size analysis and verification
- Live variable analysis
- Line number propagation and cleanup
- Exception table handling for Python 3.11+

The utilities in this module are used to analyze and transform bytecode
for better performance while maintaining correct semantics.
"""
TERMINAL_OPCODES = ...
if sys.version_info >= (3, 11):
    ...
else:
    ...
if sys.version_info >= (3, 12):
    ...
if sys.version_info >= (3, 13):
    ...
JUMP_OPCODES = ...
JUMP_OPNAMES = ...
HASLOCAL = ...
HASFREE = ...
stack_effect = ...
def get_indexof(insts): # -> dict[Any, Any]:
    """
    Get a mapping from instruction memory address to index in instruction list.
    Additionally checks that each instruction only appears once in the list.
    """
    ...

def remove_dead_code(instructions): # -> list[Any]:
    """Dead code elimination"""
    ...

def remove_pointless_jumps(instructions): # -> list[Any]:
    """Eliminate jumps to the next instruction"""
    ...

def propagate_line_nums(instructions): # -> None:
    """Ensure every instruction has line number set in case some are removed"""
    ...

def remove_extra_line_nums(instructions): # -> None:
    """Remove extra starts line properties before packing bytecode"""
    ...

@dataclasses.dataclass
class ReadsWrites:
    reads: set[Any]
    writes: set[Any]
    visited: set[Any]
    ...


def livevars_analysis(instructions, instruction): # -> set[Any]:
    ...

@dataclasses.dataclass
class FixedPointBox:
    value: bool = ...


@dataclasses.dataclass
class StackSize:
    low: Union[int, float]
    high: Union[int, float]
    fixed_point: FixedPointBox
    def zero(self): # -> None:
        ...
    
    def offset_of(self, other, n): # -> None:
        ...
    
    def exn_tab_jump(self, depth): # -> None:
        ...
    


def stacksize_analysis(instructions) -> Union[int, float]:
    ...

