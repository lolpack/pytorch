"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, Union, final
from typing_extensions import Self
from .base import VariableTracker
from .tensor import SymNodeVariable

class LazyCache:
    """Container to cache the real VariableTracker"""
    def __init__(self, value: Any, source: Any) -> None:
        ...
    
    def realize(self) -> None:
        ...
    


@final
class LazyVariableTracker(VariableTracker):
    """
    A structure that defers the creation of the actual VariableTracker
    for a given underlying value until it is accessed.

    The `realize` function invokes VariableTracker.build() to produce the real object.
    Once a LazyVariableTracker has been realized, internal bookkeeping will
    prevent double realization.

    This object should be utilized for processing containers, or objects that
    reference other objects where we may not want to take on creating all the
    VariableTrackers right away.
    """
    _nonvar_fields = ...
    @staticmethod
    def create(value: Any, source: Any, **options: Any) -> LazyVariableTracker:
        ...
    
    def __init__(self, _cache: LazyCache, **kwargs: Any) -> None:
        ...
    
    def realize(self) -> VariableTracker:
        """Force construction of the real VariableTracker"""
        ...
    
    def unwrap(self) -> Union[VariableTracker, Self]:
        """Return the real VariableTracker if it already exists"""
        ...
    
    def is_realized(self) -> bool:
        ...
    
    def clone(self, **kwargs: Any) -> VariableTracker:
        ...
    
    def peek_type(self) -> type[Any]:
        ...
    
    def peek_value(self) -> Any:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __getattr__(self, item: str) -> Any:
        ...
    
    visit = ...
    __repr__ = ...
    @classmethod
    def realize_all(cls, value: Any, cache: Optional[dict[int, tuple[Any, Any]]] = ...) -> Any:
        """
        Walk an object and realize all LazyVariableTrackers inside it.
        """
        ...
    
    def is_hashable(self) -> bool:
        ...
    
    def original_value(self) -> Any:
        ...
    
    def original_source(self) -> Any:
        ...
    


class LazySymNodeFormatString:
    def __init__(self, sym_node_variable: SymNodeVariable, fmt_spec_var: VariableTracker) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


