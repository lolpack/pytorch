"""
This type stub file was generated by pyright.
"""

import dataclasses
import enum
import types
from collections import defaultdict
from typing import Optional, TYPE_CHECKING, TypeVar, Union
from typing_extensions import Self, override
from torch.compiler._cache import CacheArtifact, CacheArtifactFactory
from torch._dynamo.symbolic_convert import InstructionTranslator
from torch._inductor.remote_cache import JsonDataTy, RemoteCache

"""
Profile Guided Optimization (PGO) implementation for Dynamo.

This module provides functionality for caching and managing code state profiles
that guide optimization decisions in Dynamo. It implements both local and remote
caching mechanisms for storing profile information across runs, handles profile
merging across distributed ranks, and manages the lifecycle of profile data
during compilation. The profiles track dynamic vs static properties of tensors
and help Dynamo make better specialization decisions.
"""
if TYPE_CHECKING:
    ...
class ReservedWorkflowIdUserError(ValueError):
    ...


log = ...
LOCK_TIMEOUT = ...
@dataclasses.dataclass(frozen=True)
class CodeId:
    filename: str
    firstlineno: int
    name: str
    file_hash: str
    def __eq__(self, other: object) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    @staticmethod
    def make(code: types.CodeType) -> CodeId:
        ...
    


@dataclasses.dataclass
class CodeState:
    automatic_dynamic: defaultdict[str, FrameStateSizeEntry] = ...


_INIT_CODE_STATE: Optional[defaultdict[CodeId, CodeState]] = ...
_CODE_STATE: Optional[defaultdict[CodeId, CodeState]] = ...
@dataclasses.dataclass(frozen=True)
class InferStride:
    """
    Denotes the quantity stride[dim] * size[dim], which is what the stride would
    be for the next physical dimension that results in a contiguous layout.

    For example, given size = [2, 3], stride = [3, 1], we can replace this with
    stride = [InferStride(1), 1], because InferStride(1) = stride[1] * size[1] = 1 * 3 = 3

    Indirecting the representation in this way is important for the join operation
    on strides as if we join [2, 3][3, 1] and [2, 4][4, 1],
    we don't want [2, None][None, 1] which would get eventually symbolized into
    [2, s0][s1, 1] (notice that the relationship between s0 and s1 is broken).
    If we instead rewrite the expressions as InferStride so we have [2, 3][InferStride(1), 1]
    and [2, 4][InferStride(1), 1] we now join to [2, None][InferStride(1), 1] will
    result in [2, s0][s0, 1], as desired.
    """
    dim: int
    ...


_T = TypeVar("_T")
class AutoUnset(enum.Enum):
    """
    The identity element of our semilattice, a generic "don't know" element that
    is always subsumed when we get more information.
    """
    token = ...


auto_unset = ...
class AutoDynamic(enum.Enum):
    """
    The top element of our (bounded) semilattice, whenever you merge this with
    any other element you always get it again
    """
    token = ...


auto_dynamic = ...
@dataclasses.dataclass
class FrameStateSizeEntry:
    scalar: Union[int, AutoDynamic, AutoUnset] = ...
    size: Union[AutoDynamic, AutoUnset, tuple[Union[int, AutoDynamic], ...]] = ...
    stride: Union[AutoDynamic, AutoUnset, tuple[Union[int, AutoDynamic, InferStride], ...]] = ...
    def render(self) -> str:
        ...
    
    def __post_init__(self) -> None:
        ...
    
    def is_size_dynamic(self, dim: int) -> bool:
        ...
    
    def is_stride_dynamic(self, dim: int) -> bool:
        ...
    
    @classmethod
    def make_scalar(cls, x: int) -> FrameStateSizeEntry:
        ...
    
    @classmethod
    def make_tensor(cls, size: tuple[int, ...], stride: tuple[int, ...]) -> FrameStateSizeEntry:
        ...
    
    @classmethod
    def make_size(cls, size: tuple[int, ...]) -> FrameStateSizeEntry:
        ...
    
    def __ior__(self, other: Self) -> Self:
        ...
    


def update_automatic_dynamic(tx: InstructionTranslator, name: str, entry: FrameStateSizeEntry, *, is_unspecialized_nn_module: bool = ...) -> FrameStateSizeEntry:
    ...

def process_automatic_dynamic(tx: InstructionTranslator, name: str, entry: FrameStateSizeEntry, *, is_unspecialized_nn_module: bool = ...) -> FrameStateSizeEntry:
    ...

def get_cache_key() -> Optional[str]:
    ...

def code_state_path(cache_key: str) -> Optional[str]:
    ...

def should_use_remote_dynamo_pgo_cache() -> bool:
    ...

def get_remote_cache() -> Optional[RemoteCache[JsonDataTy]]:
    ...

def log_frame_dynamic_whitelist(f_code: types.CodeType) -> None:
    ...

def render_code_state(cs: defaultdict[CodeId, CodeState]) -> str:
    ...

@CacheArtifactFactory.register
class PGOCacheArtifact(CacheArtifact):
    @override
    def populate_cache(self) -> None:
        ...
    
    @override
    @staticmethod
    def type() -> str:
        ...
    


def get_code_state() -> defaultdict[CodeId, CodeState]:
    ...

def put_code_state() -> None:
    ...

def write_local_impl(cache_key: str, pickled_code: bytes) -> Optional[tuple[str, int]]:
    ...

def put_local_code_state(cache_key: str) -> None:
    ...

def put_remote_code_state(cache_key: str) -> None:
    ...

def reset_code_state() -> None:
    ...

