"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Optional, Union
from torch.export import ExportedProgram

"""
Utilities for debugging and reproducing issues in Ahead of Time with Inductor (AOTI) compilation.

This file provides tools and utilities for:
- Generating minimal reproducible test cases (minification)
- Handling exported programs and graph modules
- Creating debug repros for AOTI compilation issues
- Supporting both accuracy testing and error reproduction
- Managing configuration and environment for repro cases

The main components include:
- Minification tools to reduce test cases while preserving errors
- Repro generation utilities for exported programs
- Error handling specific to AOTI compilation
- Command-line interface for running and managing repros
"""
log = ...
inductor_config = ...
use_buck = ...
class AOTIMinifierError(Exception):
    def __init__(self, original_exception) -> None:
        ...
    


def dump_to_minify(exported_program: ExportedProgram, compiler_name: str, command: str = ..., options: Optional[dict[str, Any]] = ...): # -> None:
    """
    If command is "minify":
        Dump exported_program to `debug_dir/minifier/minifier_launcher.py`, with minify command.
    If command is "run":
        Dump exported_program to `cwd/repro.py`, with run command.
    """
    ...

def get_module_string(gm): # -> str:
    ...

def save_graph_repro_ep(fd, compiler_name, *, exported_program: Optional[ExportedProgram] = ..., gm: Optional[torch.nn.Module] = ..., args: Optional[tuple[Any]] = ..., config_patches: Optional[dict[str, str]] = ..., stable_output=..., save_dir=..., command=..., accuracy=..., check_str=..., module_in_comment=..., strict=...): # -> None:
    ...

def dump_compiler_graph_state(gm, args, compiler_name, *, config_patches=..., accuracy=..., strict=...): # -> None:
    ...

def generate_compiler_repro_exported_program(exported_program, *, options: Optional[dict[str, str]] = ..., stable_output=..., save_dir=...): # -> str:
    ...

def repro_load_args(load_args, save_dir): # -> tuple[Any, ...]:
    ...

def repro_common(options, exported_program): # -> tuple[Any, Any, Any]:
    ...

def repro_get_args(options, exported_program, config_patches): # -> tuple[Any, Any, Any]:
    ...

def repro_run(options, exported_program, config_patches): # -> None:
    ...

def export_for_aoti_minifier(gm, tuple_inputs, strict=..., skip_export_error=...) -> Optional[torch.nn.Module]:
    ...

def repro_minify(options, exported_program, config_patches): # -> None:
    ...

def run_repro(exported_program, *, config_patches: Optional[dict[str, str]] = ..., command=..., accuracy: Union[bool, str] = ..., save_dir=..., tracing_mode=..., check_str=..., minifier_export_mode=..., skip_export_error=..., **more_kwargs):
    ...

