"""
This type stub file was generated by pyright.
"""

import torch.fx as fx
from typing import Union
from torch._dynamo.backends.registry import CompiledFn
from ..backends.registry import register_debug_backend

"""
Utilities for reproducing and debugging issues in Dynamo after graph capture.

This file provides tools and infrastructure for debugging problems that occur
after Dynamo has captured the graph but before/during backend compilation.
Key components include:

- Minification tools to reduce large graphs to minimal failing examples
- Accuracy testing to validate compiled graph outputs match eager mode
- Repro generation to create standalone reproduction scripts
- Debug backends for capturing and analyzing failures
- Utilities for saving/loading graph states and inputs

The tools here focus specifically on the post-graph-capture stage, making them
useful for debugging backend compilation issues, AOTAutograd problems, and
accuracy discrepancies between compiled and eager execution.
"""
log = ...
inductor_config = ...
use_buck = ...
class WrapBackendDebug:
    def __init__(self, unconfigured_compiler_fn, compiler_name: str) -> None:
        ...
    
    def __call__(self, gm, example_inputs, **kwargs):
        ...
    


def wrap_backend_debug(unconfigured_compiler_fn, compiler_name: str): # -> WrapBackendDebug:
    """
    A minifier decorator that wraps the TorchDynamo produced Fx graph modules.
    As opposed to wrap_compiler_debug, this wrapper intercepts at the
    TorchDynamo produced Fx Graph Module. This makes it backend-agnostic to some
    level, e.g., it is useful for minifying issues related to Aot Autograd
    tracing.  If an error is found, we minify and save the minified repro in
    repro.tar.gz.
    """
    ...

def generate_dynamo_fx_repro_string(gm, args, compiler_name, check_accuracy=..., *, stable_output=..., save_dir=..., command=...): # -> str:
    """
    Generate a repro string for backend-agnostic minified version.
    """
    ...

def dump_backend_repro_as_file(gm, args, compiler_name, check_accuracy=...): # -> None:
    """
    Saves the repro to a repro.py file
    """
    ...

def dump_backend_state(gm, args, compiler_name, check_accuracy=...): # -> None:
    """
    Dumps the dynamo graph to repro the issue.
    1) It tries to convert Fx GraphModule to a string. If we can, it writes to a
    repro.py file.
    2) If we can't convert Fx GraphModule to a string, we use to_folder to save
    the module and save a tar file.
    """
    ...

def dump_to_minify_after_dynamo(gm, args, compiler_name): # -> None:
    ...

@register_debug_backend
def dynamo_minifier_backend(gm: fx.GraphModule, example_inputs, compiler_name: CompiledFn): # -> GraphModule:
    ...

@register_debug_backend
def dynamo_accuracy_minifier_backend(gm, example_inputs, compiler_name):
    ...

def backend_fails(gm, example_inputs, compiler_fn, orig_failure): # -> bool:
    """
    Minifier uses this function to identify if the minified graph module fails
    with the same error.

    One caveat is that minifier can potentially go into a wrong direction when
    the resulting graph module fails for a different reason. To avoid this, we
    save the string for the original exception and check similarity between new
    and old exception. They can be somewhat different in some cases, when the
    exception string depends on the failing node information. So, we have a
    loose similarity metric to guide the minifier path.
    """
    ...

def run_load_args(options, mod, load_args): # -> list[Any]:
    ...

def repro_minify(options, mod, load_args): # -> None:
    ...

def repro_run(options, mod, load_args): # -> None:
    ...

def run_repro(mod, load_args, *, command=..., accuracy: Union[bool, str] = ..., save_dir=..., autocast=..., backend=..., **kwargs): # -> None:
    ...

