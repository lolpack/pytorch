"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional
from .utils import RegistrationHandle

__all__ = ["SimpleLibraryRegistry", "SimpleOperatorEntry", "singleton"]
class SimpleLibraryRegistry:
    """Registry for the "simple" torch.library APIs

    The "simple" torch.library APIs are a higher-level API on top of the
    raw PyTorch DispatchKey registration APIs that includes:
    - fake impl

    Registrations for these APIs do not go into the PyTorch dispatcher's
    table because they may not directly involve a DispatchKey. For example,
    the fake impl is a Python function that gets invoked by FakeTensor.
    Instead, we manage them here.

    SimpleLibraryRegistry is a mapping from a fully qualified operator name
    (including the overload) to SimpleOperatorEntry.
    """
    def __init__(self) -> None:
        ...
    
    def find(self, qualname: str) -> SimpleOperatorEntry:
        ...
    


singleton: SimpleLibraryRegistry = ...
class SimpleOperatorEntry:
    """This is 1:1 to an operator overload.

    The fields of SimpleOperatorEntry are Holders where kernels can be
    registered to.
    """
    def __init__(self, qualname: str) -> None:
        ...
    
    @property
    def abstract_impl(self): # -> FakeImplHolder:
        ...
    


class GenericTorchDispatchRuleHolder:
    def __init__(self, qualname) -> None:
        ...
    
    def register(self, torch_dispatch_class: type, func: Callable) -> RegistrationHandle:
        ...
    
    def find(self, torch_dispatch_class): # -> None:
        ...
    


def find_torch_dispatch_rule(op, torch_dispatch_class: type) -> Optional[Callable]:
    ...

