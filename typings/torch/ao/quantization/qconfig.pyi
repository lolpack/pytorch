"""
This type stub file was generated by pyright.
"""

from collections import namedtuple
from typing import Optional, Union
from typing_extensions import deprecated
from torch.ao.quantization.fake_quantize import FakeQuantizeBase
from .observer import ObserverBase, _PartialWrapper

__all__ = ["QConfig", "QConfigDynamic", "default_qconfig", "default_debug_qconfig", "default_per_channel_qconfig", "default_dynamic_qconfig", "float16_dynamic_qconfig", "float16_static_qconfig", "per_channel_dynamic_qconfig", "float_qparams_weight_only_qconfig", "float_qparams_weight_only_qconfig_4bit", "default_quint8_weight_qconfig", "default_qat_qconfig", "default_dynamic_qat_qconfig", "default_weight_only_qconfig", "default_activation_only_qconfig", "default_qat_qconfig_v2", "default_reuse_input_qconfig", "default_symmetric_qnnpack_qconfig", "default_per_channel_symmetric_qnnpack_qconfig", "default_symmetric_qnnpack_qat_qconfig", "default_per_channel_symmetric_qnnpack_qat_qconfig", "default_embedding_qat_qconfig", "default_embedding_qat_qconfig_4bit", "get_default_qconfig", "get_default_qat_qconfig", "get_default_qconfig_dict", "get_default_qat_qconfig_dict", "QConfigAny", "qconfig_equals"]
class QConfig(namedtuple("QConfig", ["activation", "weight"])):
    """
    Describes how to quantize a layer or a part of the network by providing
    settings (observer classes) for activations and weights respectively.


    Note that QConfig needs to contain observer **classes** (like MinMaxObserver) or a callable that returns
    instances on invocation, not the concrete observer instances themselves.
    Quantization preparation function will instantiate observers multiple times for each of the layers.


    Observer classes have usually reasonable default arguments, but they can be overwritten with `with_args`
    method (that behaves like functools.partial)::

      my_qconfig = QConfig(
          activation=MinMaxObserver.with_args(dtype=torch.qint8),
          weight=default_observer.with_args(dtype=torch.qint8),
      )

    """
    __slots__ = ...
    def __new__(cls, activation, weight): # -> Self:
        ...
    


@deprecated("`QConfigDynamic` is going to be deprecated in PyTorch 1.12, please use `QConfig` instead", category=FutureWarning)
class QConfigDynamic(namedtuple("QConfigDynamic", ["activation", "weight"])):
    """
    Describes how to dynamically quantize a layer or a part of the network by providing
    settings (observer classes) for weights.

    It's like QConfig, but for dynamic quantization.

    Note that QConfigDynamic needs to contain observer **classes** (like MinMaxObserver) or a callable that returns
    instances on invocation, not the concrete observer instances themselves.
    Quantization function will instantiate observers multiple times for each of the layers.

    Observer classes have usually reasonable default arguments, but they can be overwritten with `with_args`
    method (that behaves like functools.partial)::

      my_qconfig = QConfigDynamic(weight=default_observer.with_args(dtype=torch.qint8))
    """
    __slots__ = ...
    def __new__(cls, activation=..., weight=...): # -> Self:
        ...
    


default_qconfig = ...
default_debug_qconfig = ...
default_per_channel_qconfig = ...
default_dynamic_qconfig = ...
float16_dynamic_qconfig = ...
float16_static_qconfig = ...
per_channel_dynamic_qconfig = ...
float_qparams_weight_only_qconfig = ...
float_qparams_weight_only_qconfig_4bit = ...
default_qat_qconfig = ...
default_dynamic_qat_qconfig = ...
default_weight_only_qconfig = ...
default_activation_only_qconfig = ...
default_qat_qconfig_v2 = ...
default_reuse_input_qconfig = ...
def get_default_qconfig(backend=..., version=...): # -> QConfig:
    """
    Returns the default PTQ qconfig for the specified backend.

    Args:
      * `backend` (str): a string representing the target backend. Currently supports
        `x86` (default), `fbgemm`, `qnnpack` and `onednn`.

    Return:
        qconfig
    """
    ...

default_symmetric_qnnpack_qconfig = ...
default_per_channel_symmetric_qnnpack_qconfig = ...
default_embedding_qat_qconfig = ...
default_embedding_qat_qconfig_4bit = ...
default_quint8_weight_qconfig = ...
def get_default_qat_qconfig(backend=..., version=...): # -> QConfig:
    """
    Returns the default QAT qconfig for the specified backend.

    Args:
      * `backend` (str): a string representing the target backend. Currently supports
        `x86` (default), `fbgemm`, `qnnpack` and `onednn`.
      * `version`: version, for backwards compatibility. Can be `None` or `1`.

    Return:
        qconfig
    """
    ...

default_symmetric_qnnpack_qat_qconfig = ...
default_per_channel_symmetric_qnnpack_qat_qconfig = ...
_default_fp32_placeholder_qconfig = ...
_default_quint8_placeholder_qconfig = ...
@deprecated("`torch.ao.quantization.get_default_qconfig_dict` is deprecated and will be removed in " "a future version. Please use `torch.ao.quantization.get_default_qconfig_mapping` instead.", category=FutureWarning)
def get_default_qconfig_dict(backend=..., version=...): # -> dict[str, Any]:
    ...

@deprecated("`torch.ao.quantization.get_default_qat_qconfig_dict` is deprecated and will be removed in " "a future version. Please use `torch.ao.quantization.get_default_qat_qconfig_mapping` instead.", category=FutureWarning)
def get_default_qat_qconfig_dict(backend=..., version=...): # -> dict[str, Any]:
    ...

QConfigAny = Optional[QConfig]
_ObserverOrFakeQuantizeConstructor = Union[_PartialWrapper, type[ObserverBase], type[FakeQuantizeBase]]
def qconfig_equals(q1: QConfigAny, q2: QConfigAny): # -> bool:
    """
    Returns `True` if `q1` equals `q2`, and `False` otherwise.
    """
    ...

