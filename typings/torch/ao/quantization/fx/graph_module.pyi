"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Union
from torch.fx import GraphModule
from torch.fx.graph import Graph

__all__ = ["FusedGraphModule", "ObservedGraphModule", "ObservedStandaloneGraphModule", "QuantizedGraphModule"]
class FusedGraphModule(GraphModule):
    def __init__(self, root: Union[torch.nn.Module, dict[str, Any]], graph: Graph, preserved_attr_names: set[str]) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> FusedGraphModule:
        ...
    


class ObservedGraphModule(GraphModule):
    def __init__(self, root: Union[torch.nn.Module, dict[str, Any]], graph: Graph, preserved_attr_names: set[str]) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> ObservedGraphModule:
        ...
    


class ObservedStandaloneGraphModule(ObservedGraphModule):
    def __init__(self, root: Union[torch.nn.Module, dict[str, Any]], graph: Graph, preserved_attr_names: set[str]) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> ObservedStandaloneGraphModule:
        ...
    


class QuantizedGraphModule(GraphModule):
    """This class is created to make sure PackedParams
    (e.g. LinearPackedParams, Conv2dPackedParams) to appear in state_dict
    so that we can serialize and deserialize quantized graph module with
    torch.save(m.state_dict()) and m.load_state_dict(state_dict)
    """
    def __init__(self, root: Union[torch.nn.Module, dict[str, Any]], graph: Graph, preserved_attr_names: set[str]) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> QuantizedGraphModule:
        ...
    


