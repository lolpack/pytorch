"""
This type stub file was generated by pyright.
"""

import enum
from typing import Optional
from torch.fx import GraphModule
from .ns_types import NSNodeTargetType, NSSubgraph

toq = ...
class _NSGraphMatchableSubgraphsIterator:
    """
    Iterates through the graph of gm, starting with the output nodes
    and continuing backwards.
    1. Returns matchable subgraphs, in order. A subgraph is defined by
       (start_node, end_node).
    2. Skips over non-matchable subgraphs
    """
    def __init__(self, gm: GraphModule, non_matchable_functions: set[NSNodeTargetType], non_matchable_modules: set[NSNodeTargetType], non_matchable_methods: set[NSNodeTargetType]) -> None:
        ...
    
    def __iter__(self): # -> Self:
        ...
    
    def __next__(self) -> NSSubgraph:
        """
        Returns the next matchable subgraph.
        """
        ...
    


class GraphMatchingException(Exception):
    """
    Exception raised when two graphs cannot be matched.
    """
    ...


class SubgraphTypeRelationship(enum.Enum):
    EQUAL = ...
    EQUAL_BUT_UKNOWN = ...
    RELATED_BUT_NOT_EQUAL = ...
    NOT_RELATED = ...


def get_matching_subgraph_pairs(gm_a: GraphModule, gm_b: GraphModule, base_name_to_sets_of_related_ops: Optional[dict[str, set[NSNodeTargetType]]] = ..., unmatchable_types_map: Optional[dict[str, set[NSNodeTargetType]]] = ...) -> dict[str, tuple[NSSubgraph, NSSubgraph]]:
    """
    Matches matchable subgraphs of graph_a to graph_b.

    For a node, "matchable" is defined as a node which is not an observer,
    fake_quants, quant or dequant.

    A subgraph can contain one or more nodes.  A subgraph is matchable if
    at least one node inside of it is matchable.  Currently, all nodes in
    a subgraph must be matchable (because we assume no observers will be
    inserted in the middle of a fusion).

    A subgraph is defined by (start_node, end_node).  We assume that only
    start_node and end_node are linked with the surrounding graph, all other
    nodes in a subgraph are self-contained.

    A pair of nodes is "related" if both nodes represent the same mathematical
    operation across different quantization flavors. For example,
    `F.linear` and `torch.ops.quantized.linear` are related, and
    `F.linear` and `torch.nn.Conv` are not related.

    For each matchable pair of nodes node_a and node_b, they will match
    if node_a and node_b are related.

    For graphs A and B, they will match iff:
    1. the number of matchable subgraphs in A and B is equivalent
    2. when iterating through the matchable subgraphs of A and B in the same order, each
       corresponding pair of base nodes is related.

    This enables us to find the corresponding subgraphs between
    graphs of related models.  For example, if we had two graphs such as:

    graph_a: x0 -> conv_0 (type: nn.Conv2d) -> obs_0 -> x1
             w  -/
             b  -/

    graph_b: x0 -> quant_0 -> qconv_0 (type: nnq.Conv2d) -> dequant_0 -> x1
           packed_params_0 -/

    This function will return the following result:
    {
        'conv_0': (  # the name of the node in graph_b
          (conv_0, conv_0),  # (start_node_a, end_node_a)
          (qconv_0, qconv_0),  # (start_node_b, end_node_b)
        ),
    }

    Or, if we have a fusion pattern,

    graph_a: x0 -> linear_0 -> relu_0 -> obs_0 -> x1
             w  -/
             b  -/

    graph_b: x0 -> quant_0 -> linear_relu_0 -> dequant_0 -> x1
           packed_params_0 -/

    This function will return the following result:
    {
        'linear_relu_0': (  # the name of the node in graph_b
          (linear_0, relu_0),  # (start_node_a, end_node_a)
          (linear_relu_0, linear_relu_0),  # (start_node_b, end_node_b)
        ),
    }
    """
    ...

