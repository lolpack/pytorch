"""
This type stub file was generated by pyright.
"""

import torch
import torch.nn as nn
from typing import Callable, Optional
from torch.fx import GraphModule
from torch.fx.graph import Node
from .ns_types import NSSingleResultType

toq = ...
def mod_weight_detach(mod: nn.Module) -> torch.Tensor:
    ...

def mod_0_weight_detach(mod: nn.Module) -> torch.Tensor:
    ...

def mod_weight_bias_0(mod: nn.Module) -> torch.Tensor:
    ...

def get_lstm_weight(mod: nn.Module) -> list[torch.Tensor]:
    ...

def get_qlstm_weight(mod: nn.Module) -> list[torch.Tensor]:
    ...

def get_conv_mod_weight(mod: nn.Module) -> torch.Tensor:
    ...

def get_linear_mod_weight(mod: nn.Module) -> torch.Tensor:
    ...

def get_lstm_mod_weights(mod: nn.Module) -> list[torch.Tensor]:
    ...

def get_conv_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor:
    ...

def get_qconv_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor:
    ...

def get_linear_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor:
    ...

def get_qlinear_fun_weight(node: Node, gm: GraphModule) -> torch.Tensor:
    ...

def get_op_to_type_to_weight_extraction_fn() -> dict[str, dict[Callable, Callable]]:
    ...

def extract_weight_from_node(node: Node, gm: GraphModule, op_to_type_to_weight_extraction_fn: Optional[dict[str, dict[Callable, Callable]]] = ...) -> Optional[NSSingleResultType]:
    ...

