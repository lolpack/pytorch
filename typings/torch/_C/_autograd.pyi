"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Any
from torch._C._profiler import _ProfilerEvent

class DeviceType(Enum):
    CPU = ...
    CUDA = ...
    XPU = ...
    MKLDNN = ...
    OPENGL = ...
    OPENCL = ...
    IDEEP = ...
    HIP = ...
    FPGA = ...
    MAIA = ...
    XLA = ...
    MTIA = ...
    MPS = ...
    HPU = ...
    Meta = ...
    Vulkan = ...
    Metal = ...
    PrivateUse1 = ...


class ProfilerEvent:
    def cpu_elapsed_us(self, other: ProfilerEvent) -> float:
        ...
    
    def cpu_memory_usage(self) -> int:
        ...
    
    def cuda_elapsed_us(self, other: ProfilerEvent) -> float:
        ...
    
    def privateuse1_elapsed_us(self, other: ProfilerEvent) -> float:
        ...
    
    def cuda_memory_usage(self) -> int:
        ...
    
    def device(self) -> int:
        ...
    
    def handle(self) -> int:
        ...
    
    def has_cuda(self) -> bool:
        ...
    
    def is_remote(self) -> bool:
        ...
    
    def kind(self) -> int:
        ...
    
    def name(self) -> str:
        ...
    
    def node_id(self) -> int:
        ...
    
    def sequence_nr(self) -> int:
        ...
    
    def shapes(self) -> list[list[int]]:
        ...
    
    def thread_id(self) -> int:
        ...
    
    def flops(self) -> float:
        ...
    
    def is_async(self) -> bool:
        ...
    


class _KinetoEvent:
    def name(self) -> str:
        ...
    
    def overload_name(self) -> str:
        ...
    
    def device_index(self) -> int:
        ...
    
    def device_resource_id(self) -> int:
        ...
    
    def start_ns(self) -> int:
        ...
    
    def end_ns(self) -> int:
        ...
    
    def duration_ns(self) -> int:
        ...
    
    def is_async(self) -> bool:
        ...
    
    def linked_correlation_id(self) -> int:
        ...
    
    def shapes(self) -> list[list[int]]:
        ...
    
    def dtypes(self) -> list[str]:
        ...
    
    def concrete_inputs(self) -> list[Any]:
        ...
    
    def kwinputs(self) -> dict[str, Any]:
        ...
    
    def device_type(self) -> DeviceType:
        ...
    
    def start_thread_id(self) -> int:
        ...
    
    def end_thread_id(self) -> int:
        ...
    
    def correlation_id(self) -> int:
        ...
    
    def fwd_thread_id(self) -> int:
        ...
    
    def stack(self) -> list[str]:
        ...
    
    def scope(self) -> int:
        ...
    
    def sequence_nr(self) -> int:
        ...
    
    def flops(self) -> int:
        ...
    
    def cuda_elapsed_us(self) -> int:
        ...
    
    def privateuse1_elapsed_us(self) -> int:
        ...
    
    def is_user_annotation(self) -> bool:
        ...
    


class _ProfilerResult:
    def events(self) -> list[_KinetoEvent]:
        ...
    
    def legacy_events(self) -> list[list[ProfilerEvent]]:
        ...
    
    def save(self, path: str) -> None:
        ...
    
    def experimental_event_tree(self) -> list[_ProfilerEvent]:
        ...
    
    def trace_start_ns(self) -> int:
        ...
    


class SavedTensor:
    ...


def kineto_available() -> bool:
    ...

class CreationMeta(Enum):
    DEFAULT = ...
    IN_CUSTOM_FUNCTION = ...
    MULTI_OUTPUT_NODE = ...
    NO_GRAD_MODE = ...
    INFERENCE_MODE = ...


