"""
This type stub file was generated by pyright.
"""

from enum import Enum
from torch import Tensor

def get_unwrapped(tensor: Tensor) -> Tensor:
    ...

def is_batchedtensor(tensor: Tensor) -> bool:
    ...

def is_functionaltensor(tensor: Tensor) -> bool:
    ...

def is_functorch_wrapped_tensor(tensor: Tensor) -> bool:
    ...

def is_gradtrackingtensor(tensor: Tensor) -> bool:
    ...

def is_legacy_batchedtensor(tensor: Tensor) -> bool:
    ...

def maybe_get_bdim(tensor: Tensor) -> int:
    ...

def maybe_get_level(tensor: Tensor) -> int:
    ...

def maybe_current_level() -> int | None:
    ...

def unwrap_if_dead(tensor: Tensor) -> Tensor:
    ...

def current_level() -> int:
    ...

def count_jvp_interpreters() -> int:
    ...

def set_single_level_autograd_function_allowed(allowed: bool) -> None:
    ...

def get_single_level_autograd_function_allowed() -> bool:
    ...

class TransformType(Enum):
    Torch = ...
    Vmap = ...
    Grad = ...
    Jvp = ...
    Functionalize = ...


class RandomnessType(Enum):
    Error = ...
    Same = ...
    Different = ...


class CInterpreter:
    def key(self) -> TransformType:
        ...
    
    def level(self) -> int:
        ...
    
    def serialize(self) -> bytes:
        ...
    
    @staticmethod
    def deserialize(bytes) -> CInterpreter:
        ...
    


class CGradInterpreterPtr:
    def __init__(self, interpreter: CInterpreter) -> None:
        ...
    
    def lift(self, Tensor) -> Tensor:
        ...
    
    def prevGradMode(self) -> bool:
        ...
    


class CJvpInterpreterPtr:
    def __init__(self, interpreter: CInterpreter) -> None:
        ...
    
    def lift(self, Tensor) -> Tensor:
        ...
    
    def prevFwdGradMode(self) -> bool:
        ...
    


class CFunctionalizeInterpreterPtr:
    def __init__(self, interpreter: CInterpreter) -> None:
        ...
    
    def key(self) -> TransformType:
        ...
    
    def level(self) -> int:
        ...
    
    def functionalizeAddBackViews(self) -> bool:
        ...
    


class CVmapInterpreterPtr:
    def __init__(self, interpreter: CInterpreter) -> None:
        ...
    
    def key(self) -> TransformType:
        ...
    
    def level(self) -> int:
        ...
    
    def batchSize(self) -> int:
        ...
    
    def randomness(self) -> RandomnessType:
        ...
    


class DynamicLayer:
    ...


def get_dynamic_layer_stack_depth() -> int:
    ...

def get_interpreter_stack() -> list[CInterpreter]:
    ...

def peek_interpreter_stack() -> CInterpreter:
    ...

def pop_dynamic_layer_stack() -> DynamicLayer:
    ...

def pop_dynamic_layer_stack_and_undo_to_depth(int) -> None:
    ...

def push_dynamic_layer_stack(dl: DynamicLayer) -> int:
    ...

