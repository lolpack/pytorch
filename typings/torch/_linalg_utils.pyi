"""
This type stub file was generated by pyright.
"""

from typing import Optional
from torch import Tensor

"""Various linear algebra utility methods for internal use."""
def is_sparse(A): # -> bool:
    """Check if tensor A is a sparse tensor"""
    ...

def get_floating_dtype(A):
    """Return the floating point dtype of tensor A.

    Integer types map to float32.
    """
    ...

def matmul(A: Optional[Tensor], B: Tensor) -> Tensor:
    """Multiply two matrices.

    If A is None, return B. A can be sparse or dense. B is always
    dense.
    """
    ...

def bform(X: Tensor, A: Optional[Tensor], Y: Tensor) -> Tensor:
    """Return bilinear form of matrices: :math:`X^T A Y`."""
    ...

def qform(A: Optional[Tensor], S: Tensor): # -> Tensor:
    """Return quadratic form :math:`S^T A S`."""
    ...

def basis(A):
    """Return orthogonal basis of A columns."""
    ...

def symeig(A: Tensor, largest: Optional[bool] = ...) -> tuple[Tensor, Tensor]:
    """Return eigenpairs of A with specified ordering."""
    ...

def matrix_rank(input, tol=..., symmetric=..., *, out=...) -> Tensor:
    ...

def solve(input: Tensor, A: Tensor, *, out=...) -> tuple[Tensor, Tensor]:
    ...

def lstsq(input: Tensor, A: Tensor, *, out=...) -> tuple[Tensor, Tensor]:
    ...

def eig(self: Tensor, eigenvectors: bool = ..., *, e=..., v=...) -> tuple[Tensor, Tensor]:
    ...

