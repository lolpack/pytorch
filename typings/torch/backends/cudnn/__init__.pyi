"""
This type stub file was generated by pyright.
"""

import os
import sys
import warnings
import torch
from contextlib import contextmanager
from typing import Optional
from torch.backends import ContextProp, PropModule, _FP32Precision, __allow_nonbracketed_mutation, _get_fp32_precision_getter, _set_fp32_precision_setter
from torch._C import _cudnn

__cudnn_version: Optional[int] = ...
if _cudnn is not None:
    ...
else:
    ...
def version(): # -> int | None:
    """Return the version of cuDNN."""
    ...

CUDNN_TENSOR_DTYPES = ...
def is_available(): # -> bool:
    r"""Return a bool indicating if CUDNN is currently available."""
    ...

def is_acceptable(tensor): # -> bool:
    ...

def set_flags(_enabled=..., _benchmark=..., _benchmark_limit=..., _deterministic=..., _allow_tf32=..., _fp32_precision=...): # -> tuple[bool, bool, int | None, bool, bool, Any]:
    ...

@contextmanager
def flags(enabled=..., benchmark=..., benchmark_limit=..., deterministic=..., allow_tf32=..., fp32_precision=...): # -> Generator[None, Any, None]:
    ...

class CudnnModule(PropModule):
    def __init__(self, m, name) -> None:
        ...
    
    enabled = ...
    deterministic = ...
    benchmark = ...
    benchmark_limit = ...
    if is_available():
        benchmark_limit = ...
    allow_tf32 = ...
    conv = ...
    rnn = ...
    fp32_precision = ...


enabled: bool
deterministic: bool
benchmark: bool
allow_tf32: bool
benchmark_limit: int
