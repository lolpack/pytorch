"""
This type stub file was generated by pyright.
"""

import torch
from typing import Any, Callable, NamedTuple, TypeVar, overload
from typing_extensions import Never, TypeAlias
from _typeshed import Incomplete
from torch.jit._monkeytype_config import JitTypeTraceStore as JitTypeTraceStore
from torch.nn import Module as Module
from torch.package import PackageExporter as PackageExporter, PackageImporter as PackageImporter

ScriptFunction = torch._C.ScriptFunction
type_trace_db: JitTypeTraceStore
ResolutionCallback: TypeAlias = Callable[[str], Callable[..., Any]]
_ClassVar = TypeVar("_ClassVar", bound=type)
class Attribute(NamedTuple):
    value: Incomplete
    type: Incomplete
    ...


class OrderedDictWrapper:
    _c: Incomplete
    def __init__(self, _c) -> None:
        ...
    
    def keys(self):
        ...
    
    def values(self):
        ...
    
    def __len__(self) -> int:
        ...
    
    def __delitem__(self, k) -> None:
        ...
    
    def items(self):
        ...
    
    def __setitem__(self, k, v) -> None:
        ...
    
    def __contains__(self, k) -> bool:
        ...
    
    def __getitem__(self, k):
        ...
    


class OrderedModuleDict(OrderedDictWrapper):
    _python_modules: Incomplete
    def __init__(self, module, python_dict) -> None:
        ...
    
    def items(self):
        ...
    
    def __contains__(self, k) -> bool:
        ...
    
    def __setitem__(self, k, v) -> None:
        ...
    
    def __getitem__(self, k):
        ...
    


class ScriptMeta(type):
    def __init__(cls, name, bases, attrs) -> None:
        ...
    


class _CachedForward:
    def __get__(self, obj, cls):
        ...
    


class ScriptWarning(Warning):
    ...


def script_method(fn):
    ...

class ConstMap:
    const_mapping: Incomplete
    def __init__(self, const_mapping) -> None:
        ...
    
    def __getattr__(self, attr):
        ...
    


def unpackage_script_module(importer: PackageImporter, script_module_id: str) -> torch.nn.Module:
    ...

_magic_methods: Incomplete
class RecursiveScriptClass:
    _c: Incomplete
    _props: Incomplete
    def __init__(self, cpp_class) -> None:
        ...
    
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value) -> None:
        ...
    
    def forward_magic_method(self, method_name, *args, **kwargs):
        ...
    
    def __getstate__(self) -> None:
        ...
    
    def __iadd__(self, other):
        ...
    


def method_template(self, *args, **kwargs):
    ...

class ScriptModule(Module, metaclass=ScriptMeta):
    __jit_unused_properties__: Incomplete
    def __init__(self) -> None:
        ...
    
    forward: Callable[..., Any]
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value) -> None:
        ...
    
    def define(self, src):
        ...
    
    def __reduce_package__(self, exporter: PackageExporter):
        ...
    
    @property
    def code(self) -> str:
        ...
    
    @property
    def code_with_constants(self) -> tuple[str, ConstMap]:
        ...
    
    @property
    def graph(self) -> torch.Graph:
        ...
    
    @property
    def inlined_graph(self) -> torch.Graph:
        ...
    
    @property
    def original_name(self) -> str:
        ...
    


class RecursiveScriptModule(ScriptModule):
    _disable_script_meta: bool
    _c: Incomplete
    def __init__(self, cpp_module) -> None:
        ...
    
    _concrete_type: Incomplete
    _modules: Incomplete
    _parameters: Incomplete
    _buffers: Incomplete
    __dict__: Incomplete
    def save(self, f, **kwargs):
        ...
    
    def save_to_buffer(self, *args, **kwargs):
        ...
    
    def get_debug_state(self, *args, **kwargs):
        ...
    
    def extra_repr(self):
        ...
    
    def graph_for(self, *args, **kwargs):
        ...
    
    def define(self, src) -> None:
        ...
    
    def __getattr__(self, attr):
        ...
    
    def __setattr__(self, attr, value) -> None:
        ...
    
    def __copy__(self):
        ...
    
    def __deepcopy__(self, memo):
        ...
    
    def forward_magic_method(self, method_name, *args, **kwargs):
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, idx):
        ...
    
    def __len__(self) -> int:
        ...
    
    def __contains__(self, key) -> bool:
        ...
    
    def __dir__(self):
        ...
    
    def __bool__(self) -> bool:
        ...
    


_compiled_methods_allowlist: Incomplete
def call_prepare_scriptable_func_impl(obj, memo):
    ...

def call_prepare_scriptable_func(obj):
    ...

def create_script_dict(obj):
    ...

def create_script_list(obj, type_hint: Incomplete | None = ...):
    ...

@overload
def script(obj: type[Module], optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> Never:
    ...

@overload
def script(obj: dict, optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> torch.ScriptDict:
    ...

@overload
def script(obj: list, optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> torch.ScriptList:
    ...

@overload
def script(obj: Module, optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> RecursiveScriptModule:
    ...

@overload
def script(obj: _ClassVar, optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> _ClassVar:
    ...

@overload
def script(obj: Callable, optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> ScriptFunction:
    ...

@overload
def script(obj: Any, optimize: bool | None = ..., _frames_up: int = ..., _rcb: ResolutionCallback | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...) -> RecursiveScriptClass:
    ...

@overload
def script(obj, optimize: Incomplete | None = ..., _frames_up: int = ..., _rcb: Incomplete | None = ..., example_inputs: list[tuple] | dict[Callable, list[tuple]] | None = ...):
    ...

def interface(obj):
    ...

CompilationUnit: Incomplete
def pad(s: str, padding: int, offset: int = ..., char: str = ...):
    ...

class _ScriptProfileColumn:
    header: Incomplete
    alignment: Incomplete
    offset: Incomplete
    rows: Incomplete
    def __init__(self, header: str, alignment: int = ..., offset: int = ...) -> None:
        ...
    
    def add_row(self, lineno: int, value: Any):
        ...
    
    def materialize(self):
        ...
    


class _ScriptProfileTable:
    cols: Incomplete
    source_range: Incomplete
    def __init__(self, cols: list[_ScriptProfileColumn], source_range: list[int]) -> None:
        ...
    
    def dump_string(self):
        ...
    


class _ScriptProfile:
    profile: Incomplete
    def __init__(self) -> None:
        ...
    
    def enable(self) -> None:
        ...
    
    def disable(self) -> None:
        ...
    
    def dump_string(self) -> str:
        ...
    
    def dump(self) -> None:
        ...
    


