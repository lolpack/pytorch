"""
This type stub file was generated by pyright.
"""

import typing
import torch
import torch.fx
import os
import numpy.typing as npt
from collections.abc import Sequence
from typing import Any, Literal
from onnxscript import ir
from torch.onnx._internal.exporter import _building, _flags, _onnx_program, _registration

if typing.TYPE_CHECKING:
    ...
_TORCH_DTYPE_TO_ONNX: dict[torch.dtype, ir.DataType] = ...
_BLUE = ...
_END = ...
_STEP_ONE_ERROR_MESSAGE = ...
_STEP_TWO_ERROR_MESSAGE = ...
_STEP_THREE_ERROR_MESSAGE = ...
logger = ...
current_tracer: _building.OpRecorder | None = ...
def torch_dtype_to_onnx_dtype(dtype: torch.dtype) -> ir.DataType:
    ...

class TorchTensor(ir.Tensor):
    def __init__(self, tensor: torch.Tensor, name: str | None = ...) -> None:
        ...
    
    def numpy(self) -> npt.NDArray:
        ...
    
    def __array__(self, dtype: Any = ..., copy: bool | None = ...) -> npt.NDArray:
        ...
    
    def tobytes(self) -> bytes:
        ...
    


def exported_program_to_ir(exported_program: torch.export.ExportedProgram, *, registry: _registration.ONNXRegistry | None = ..., lower: Literal["at_conversion", "none"] = ...) -> ir.Model:
    """Convert an exported program to an ONNX IR model.

    Reference:
        - ExportedProgram spec: https://pytorch.org/docs/stable/export.ir_spec.html

    Args:
        exported_program: The exported program to convert.
        lower: Whether to lower the graph to core ONNX operators.
            at_conversion: Lower whe translating the FX graph to ONNX IR.
            none: Do not lower the graph.
        registry: The registry of all ONNX Script decomposition.
    """
    ...

@_flags.set_onnx_exporting_flag
def export(model: torch.nn.Module | torch.export.ExportedProgram | torch.fx.GraphModule | torch.jit.ScriptModule | torch.jit.ScriptFunction, args: tuple[Any, ...] = ..., kwargs: dict[str, Any] | None = ..., *, registry: _registration.ONNXRegistry | None = ..., dynamic_shapes: dict[str, Any] | tuple[Any, ...] | list[Any] | None = ..., input_names: Sequence[str] | None = ..., output_names: Sequence[str] | None = ..., report: bool = ..., verify: bool = ..., profile: bool = ..., dump_exported_program: bool = ..., artifacts_dir: str | os.PathLike = ..., verbose: bool | None = ...) -> _onnx_program.ONNXProgram:
    """Export a PyTorch model to ONNXProgram.

    Args:
        model: The model to export. This can be a PyTorch nn.Module or an ExportedProgram.
        args: The arguments to pass to the model.
        kwargs: The keyword arguments to pass to the model.
        registry: The registry of all ONNX decompositions.
        dynamic_shapes: Dynamic shapes in the graph.
        input_names: If provided, rename the inputs.
        output_names: If provided, rename the outputs.
        report: Whether to generate an error report if the export fails.
        verify: Whether to verify the ONNX model after exporting.
        profile: Whether to profile the export process. When report is True,
            the profile result will be saved in the report. Otherwise, the profile
            result will be printed.
        dump_exported_program: Whether to save the exported program to a file.
        artifacts_dir: The directory to save the exported program and error reports.
        verbose: Whether to print verbose messages. If None (default), some messages will be printed.

    Returns:
        The ONNXProgram with the exported IR graph.

    Raises:
        TorchExportError: If the export process fails with torch.export.
        ConversionError: If the ExportedProgram to ONNX translation fails.
    """
    ...

