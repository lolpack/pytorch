"""
This type stub file was generated by pyright.
"""

import abc
import dataclasses
import torch
import os
from typing import Any, TYPE_CHECKING

"""Strategies for capturing ExportedPrograms."""
if TYPE_CHECKING:
    ...
logger = ...
@dataclasses.dataclass
class Result:
    exported_program: torch.export.ExportedProgram | None
    strategy: str
    exception: Exception | None = ...
    @property
    def success(self) -> bool:
        """Whether the capture was successful.

        An exception can still be recorded even if the capture was successful. In
        this case the exception is informational only. For example, draft_export
        can record an exception if there are warnings during the export. The exceptions
        will go into the onnx export report when report=True.
        """
        ...
    


class CaptureStrategy(abc.ABC):
    """Strategy for capturing a module as ExportedProgram.

    To use a strategy, create an instance and call it with the model, args, kwargs, and dynamic_shapes.
    Example::

        strategy = TorchExportNonStrictStrategy(verbose=True)
        result = strategy(model, args, kwargs, dynamic_shapes)
    """
    def __init__(self, *, verbose: bool = ..., dump: bool = ..., artifacts_dir: str | os.PathLike = ..., timestamp: str | None = ...) -> None:
        """Initialize the strategy.

        Args:
            verbose: Whether to print verbose messages.
            dump: Whether to dump the intermediate artifacts to a file.
        """
        ...
    
    def __call__(self, model: torch.nn.Module | torch.jit.ScriptFunction, args: tuple[Any, ...], kwargs: dict[str, Any] | None, dynamic_shapes) -> Result:
        ...
    


class TorchExportStrictStrategy(CaptureStrategy):
    ...


class TorchExportNonStrictStrategy(CaptureStrategy):
    ...


class TorchExportDraftExportStrategy(CaptureStrategy):
    ...


CAPTURE_STRATEGIES = ...
