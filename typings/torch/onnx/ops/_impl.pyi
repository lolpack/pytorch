"""
This type stub file was generated by pyright.
"""

import typing
import torch
from typing import Callable, Optional

_T = typing.TypeVar("_T", bound=Callable)
ONNX_ATEN_DECOMP_TABLE: dict[torch._ops.OpOverload, Callable] = ...
_ATTENTION_23_ALLOWED_INTERMEDIATE_PRECISIONS = ...
@_onnx_op("RotaryEmbedding", 23)
def rotary_embedding_23(x: torch.Tensor, cos_cache: torch.Tensor, sin_cache: torch.Tensor, position_ids: Optional[torch.Tensor] = ..., *, interleaved: bool = ..., num_heads: int = ..., rotary_embedding_dim: int = ...) -> torch.Tensor:
    """RotaryEmbedding-23 https://onnx.ai/onnx/operators/onnx__RotaryEmbedding.html#rotaryembedding-23"""
    ...

@_onnx_op("Attention", 23)
def attention_23(Q: torch.Tensor, K: torch.Tensor, V: torch.Tensor, attn_mask: Optional[torch.Tensor] = ..., past_key: Optional[torch.Tensor] = ..., past_value: Optional[torch.Tensor] = ..., *, is_causal: bool = ..., kv_num_heads: int = ..., q_num_heads: int = ..., qk_matmul_output_mode: int = ..., scale: Optional[float] = ..., softcap: float = ..., softmax_precision: Optional[int] = ...) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]:
    """Attention-23 https://onnx.ai/onnx/operators/onnx__Attention.html#attention-23"""
    ...

