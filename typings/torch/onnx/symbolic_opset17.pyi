"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from typing import Optional
from torch import _C
from torch.onnx import symbolic_helper
from torch.onnx._internal import jit_utils

"""This file exports ONNX ops for opset 17.

Note [ONNX Operators that are added/updated in opset 17]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://github.com/onnx/onnx/blob/main/docs/Changelog.md#version-17-of-the-default-onnx-operator-set
New operators:
    BlackmanWindow
    DFT
    HammingWindow
    HannWindow
    LayerNormalization
    MelWeightMatrix
    STFT
    SequenceMap
"""
__all__ = ["layer_norm", "stft", "quantized_layer_norm"]
_onnx_symbolic = ...
@_onnx_symbolic("aten::layer_norm")
@symbolic_helper.parse_args("v", "is", "v", "v", "f", "none")
def layer_norm(g: jit_utils.GraphContext, input: _C.Value, normalized_shape: Sequence[int], weight: _C.Value, bias: _C.Value, eps: float, cudnn_enable: bool):
    ...

@_onnx_symbolic("quantized::layer_norm")
def quantized_layer_norm(g: jit_utils.GraphContext, x, normalized_shape, weight, bias, eps, op_scale, op_zero_point): # -> Value:
    ...

@_onnx_symbolic("aten::stft")
@symbolic_helper.parse_args("v", "i", "i", "i", "v", "b", "b", "b", "b")
def stft(g: jit_utils.GraphContext, input: _C.Value, n_fft: int, hop_length: Optional[int] = ..., win_length: Optional[int] = ..., window: Optional[_C.Value] = ..., normalized: bool = ..., onesided: Optional[bool] = ..., return_complex: Optional[bool] = ..., align_to_window: Optional[bool] = ...) -> _C.Value:
    """Associates `torch.stft` with the `STFT` ONNX operator.
    Note that torch.stft calls _VF.stft, without centering or padding options.
    Hence, this function does not contain these two arguments.
    See torch.stft source code for more info.

    Args:
        g: Graph to write the ONNX representation into
        input: Input tensor for the transformation
        n_fft: FFT size
        hop_length: Size of the hop. Defaults to `floot(n_fft // 4)`
        win_length: Size of the analysis window. Defaults to `n_fft`
        window: Analysis window. Defaults to a window of all ones
        normalized: Whether to return a normalized STFT
        onesided: Whether to return only half (+1) of the results, given the
            symmetry of the STFT
        return_complex: Whether to return the complex value (Note: Must be
            `False` or `None`)

    Returns:
        op: Operator for torch.stft associated with STFT (ONNX)
    """
    ...

